{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/admin/sections/SchemaValidation.tsx"],"sourcesContent":["/**\n * Schema Validation Admin Dashboard\n * \n * Real-time schema validation monitoring and testing dashboard\n * Shows validation status, errors, logs, and provides testing links\n */\n\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { \n  CheckCircle2, \n  XCircle, \n  AlertTriangle, \n  AlertCircle,\n  ExternalLink, \n  Code, \n  RefreshCw,\n  Search,\n  Eye,\n  FileJson,\n  FileText,\n  Globe,\n  TrendingUp,\n  Activity,\n  Database,\n  Zap\n} from 'lucide-react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\n\n// ============================================================================\n// TYPE DEFINITIONS\n// ============================================================================\n\ninterface SchemaValidationResult {\n  url: string;\n  pageType: string;\n  schemaType: string;\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  lastValidated: string;\n  schema: any;\n}\n\ninterface ValidationLog {\n  id: string;\n  url: string;\n  pageType: string;\n  status: 'valid' | 'invalid' | 'warning';\n  errorCount: number;\n  warningCount: number;\n  timestamp: string;\n  details?: string;\n}\n\ninterface SchemaStats {\n  totalPages: number;\n  validPages: number;\n  invalidPages: number;\n  warningPages: number;\n  lastValidationRun: string;\n  schemaTypes: {\n    type: string;\n    count: number;\n    validCount: number;\n  }[];\n}\n\n// ============================================================================\n// SAMPLE DATA (Replace with real API calls)\n// ============================================================================\n\nconst SAMPLE_PAGES = [\n  {\n    url: '/',\n    type: 'Homepage',\n    schemaTypes: ['Organization', 'WebSite'],\n    status: 'valid' as const,\n  },\n  {\n    url: '/category/trading-strategies/martingale-strategy',\n    type: 'Thread (Forum)',\n    schemaTypes: ['DiscussionForumPosting', 'BreadcrumbList', 'Comment'],\n    status: 'valid' as const,\n  },\n  {\n    url: '/category/expert-advisors/mt4/trend-ea',\n    type: 'Product (Marketplace)',\n    schemaTypes: ['Product', 'AggregateRating', 'Review', 'BreadcrumbList'],\n    status: 'valid' as const,\n  },\n  {\n    url: '/user/forex_newbie423',\n    type: 'Profile',\n    schemaTypes: ['Person'],\n    status: 'valid' as const,\n  },\n  {\n    url: '/category/forex-education/beginner-guide',\n    type: 'Article/Blog',\n    schemaTypes: ['Article', 'BreadcrumbList'],\n    status: 'warning' as const,\n    warning: 'Consider adding author image for rich results',\n  },\n];\n\nconst SAMPLE_LOGS: ValidationLog[] = [\n  {\n    id: '1',\n    url: '/',\n    pageType: 'Homepage',\n    status: 'valid',\n    errorCount: 0,\n    warningCount: 0,\n    timestamp: new Date().toISOString(),\n  },\n  {\n    id: '2',\n    url: '/thread/best-scalping-ea',\n    pageType: 'Article',\n    status: 'valid',\n    errorCount: 0,\n    warningCount: 1,\n    timestamp: new Date(Date.now() - 300000).toISOString(),\n    details: 'Missing recommended property: image dimensions',\n  },\n  {\n    id: '3',\n    url: '/content/invalid-product',\n    pageType: 'Product',\n    status: 'invalid',\n    errorCount: 2,\n    warningCount: 0,\n    timestamp: new Date(Date.now() - 600000).toISOString(),\n    details: 'Missing required properties: price, availability',\n  },\n];\n\n// ============================================================================\n// MAIN COMPONENT\n// ============================================================================\n\nexport default function SchemaValidation() {\n  const [selectedPage, setSelectedPage] = useState<string>('');\n  const [testUrl, setTestUrl] = useState<string>('');\n  const [validationResults, setValidationResults] = useState<SchemaValidationResult[]>([]);\n  const [isValidating, setIsValidating] = useState(false);\n\n  // Fetch schema validation stats\n  const { data: stats } = useQuery<SchemaStats>({\n    queryKey: ['/api/admin/schema/stats'],\n    refetchInterval: 60000, // Refresh every minute\n  });\n\n  // Fetch validation logs\n  const { data: logs } = useQuery<ValidationLog[]>({\n    queryKey: ['/api/admin/schema/logs'],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Validate all pages mutation\n  const validateAllMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('POST', '/api/admin/schema/validate-all', {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/schema/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/schema/logs'] });\n    },\n  });\n\n  // Validate single page\n  const validatePage = async (url: string) => {\n    setIsValidating(true);\n    try {\n      const response = await apiRequest('POST', '/api/admin/schema/validate', { url });\n      const result = await response.json();\n      setValidationResults([result, ...validationResults.slice(0, 9)]);\n    } catch (error) {\n      console.error('Validation error:', error);\n    } finally {\n      setIsValidating(false);\n    }\n  };\n\n  const getStatusIcon = (status: 'valid' | 'invalid' | 'warning') => {\n    switch (status) {\n      case 'valid':\n        return <CheckCircle2 className=\"w-4 h-4 text-green-600\" />;\n      case 'invalid':\n        return <XCircle className=\"w-4 h-4 text-red-600\" />;\n      case 'warning':\n        return <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: 'valid' | 'invalid' | 'warning') => {\n    const variants: Record<string, 'default' | 'destructive' | 'outline' | 'secondary'> = {\n      valid: 'default',\n      invalid: 'destructive',\n      warning: 'outline',\n    };\n    return (\n      <Badge variant={variants[status]} className=\"gap-1\">\n        {getStatusIcon(status)}\n        {status.toUpperCase()}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h2 className=\"text-3xl font-bold tracking-tight\">Schema Validation Dashboard</h2>\n        <p className=\"text-muted-foreground mt-2\">\n          Real-time monitoring and validation of Schema.org JSON-LD structured data across all pages\n        </p>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Pages</CardTitle>\n            <FileJson className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.totalPages || SAMPLE_PAGES.length}</div>\n            <p className=\"text-xs text-muted-foreground\">With schema markup</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Valid Schemas</CardTitle>\n            <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {stats?.validPages || 5}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats ? Math.round((stats.validPages / stats.totalPages) * 100) : 83}% success rate\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Warnings</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {stats?.warningPages || 1}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Need attention</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Errors</CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              {stats?.invalidPages || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Require fixes</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"validator\">Live Validator</TabsTrigger>\n          <TabsTrigger value=\"logs\">Validation Logs</TabsTrigger>\n          <TabsTrigger value=\"schema-types\">Schema Types</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"w-5 h-5\" />\n                Page Validation Status\n              </CardTitle>\n              <CardDescription>\n                Current schema validation status for all pages\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex justify-between items-center mb-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Last validation: {stats?.lastValidationRun || 'Just now'}\n                </div>\n                <Button\n                  onClick={() => validateAllMutation.mutate()}\n                  disabled={validateAllMutation.isPending}\n                  size=\"sm\"\n                  className=\"gap-2\"\n                >\n                  <RefreshCw className={`w-4 h-4 ${validateAllMutation.isPending ? 'animate-spin' : ''}`} />\n                  Validate All Pages\n                </Button>\n              </div>\n\n              <ScrollArea className=\"h-[400px]\">\n                <div className=\"space-y-2\">\n                  {SAMPLE_PAGES.map((page, idx) => {\n                    const log = SAMPLE_LOGS.find(l => l.url === page.url);\n                    const status = log?.status || 'valid';\n                    \n                    return (\n                      <div\n                        key={idx}\n                        className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                      >\n                        <div className=\"flex-1 space-y-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium\">{page.url}</span>\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {page.type}\n                            </Badge>\n                          </div>\n                          <div className=\"flex gap-1\">\n                            {page.schemaTypes.map((type, i) => (\n                              <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                                {type}\n                              </Badge>\n                            ))}\n                          </div>\n                          {log?.details && (\n                            <p className=\"text-xs text-muted-foreground\">{log.details}</p>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          {getStatusBadge(status)}\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setTestUrl(page.url);\n                              setSelectedPage(page.url);\n                            }}\n                            className=\"gap-1\"\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                            View\n                          </Button>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n\n          {/* Quick Testing Links */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Zap className=\"w-5 h-5\" />\n                Quick Testing Tools\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid gap-3 md:grid-cols-2\">\n              <Button\n                variant=\"outline\"\n                className=\"justify-start gap-2\"\n                onClick={() => window.open('https://search.google.com/test/rich-results', '_blank')}\n              >\n                <ExternalLink className=\"w-4 h-4\" />\n                Google Rich Results Test\n              </Button>\n              <Button\n                variant=\"outline\"\n                className=\"justify-start gap-2\"\n                onClick={() => window.open('https://validator.schema.org/', '_blank')}\n              >\n                <ExternalLink className=\"w-4 h-4\" />\n                Schema.org Validator\n              </Button>\n              <Button\n                variant=\"outline\"\n                className=\"justify-start gap-2\"\n                onClick={() => window.open('https://search.google.com/search-console', '_blank')}\n              >\n                <ExternalLink className=\"w-4 h-4\" />\n                Google Search Console\n              </Button>\n              <Button\n                variant=\"outline\"\n                className=\"justify-start gap-2\"\n                onClick={() => window.open('https://json-ld.org/playground/', '_blank')}\n              >\n                <ExternalLink className=\"w-4 h-4\" />\n                JSON-LD Playground\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Schema Type Distribution */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Schema Type Distribution</CardTitle>\n              <CardDescription>Number of pages by schema type</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">DiscussionForumPosting</span>\n                  <Badge variant=\"secondary\">Threads</Badge>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Product</span>\n                  <Badge variant=\"secondary\">Marketplace</Badge>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Person</span>\n                  <Badge variant=\"secondary\">Profiles</Badge>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Article/BlogPosting</span>\n                  <Badge variant=\"secondary\">Content</Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Google Rich Results Testing */}\n          <Card className=\"col-span-full\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Search className=\"h-5 w-5\" />\n                Google Rich Results Testing\n              </CardTitle>\n              <CardDescription>\n                Test your schemas with Google's official validation tools\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">Rich Results Test</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Test how Google sees your structured data\n                  </p>\n                  <a\n                    href=\"https://search.google.com/test/rich-results\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-2 text-sm text-blue-600 hover:underline\"\n                    data-testid=\"link-google-rich-results\"\n                  >\n                    Open Rich Results Test <ExternalLink className=\"h-3 w-3\" />\n                  </a>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">Schema Markup Validator</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Validate your JSON-LD against Schema.org standards\n                  </p>\n                  <a\n                    href=\"https://validator.schema.org/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-2 text-sm text-blue-600 hover:underline\"\n                    data-testid=\"link-schema-validator\"\n                  >\n                    Open Schema Validator <ExternalLink className=\"h-3 w-3\" />\n                  </a>\n                </div>\n              </div>\n              \n              {/* Quick Test URLs */}\n              <div className=\"mt-6 space-y-2\">\n                <h4 className=\"font-medium text-sm\">Quick Test URLs</h4>\n                <div className=\"grid gap-2\">\n                  {[\n                    { type: 'Thread', url: '/category/trading-strategies/best-scalping-ea' },\n                    { type: 'Marketplace', url: '/category/expert-advisors/trend-ea' },\n                    { type: 'Profile', url: '/user/forex_newbie423' },\n                  ].map((test) => (\n                    <div key={test.type} className=\"flex items-center justify-between p-2 bg-muted rounded\">\n                      <span className=\"text-sm font-medium\">{test.type}</span>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            const fullUrl = `${window.location.origin}${test.url}`;\n                            const testUrl = `https://search.google.com/test/rich-results?url=${encodeURIComponent(fullUrl)}`;\n                            window.open(testUrl, '_blank');\n                          }}\n                          data-testid={`button-test-google-${test.type.toLowerCase()}`}\n                        >\n                          Test in Google <ExternalLink className=\"h-3 w-3 ml-1\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => navigator.clipboard.writeText(`${window.location.origin}${test.url}`)}\n                          data-testid={`button-copy-url-${test.type.toLowerCase()}`}\n                        >\n                          Copy URL\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Validation Logs */}\n          <Card className=\"col-span-full\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Validation Logs\n              </CardTitle>\n              <CardDescription>\n                Recent schema validation events and errors\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-3 p-3 bg-green-50 dark:bg-green-950 rounded\">\n                  <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">All schemas validated successfully</p>\n                    <p className=\"text-xs text-muted-foreground\">Last check: Just now</p>\n                  </div>\n                </div>\n                <div className=\"text-sm text-muted-foreground text-center py-4\">\n                  No validation errors detected\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Schema.org 2025 Compliance Checklist */}\n          <Card className=\"col-span-full\">\n            <CardHeader>\n              <CardTitle>Schema.org 2025 Compliance Checklist</CardTitle>\n              <CardDescription>Ensure all schemas meet the latest standards</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {[\n                  { item: 'All schemas use @context: \"https://schema.org\"', status: true },\n                  { item: 'Required properties present for each type', status: true },\n                  { item: 'Publisher includes Organization with logo', status: true },\n                  { item: 'Dates in ISO 8601 format', status: true },\n                  { item: 'Images include proper dimensions', status: false, note: 'Optional but recommended' },\n                  { item: 'Videos use ISO 8601 duration format', status: true },\n                ].map((check, idx) => (\n                  <div key={idx} className=\"flex items-start gap-3\">\n                    {check.status ? (\n                      <CheckCircle2 className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                    ) : (\n                      <AlertCircle className=\"h-5 w-5 text-yellow-600 mt-0.5\" />\n                    )}\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">{check.item}</p>\n                      {check.note && (\n                        <p className=\"text-xs text-muted-foreground\">{check.note}</p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Live Validator Tab */}\n        <TabsContent value=\"validator\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Live Schema Validator</CardTitle>\n              <CardDescription>\n                Test and validate schema markup for any page URL\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex gap-2\">\n                <div className=\"flex-1\">\n                  <Label htmlFor=\"test-url\">Page URL</Label>\n                  <Input\n                    id=\"test-url\"\n                    placeholder=\"/thread/best-scalping-ea\"\n                    value={testUrl}\n                    onChange={(e) => setTestUrl(e.target.value)}\n                  />\n                </div>\n                <div className=\"flex items-end\">\n                  <Button\n                    onClick={() => validatePage(testUrl)}\n                    disabled={!testUrl || isValidating}\n                    className=\"gap-2\"\n                  >\n                    <Search className=\"w-4 h-4\" />\n                    Validate\n                  </Button>\n                </div>\n              </div>\n\n              {validationResults.length > 0 && (\n                <div className=\"space-y-4\">\n                  <Separator />\n                  <div className=\"text-sm font-medium\">Validation Results</div>\n                  <ScrollArea className=\"h-[500px]\">\n                    <div className=\"space-y-4\">\n                      {validationResults.map((result, idx) => (\n                        <Card key={idx}>\n                          <CardHeader>\n                            <div className=\"flex items-center justify-between\">\n                              <CardTitle className=\"text-base\">{result.url}</CardTitle>\n                              {getStatusBadge(result.isValid ? 'valid' : 'invalid')}\n                            </div>\n                            <CardDescription>\n                              Schema Type: {result.schemaType} • Page Type: {result.pageType}\n                            </CardDescription>\n                          </CardHeader>\n                          <CardContent className=\"space-y-3\">\n                            {result.errors.length > 0 && (\n                              <Alert variant=\"destructive\">\n                                <AlertTriangle className=\"h-4 w-4\" />\n                                <AlertTitle>Errors Found</AlertTitle>\n                                <AlertDescription>\n                                  <ul className=\"list-disc list-inside space-y-1\">\n                                    {result.errors.map((error, i) => (\n                                      <li key={i} className=\"text-sm\">{error}</li>\n                                    ))}\n                                  </ul>\n                                </AlertDescription>\n                              </Alert>\n                            )}\n\n                            {result.warnings.length > 0 && (\n                              <Alert>\n                                <AlertTriangle className=\"h-4 w-4\" />\n                                <AlertTitle>Warnings</AlertTitle>\n                                <AlertDescription>\n                                  <ul className=\"list-disc list-inside space-y-1\">\n                                    {result.warnings.map((warning, i) => (\n                                      <li key={i} className=\"text-sm\">{warning}</li>\n                                    ))}\n                                  </ul>\n                                </AlertDescription>\n                              </Alert>\n                            )}\n\n                            {result.isValid && result.errors.length === 0 && (\n                              <Alert>\n                                <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                                <AlertTitle>Schema Valid</AlertTitle>\n                                <AlertDescription>\n                                  All required properties present and valid\n                                </AlertDescription>\n                              </Alert>\n                            )}\n\n                            <details className=\"border rounded-lg p-3\">\n                              <summary className=\"cursor-pointer font-medium text-sm flex items-center gap-2\">\n                                <Code className=\"w-4 h-4\" />\n                                View Schema JSON\n                              </summary>\n                              <pre className=\"mt-3 text-xs bg-muted p-3 rounded overflow-x-auto\">\n                                {JSON.stringify(result.schema, null, 2)}\n                              </pre>\n                            </details>\n\n                            <div className=\"flex gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"gap-1\"\n                                onClick={() => {\n                                  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com';\n                                  window.open(\n                                    `https://search.google.com/test/rich-results?url=${encodeURIComponent(siteUrl + result.url)}`,\n                                    '_blank'\n                                  );\n                                }}\n                              >\n                                <ExternalLink className=\"w-3 h-3\" />\n                                Test in Google\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"gap-1\"\n                                onClick={() => {\n                                  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com';\n                                  window.open(\n                                    `https://validator.schema.org/#url=${encodeURIComponent(siteUrl + result.url)}`,\n                                    '_blank'\n                                  );\n                                }}\n                              >\n                                <ExternalLink className=\"w-3 h-3\" />\n                                Schema.org Validator\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Validation Logs Tab */}\n        <TabsContent value=\"logs\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Database className=\"w-5 h-5\" />\n                Validation History\n              </CardTitle>\n              <CardDescription>\n                Historical log of all schema validation runs\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-[500px]\">\n                <div className=\"space-y-2\">\n                  {(logs || SAMPLE_LOGS).map((log) => (\n                    <div\n                      key={log.id}\n                      className=\"flex items-start justify-between p-4 border rounded-lg\"\n                    >\n                      <div className=\"space-y-1 flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          {getStatusIcon(log.status)}\n                          <span className=\"font-medium\">{log.url}</span>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {log.pageType}\n                          </Badge>\n                        </div>\n                        {log.details && (\n                          <p className=\"text-sm text-muted-foreground\">{log.details}</p>\n                        )}\n                        <div className=\"flex gap-4 text-xs text-muted-foreground\">\n                          <span>Errors: {log.errorCount}</span>\n                          <span>Warnings: {log.warningCount}</span>\n                          <span>\n                            {new Date(log.timestamp).toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                      {getStatusBadge(log.status)}\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Schema Types Tab */}\n        <TabsContent value=\"schema-types\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                Schema Type Distribution\n              </CardTitle>\n              <CardDescription>\n                Overview of schema types implemented across the platform\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[\n                  { type: 'Organization', count: 1, validCount: 1, description: 'Company information on homepage' },\n                  { type: 'WebSite', count: 1, validCount: 1, description: 'Site-wide search capability' },\n                  { type: 'Article', count: 15, validCount: 14, description: 'Forum threads and blog posts' },\n                  { type: 'Product', count: 10, validCount: 10, description: 'Marketplace EA listings' },\n                  { type: 'BreadcrumbList', count: 25, validCount: 25, description: 'Navigation breadcrumbs' },\n                  { type: 'ProfilePage', count: 15, validCount: 15, description: 'User profile pages' },\n                  { type: 'LocalBusiness', count: 7, validCount: 7, description: 'Broker listings' },\n                ].map((item, idx) => (\n                  <div key={idx} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"space-y-1 flex-1\">\n                      <div className=\"font-medium\">{item.type}</div>\n                      <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                    </div>\n                    <div className=\"text-right space-y-1\">\n                      <div className=\"text-sm font-medium\">\n                        {item.validCount}/{item.count} valid\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {Math.round((item.validCount / item.count) * 100)}% success rate\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}