[00:00:02.388] Server  LOG      ✓ Ready in 1167ms
[00:00:02.393] Server  WARN     ⚠ Cross origin request detected from 87945529-0b43-4f9c-9b13-1739264a6781-00-2zprv3dqpksyc.janeway.replit.dev to /_next/* resource. In a future major version of Next.js, you will need to explicitly configure "allowedDevOrigins" in next.config to allow this.
Read more: https://nextjs.org/docs/app/api-reference/config/next-config-js/allowedDevOrigins
[00:00:05.469] Server  LOG      ○ Compiling / ...
[00:00:16.355] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:16.416] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:16.417] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:00:16.423] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:16.424] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:00:16.426] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:16.427] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:00:16.554] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:16.652] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:16.653] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:00:16.654] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:16.654] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:00:16.655] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:16.656] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:00:16.688] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:16.689] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:00:16.690] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:16.690] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:00:16.692] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:16.692] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:00:21.915] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <script>
                      <script>
                      <RootLayout>
                        <html lang="en" suppressHydrationWarning={true}>
                          <head>
                            <script>
                            <script
                              dangerouslySetInnerHTML={{
+                               __html: "\n              window.dataLayer = window.dataLayer || [];\n              fun..."
-                               __html: ""
                              }}
-                             src="/__replco/static/devtools/injected.js"
-                             onerror={"parent.postMessage({event:'error',payload:'script.onerror: Failed to load '+e..."}
                            >
                          ...
                            <div className="border-t p...">
                              <p>
                              <div className="flex flex-...">
                                <p>
                                <p>
+                                 1761773045808
-                                 1761773043183
                  ...

[00:00:26.226] Server  WARN     ⚠ Cross origin request detected from 127.0.0.1 to /_next/* resource. In a future major version of Next.js, you will need to explicitly configure "allowedDevOrigins" in next.config to allow this.
Read more: https://nextjs.org/docs/app/api-reference/config/next-config-js/allowedDevOrigins
[00:00:26.272] Browser INFO    %cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools font-weight:bold
[00:00:27.539] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <InnerLayoutRouter url="/members" tree={[...]} params={{}} cacheNode={{lazyData:null, ...}} segmentPath={[...]} ...>
      <SegmentViewNode type="page" pagePath="members/pa...">
        <SegmentTrieNode>
        <MembersPage>
          <MembersClient initialData={{...}}>
            <div className="min-h-scre...">
              <Header>
              <div>
              <main className="max-w-[160...">
                <div className="grid grid-...">
                  <aside>
                  <div className="lg:col-spa...">
                    <_c>
                      <div ref={null} className="shadcn-car...">
                        <_c8 className="p-4">
                          <div ref={null} className="p-4">
                            <div className="relative">
                              <Search>
                              <_c placeholder="Search mem..." value="" onChange={function onChange} className="pl-10" ...>
                                <input
                                  type={undefined}
                                  className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 te..."
                                  ref={null}
                                  placeholder="Search members..."
                                  value=""
                                  onChange={function onChange}
                                  data-testid="input-search-members"
-                                 style={{caret-color:"transparent"}}
                                >
                    ...
                  ...
                    <div ref={null} className="p-4 pt-0 s...">
                      <LinkComponent href="/user/gene..." data-testid="link-trend...">
                        <a data-testid="link-trend..." ref={function} onClick={function onClick} ...>
                          <div className="flex items...">
                            <Badge>
                            <_c>
                            <div>
                            <div className="flex items...">
                              <ArrowUp>
                              <span className="text-xs fo...">
+                               258
-                               209
                      ...
              ...
      ...

[00:00:32.864] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <script>
                      <script>
                      <RootLayout>
                        <html lang="en" suppressHydrationWarning={true}>
                          <head>
                            <script>
                            <script
                              dangerouslySetInnerHTML={{
+                               __html: "\n              window.dataLayer = window.dataLayer || [];\n              fun..."
-                               __html: ""
                              }}
-                             src="/__replco/static/devtools/injected.js"
-                             onerror={"parent.postMessage({event:'error',payload:'script.onerror: Failed to load '+e..."}
                            >
                          ...
                            <div className="border-t p...">
                              <p>
                              <div className="flex flex-...">
                                <p>
                                <p>
+                                 1761773053493
-                                 1761773043468
                  ...

[00:03:34.701] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:03:35.736] Browser INFO    %cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools font-weight:bold
[00:03:36.436] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <HTTPAccessFallbackBoundary notFound={undefined} forbidden={undefined} unauthorized={undefined}>
      <RedirectBoundary>
        <RedirectErrorBoundary router={{...}}>
          <InnerLayoutRouter url="/members" tree={[...]} params={{}} cacheNode={{lazyData:null, ...}} segmentPath={[...]} ...>
            <SegmentViewNode type="page" pagePath="members/pa...">
              <SegmentTrieNode>
              <MembersPage>
                <MembersClient initialData={{...}}>
                  <div className="min-h-scre...">
                    <Header>
                    <div>
                    <main>
                    <EnhancedFooter>
                      <footer className="border-t m...">
                        <div className="container ...">
                          <div>
                          <div className="border-t p...">
                            <p>
                            <div className="flex flex-...">
                              <p>
                              <p>
+                               1761773241324
-                               1761773240532
            ...
          ...

[00:08:43.581] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:08:43.586] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:08:43.588] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:08:43.589] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:08:43.592] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:08:43.592] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:09:01.124] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <script>
                      <script>
                      <RootLayout>
                        <html lang="en" suppressHydrationWarning={true}>
                          <head>
                            <script>
                            <script
                              dangerouslySetInnerHTML={{
+                               __html: "\n              window.dataLayer = window.dataLayer || [];\n              fun..."
-                               __html: ""
                              }}
-                             src="/__replco/static/devtools/injected.js"
-                             onerror={"parent.postMessage({event:'error',payload:'script.onerror: Failed to load '+e..."}
                            >
                          ...
                            <div className="border-t p...">
                              <p>
                              <div className="flex flex-...">
                                <p>
                                <p>
+                                 1761773562090
-                                 1761773549123
                  ...

