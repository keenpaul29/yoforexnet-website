[00:00:02.039] Server  LOG      ✓ Ready in 1390ms
[00:00:02.042] Server  WARN     ⚠ Cross origin request detected from 87945529-0b43-4f9c-9b13-1739264a6781-00-2zprv3dqpksyc.janeway.replit.dev to /_next/* resource. In a future major version of Next.js, you will need to explicitly configure "allowedDevOrigins" in next.config to allow this.
Read more: https://nextjs.org/docs/app/api-reference/config/next-config-js/allowedDevOrigins
[00:00:05.137] Server  LOG      ○ Compiling / ...
[00:00:12.903] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:12.932] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:12.934] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:00:12.938] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:12.939] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:00:12.940] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:12.940] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:00:12.987] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:12.987] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:00:12.989] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:12.989] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:00:12.991] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:12.992] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:00:13.030] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:13.030] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:00:13.032] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:13.032] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:00:13.033] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:13.033] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:00:13.125] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:17.918] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <script>
                      <script>
                      <RootLayout>
                        <html lang="en" suppressHydrationWarning={true}>
                          <head>
                            <script>
                            <script
                              dangerouslySetInnerHTML={{
+                               __html: "\n              window.dataLayer = window.dataLayer || [];\n              fun..."
-                               __html: ""
                              }}
-                             src="/__replco/static/devtools/injected.js"
-                             onerror={"parent.postMessage({event:'error',payload:'script.onerror: Failed to load '+e..."}
                            >
                          ...
                            <div className="border-t p...">
                              <p>
                              <div className="flex flex-...">
                                <p>
                                <p>
+                                 1761766537688
-                                 1761766535197
                  ...

[00:00:23.512] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <script>
                      <script>
                      <RootLayout>
                        <html lang="en" suppressHydrationWarning={true}>
                          <head>
                            <script>
                            <script
                              dangerouslySetInnerHTML={{
+                               __html: "\n              window.dataLayer = window.dataLayer || [];\n              fun..."
-                               __html: ""
                              }}
-                             src="/__replco/static/devtools/injected.js"
-                             onerror={"parent.postMessage({event:'error',payload:'script.onerror: Failed to load '+e..."}
                            >
                          ...
                            <div className="border-t p...">
                              <p>
                              <div className="flex flex-...">
                                <p>
                                <p>
+                                 1761766542314
-                                 1761766534885
                  ...

