[00:00:02.387] Server  LOG      ✓ Ready in 1765ms
[00:00:02.392] Server  WARN     ⚠ Cross origin request detected from 87945529-0b43-4f9c-9b13-1739264a6781-00-2zprv3dqpksyc.janeway.replit.dev to /_next/* resource. In a future major version of Next.js, you will need to explicitly configure "allowedDevOrigins" in next.config to allow this.
Read more: https://nextjs.org/docs/app/api-reference/config/next-config-js/allowedDevOrigins
[00:00:05.482] Server  LOG      ○ Compiling / ...
[00:00:27.048] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:27.075] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:27.076] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:00:27.081] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:27.082] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:00:27.084] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:27.085] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:00:27.200] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:27.269] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:27.269] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:00:27.270] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:27.271] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:00:27.272] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:27.272] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:00:27.315] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:27.315] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:00:27.317] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:27.317] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:00:27.318] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:27.318] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:00:32.660] Server  LOG      ○ Compiling /category/[...path] ...
[00:00:33.303] Browser INFO    %cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools font-weight:bold
[00:00:34.701] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <script>
                      <script>
                      <RootLayout>
                        <html lang="en" suppressHydrationWarning={true}>
                          <head>
                            <script>
                            <script
                              dangerouslySetInnerHTML={{
+                               __html: "\n              window.dataLayer = window.dataLayer || [];\n              fun..."
-                               __html: ""
                              }}
-                             src="/__replco/static/devtools/injected.js"
-                             onerror={"parent.postMessage({event:'error',payload:'script.onerror: Failed to load '+e..."}
                            >
                          ...
                            <div className="border-t p...">
                              <p>
                              <div className="flex flex-...">
                                <p>
                                <p>
+                                 1761750646405
-                                 1761750685225
                  ...

[00:00:35.960] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:35.971] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:36.017] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:36.018] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:36.353] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:37.285] Server  WARN     ⚠ Cross origin request detected from 127.0.0.1 to /_next/* resource. In a future major version of Next.js, you will need to explicitly configure "allowedDevOrigins" in next.config to allow this.
Read more: https://nextjs.org/docs/app/api-reference/config/next-config-js/allowedDevOrigins
[00:00:37.349] Browser INFO    %cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools font-weight:bold
[00:00:37.787] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <RedirectBoundary>
      <RedirectErrorBoundary router={{...}}>
        <InnerLayoutRouter url="/category/..." tree={[...]} params={{path:[...]}} cacheNode={{lazyData:null, ...}} ...>
          <SegmentViewNode type="page" pagePath="category/[...">
            <SegmentTrieNode>
            <HierarchicalCategoryPage>
              <script>
              <HierarchicalCategoryPage>
                <CategoryDiscussionClient slug="ecn-brokers" initialCategory={{slug:"ecn-...", ...}} ...>
                  <div className="min-h-scre...">
                    <Header>
                    <main>
                    <EnhancedFooter>
                      <footer className="border-t m...">
                        <div className="container ...">
                          <div>
                          <div className="border-t p...">
                            <p>
                            <div className="flex flex-...">
                              <p>
                              <p>
+                               1761750693263
-                               1761750692314
                    ...
          ...
        ...

[00:00:38.736] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <script>
                      <script>
                      <RootLayout>
                        <html lang="en" suppressHydrationWarning={true}>
                          <head>
                            <script>
                            <script
                              dangerouslySetInnerHTML={{
+                               __html: "\n              window.dataLayer = window.dataLayer || [];\n              fun..."
-                               __html: ""
                              }}
-                             src="/__replco/static/devtools/injected.js"
-                             onerror={"parent.postMessage({event:'error',payload:'script.onerror: Failed to load '+e..."}
                            >
                          <body
                            className="inter_5972bc34-module__OU16Qa__className"
-                           data-new-gr-c-s-check-loaded="14.1260.0"
-                           data-gr-ext-installed=""
                          >
                            ...
                              <div className="border-t p...">
                                <p>
                                <div className="flex flex-...">
                                  <p>
                                  <p>
+                                   1761750692127
-                                   1761750685330
                  ...

[00:00:39.892] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:39.898] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:39.918] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:39.919] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:40.057] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:40.795] Browser INFO    %cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools font-weight:bold
[00:00:41.114] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <RedirectBoundary>
      <RedirectErrorBoundary router={{...}}>
        <InnerLayoutRouter url="/category/..." tree={[...]} params={{path:[...]}} cacheNode={{lazyData:null, ...}} ...>
          <SegmentViewNode type="page" pagePath="category/[...">
            <SegmentTrieNode>
            <HierarchicalCategoryPage>
              <script>
              <HierarchicalCategoryPage>
                <CategoryDiscussionClient slug="mql4" initialCategory={{slug:"mql4", ...}} initialThreads={[...]}>
                  <div className="min-h-scre...">
                    <Header>
                    <main>
                    <EnhancedFooter>
                      <footer className="border-t m...">
                        <div className="container ...">
                          <div>
                          <div className="border-t p...">
                            <p>
                            <div className="flex flex-...">
                              <p>
                              <p>
+                               1761750696669
-                               1761750695876
                    ...
          ...
        ...

[00:00:55.324] Browser INFO    %cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools font-weight:bold
