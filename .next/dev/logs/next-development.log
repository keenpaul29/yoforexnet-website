[00:00:01.322] Server  LOG      ✓ Ready in 937ms
[00:00:02.046] Server  WARN     ⚠ Cross origin request detected from 87945529-0b43-4f9c-9b13-1739264a6781-00-2zprv3dqpksyc.janeway.replit.dev to /_next/* resource. In a future major version of Next.js, you will need to explicitly configure "allowedDevOrigins" in next.config to allow this.
Read more: https://nextjs.org/docs/app/api-reference/config/next-config-js/allowedDevOrigins
[00:00:04.344] Server  LOG      ○ Compiling / ...
[00:00:08.459] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:08.474] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:08.475] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:00:08.478] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:08.478] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:00:08.479] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:08.480] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:00:08.515] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:08.515] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:00:08.516] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:08.516] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:00:08.518] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:08.518] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:00:08.541] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:08.541] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:00:08.542] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:08.542] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:00:08.543] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:08.543] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:00:08.617] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:00:09.806] Server  WARN     ⚠ Cross origin request detected from 127.0.0.1 to /_next/* resource. In a future major version of Next.js, you will need to explicitly configure "allowedDevOrigins" in next.config to allow this.
Read more: https://nextjs.org/docs/app/api-reference/config/next-config-js/allowedDevOrigins
[00:00:09.873] Browser INFO    %cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools font-weight:bold
[00:00:10.630] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <HTTPAccessFallbackErrorBoundary pathname="/" notFound={<SegmentViewNode>} forbidden={undefined} ...>
      <RedirectBoundary>
        <RedirectErrorBoundary router={{...}}>
          <InnerLayoutRouter url="/" tree={[...]} params={{}} cacheNode={{lazyData:null, ...}} segmentPath={[...]} ...>
            <SegmentViewNode type="page" pagePath="page.tsx">
              <SegmentTrieNode>
              <HomePage>
                <HomeClient initialStats={{totalThreads:0, ...}} initialCategories={[...]} initialThreads={[...]}>
                  <div className="min-h-scre...">
                    <Header>
                    <StatsBar>
                    <main>
                    <EnhancedFooter>
                      <footer className="border-t m...">
                        <div className="container ...">
                          <div>
                          <div className="border-t p...">
                            <p>
                            <div className="flex flex-...">
                              <p>
                              <p>
+                               1761734859632
-                               1761734858634
            ...
          ...

[00:00:15.787] Browser INFO    %cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools font-weight:bold
[00:00:15.811] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <HTTPAccessFallbackErrorBoundary pathname="/" notFound={<SegmentViewNode>} forbidden={undefined} ...>
      <RedirectBoundary>
        <RedirectErrorBoundary router={{...}}>
          <InnerLayoutRouter url="/" tree={[...]} params={{}} cacheNode={{lazyData:null, ...}} segmentPath={[...]} ...>
            <SegmentViewNode type="page" pagePath="page.tsx">
              <SegmentTrieNode>
              <HomePage>
                <HomeClient initialStats={{totalThreads:0, ...}} initialCategories={[...]} initialThreads={[...]}>
                  <div className="min-h-scre...">
                    <Header>
                    <StatsBar>
                    <main>
                    <EnhancedFooter>
                      <footer className="border-t m...">
                        <div className="container ...">
                          <div>
                          <div className="border-t p...">
                            <p>
                            <div className="flex flex-...">
                              <p>
                              <p>
+                               1761734821103
-                               1761734858417
            ...
          ...

[00:00:16.269] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <HTTPAccessFallbackErrorBoundary pathname="/" notFound={<SegmentViewNode>} forbidden={undefined} ...>
      <RedirectBoundary>
        <RedirectErrorBoundary router={{...}}>
          <InnerLayoutRouter url="/" tree={[...]} params={{}} cacheNode={{lazyData:null, ...}} segmentPath={[...]} ...>
            <SegmentViewNode type="page" pagePath="page.tsx">
              <SegmentTrieNode>
              <HomePage>
                <HomeClient initialStats={{totalThreads:0, ...}} initialCategories={[...]} initialThreads={[...]}>
                  <div className="min-h-scre...">
                    <Header>
                    <StatsBar>
                    <main>
                    <EnhancedFooter>
                      <footer className="border-t m...">
                        <div className="container ...">
                          <div>
                          <div className="border-t p...">
                            <p>
                            <div className="flex flex-...">
                              <p>
                              <p>
+                               1761734821481
-                               1761734858505
            ...
          ...

[00:02:39.277] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:02:39.277] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/stats
[00:02:39.279] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:02:39.279] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/categories/tree/top?limit=6
[00:02:39.280] Server  LOG     [API Config] Internal API URL: http://127.0.0.1:3001
[00:02:39.280] Server  LOG     [SSR Fetch] Fetching: http://127.0.0.1:3001/api/threads
[00:02:43.194] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <HTTPAccessFallbackErrorBoundary pathname="/" notFound={<SegmentViewNode>} forbidden={undefined} ...>
      <RedirectBoundary>
        <RedirectErrorBoundary router={{...}}>
          <InnerLayoutRouter url="/" tree={[...]} params={{}} cacheNode={{lazyData:null, ...}} segmentPath={[...]} ...>
            <SegmentViewNode type="page" pagePath="page.tsx">
              <SegmentTrieNode>
              <HomePage>
                <HomeClient initialStats={{totalThreads:0, ...}} initialCategories={[...]} initialThreads={[...]}>
                  <div className="min-h-scre...">
                    <Header>
                    <StatsBar>
                    <main>
                    <EnhancedFooter>
                      <footer className="border-t m...">
                        <div className="container ...">
                          <div>
                          <div className="border-t p...">
                            <p>
                            <div className="flex flex-...">
                              <p>
                              <p>
+                               1761734968539
-                               1761735008754
            ...
          ...

[00:20:40.672] Browser LOG     [Activity Tracker] User active for 0 seconds
[00:20:41.691] Browser LOG     [Activity Tracker] User active for 1 seconds
[00:20:42.693] Browser LOG     [Activity Tracker] User active for 2 seconds
[00:20:43.697] Browser LOG     [Activity Tracker] User active for 3 seconds
[00:20:44.691] Browser LOG     [Activity Tracker] User active for 4 seconds
[00:20:45.682] Browser LOG     [Activity Tracker] User active for 5 seconds
[00:20:46.693] Browser LOG     [Activity Tracker] User active for 6 seconds
[00:20:47.697] Browser LOG     [Activity Tracker] User active for 7 seconds
[00:20:48.688] Browser LOG     [Activity Tracker] User active for 8 seconds
[00:20:49.699] Browser LOG     [Activity Tracker] User active for 9 seconds
[00:20:50.682] Browser LOG     [Activity Tracker] User active for 10 seconds
[00:20:51.688] Browser LOG     [Activity Tracker] User active for 11 seconds
[00:20:52.689] Browser LOG     [Activity Tracker] User active for 12 seconds
[00:20:53.690] Browser LOG     [Activity Tracker] User active for 13 seconds
[00:20:54.685] Browser LOG     [Activity Tracker] User active for 14 seconds
[00:20:55.687] Browser LOG     [Activity Tracker] User active for 15 seconds
[00:20:56.696] Browser LOG     [Activity Tracker] User active for 16 seconds
[00:20:57.686] Browser LOG     [Activity Tracker] User active for 17 seconds
[00:20:58.694] Browser LOG     [Activity Tracker] User active for 18 seconds
[00:20:59.691] Browser LOG     [Activity Tracker] User active for 19 seconds
[00:21:00.690] Browser LOG     [Activity Tracker] User active for 20 seconds
[00:21:01.694] Browser LOG     [Activity Tracker] User active for 21 seconds
[00:21:02.685] Browser LOG     [Activity Tracker] User active for 22 seconds
[00:21:03.702] Browser LOG     [Activity Tracker] User active for 23 seconds
[00:21:04.695] Browser LOG     [Activity Tracker] User active for 24 seconds
[00:21:05.695] Browser LOG     [Activity Tracker] User active for 25 seconds
[00:21:06.688] Browser LOG     [Activity Tracker] User active for 26 seconds
[00:21:07.682] Browser LOG     [Activity Tracker] User active for 27 seconds
[00:21:08.687] Browser LOG     [Activity Tracker] User active for 28 seconds
[00:21:09.692] Browser LOG     [Activity Tracker] User active for 29 seconds
[00:21:10.690] Browser LOG     [Activity Tracker] User active for 30 seconds
[00:27:45.849] Browser LOG     [Activity Tracker] User active for 0 seconds
[00:27:46.858] Browser LOG     [Activity Tracker] User active for 1 seconds
[00:27:47.861] Browser LOG     [Activity Tracker] User active for 2 seconds
[00:27:48.860] Browser LOG     [Activity Tracker] User active for 3 seconds
[00:27:49.865] Browser LOG     [Activity Tracker] User active for 4 seconds
[00:27:50.870] Browser LOG     [Activity Tracker] User active for 5 seconds
[00:27:51.859] Browser LOG     [Activity Tracker] User active for 6 seconds
[00:27:52.862] Browser LOG     [Activity Tracker] User active for 7 seconds
[00:27:53.866] Browser LOG     [Activity Tracker] User active for 8 seconds
[00:27:54.870] Browser LOG     [Activity Tracker] User active for 9 seconds
[00:27:55.867] Browser LOG     [Activity Tracker] User active for 10 seconds
[00:27:56.870] Browser LOG     [Activity Tracker] User active for 11 seconds
[00:27:57.866] Browser LOG     [Activity Tracker] User active for 12 seconds
[00:27:58.867] Browser LOG     [Activity Tracker] User active for 13 seconds
[00:27:59.863] Browser LOG     [Activity Tracker] User active for 14 seconds
[00:28:00.867] Browser LOG     [Activity Tracker] User active for 15 seconds
[00:28:01.870] Browser LOG     [Activity Tracker] User active for 16 seconds
[00:28:02.868] Browser LOG     [Activity Tracker] User active for 17 seconds
[00:28:03.865] Browser LOG     [Activity Tracker] User active for 18 seconds
[00:28:04.865] Browser LOG     [Activity Tracker] User active for 19 seconds
[00:28:05.862] Browser LOG     [Activity Tracker] User active for 20 seconds
[00:28:06.867] Browser LOG     [Activity Tracker] User active for 21 seconds
[00:28:07.868] Browser LOG     [Activity Tracker] User active for 22 seconds
[00:28:08.865] Browser LOG     [Activity Tracker] User active for 23 seconds
[00:28:09.867] Browser LOG     [Activity Tracker] User active for 24 seconds
[00:28:10.865] Browser LOG     [Activity Tracker] User active for 25 seconds
[00:28:11.863] Browser LOG     [Activity Tracker] User active for 26 seconds
[00:28:12.865] Browser LOG     [Activity Tracker] User active for 27 seconds
[00:28:13.870] Browser LOG     [Activity Tracker] User active for 28 seconds
[00:28:14.871] Browser LOG     [Activity Tracker] User active for 29 seconds
[00:28:15.871] Browser LOG     [Activity Tracker] User active for 30 seconds
[00:28:16.871] Browser LOG     [Activity Tracker] User active for 31 seconds
