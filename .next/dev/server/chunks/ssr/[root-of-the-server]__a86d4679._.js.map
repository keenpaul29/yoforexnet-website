{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/lib/api-config.ts"],"sourcesContent":["/**\n * Centralized API Configuration\n * \n * This module provides runtime URL resolution for API calls across the application.\n * It eliminates hardcoded localhost URLs and uses environment variables for flexibility.\n * \n * Architecture:\n * - Development: Next.js (3000) + Express (3001)\n * - Production VPS: NGINX proxy (80/443) → Next.js (3000) + Express (3001)\n * - Production Replit: Single Next.js server (5000) with API routes\n */\n\n/**\n * Environment variable validation\n * Ensures required configuration is present at runtime\n * \n * PRODUCTION SAFETY: Throws errors for missing critical variables\n * DEVELOPMENT: Allows fallbacks with warnings\n */\nfunction validateEnv() {\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  if (typeof window === 'undefined') {\n    // Server-side: require EXPRESS_URL in production\n    if (!process.env.EXPRESS_URL) {\n      if (isProduction) {\n        throw new Error(\n          '🚨 CRITICAL: EXPRESS_URL environment variable is required in production.\\n' +\n          'Please set it in your .env.production file.\\n' +\n          'Example: EXPRESS_URL=http://127.0.0.1:3001\\n' +\n          'For VPS deployment, see: VPS_DEPLOYMENT_GUIDE.md'\n        );\n      } else {\n        console.warn(\n          '⚠️  EXPRESS_URL not set, using development fallback: http://127.0.0.1:3001'\n        );\n      }\n    }\n  }\n\n  // NEXT_PUBLIC_SITE_URL is required in production for SEO, OG tags, canonical URLs\n  if (!process.env.NEXT_PUBLIC_SITE_URL) {\n    if (isProduction) {\n      throw new Error(\n        '🚨 CRITICAL: NEXT_PUBLIC_SITE_URL environment variable is required in production.\\n' +\n        'Please set it in your .env.production file.\\n' +\n        'Example: NEXT_PUBLIC_SITE_URL=https://yourdomain.com\\n' +\n        'This is used for SEO metadata, Open Graph tags, and canonical URLs.'\n      );\n    } else {\n      console.warn(\n        '⚠️  NEXT_PUBLIC_SITE_URL not set, using development fallback: http://localhost:3000'\n      );\n    }\n  }\n}\n\n// Run validation on module load\nvalidateEnv();\n\n/**\n * Get the API base URL for client-side requests\n * \n * @returns API base URL accessible from the browser\n * \n * Client-side behavior:\n * - Always returns empty string '' (uses relative URLs)\n * - Next.js rewrites handle /api/* → Express server routing\n * - No need for absolute URLs on client-side\n * \n * Server-side behavior:\n * - Returns internal API URL (e.g., http://127.0.0.1:3001)\n * - Used for server-to-server communication\n * \n * Usage in client components:\n * ```typescript\n * const apiUrl = getApiBaseUrl();\n * fetch(`${apiUrl}/api/stats`);  // Becomes: fetch('/api/stats')\n * ```\n */\nexport function getApiBaseUrl(): string {\n  // Client-side: use relative URLs (NGINX/Next.js rewrites handle routing)\n  if (typeof window !== 'undefined') {\n    return '';\n  }\n\n  // Server-side: Use getInternalApiUrl which has production safety checks\n  return getInternalApiUrl();\n}\n\n/**\n * Get the internal API URL for server-side requests\n * \n * @returns Internal API URL for server-to-server communication\n * \n * Usage in server components:\n * ```typescript\n * const apiUrl = getInternalApiUrl();\n * const response = await fetch(`${apiUrl}/api/stats`);\n * ```\n */\nexport function getInternalApiUrl(): string {\n  // Server-side only\n  if (typeof window !== 'undefined') {\n    throw new Error('getInternalApiUrl() can only be called server-side');\n  }\n\n  const isProduction = process.env.NODE_ENV === 'production';\n  const url = process.env.EXPRESS_URL;\n  \n  if (!url) {\n    if (isProduction) {\n      throw new Error(\n        'EXPRESS_URL must be set in production. ' +\n        'This is a critical configuration error that will prevent server-side API calls from working.'\n      );\n    }\n    // Development fallback only\n    const fallback = 'http://127.0.0.1:3001';\n    console.log(`[API Config] Using development fallback: ${fallback}`);\n    return fallback;\n  }\n  \n  console.log(`[API Config] Internal API URL: ${url}`);\n  return url;\n}\n\n/**\n * Get the public site URL\n * \n * @returns Public-facing site URL (for SEO, OG tags, etc.)\n * \n * Usage:\n * ```typescript\n * const siteUrl = getSiteUrl();\n * const canonical = `${siteUrl}/thread/${slug}`;\n * ```\n */\nexport function getSiteUrl(): string {\n  const isProduction = process.env.NODE_ENV === 'production';\n  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || process.env.VERCEL_URL;\n  \n  if (!siteUrl) {\n    if (isProduction) {\n      throw new Error(\n        'NEXT_PUBLIC_SITE_URL must be set in production. ' +\n        'This is required for SEO, canonical URLs, and Open Graph tags.'\n      );\n    }\n    // Development fallback\n    return 'http://localhost:3000';\n  }\n  \n  return siteUrl;\n}\n\n/**\n * Build a full API URL with path\n * \n * @param path - API endpoint path (e.g., '/api/stats')\n * @returns Full API URL\n * \n * Usage:\n * ```typescript\n * const url = buildApiUrl('/api/stats');\n * const response = await fetch(url);\n * ```\n */\nexport function buildApiUrl(path: string): string {\n  const base = getApiBaseUrl();\n  const cleanPath = path.startsWith('/') ? path : `/${path}`;\n  return base ? `${base}${cleanPath}` : cleanPath;\n}\n\n/**\n * Configuration object for easy access\n */\nexport const apiConfig = {\n  /**\n   * API base URL (client or server appropriate)\n   */\n  baseUrl: getApiBaseUrl(),\n\n  /**\n   * Public site URL\n   */\n  siteUrl: getSiteUrl(),\n\n  /**\n   * Whether we're in production mode\n   */\n  isProduction: process.env.NODE_ENV === 'production',\n\n  /**\n   * Whether we're in development mode\n   */\n  isDevelopment: process.env.NODE_ENV === 'development',\n\n  /**\n   * Express API URL (server-side only)\n   */\n  get expressUrl(): string {\n    if (typeof window !== 'undefined') {\n      throw new Error('expressUrl is only available server-side');\n    }\n    return getInternalApiUrl();\n  },\n} as const;\n\n/**\n * Type-safe environment variable access\n * \n * Note: NEXT_PUBLIC_EXPRESS_URL is not included as client-side code\n * uses relative URLs (/api/*) which are handled by Next.js rewrites.\n */\nexport const env = {\n  // Server-side only\n  EXPRESS_URL: process.env.EXPRESS_URL,\n  DATABASE_URL: process.env.DATABASE_URL,\n  SESSION_SECRET: process.env.SESSION_SECRET,\n\n  // Public (client-accessible)\n  NEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL,\n\n  // Node environment\n  NODE_ENV: process.env.NODE_ENV,\n} as const;\n\n// Export helper for debugging\nexport function debugConfig() {\n  if (typeof window === 'undefined') {\n    console.log('🔧 API Configuration (Server-side):');\n    console.log('  - Express URL:', env.EXPRESS_URL || 'NOT SET (using fallback)');\n    console.log('  - Site URL:', getSiteUrl());\n    console.log('  - API Base:', getApiBaseUrl());\n  } else {\n    console.log('🔧 API Configuration (Client-side):');\n    console.log('  - Site URL:', env.NEXT_PUBLIC_SITE_URL || 'NOT SET');\n    console.log('  - API Base:', getApiBaseUrl());\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;CAUC,GAED;;;;;;CAMC;;;;;;;;;;;;;;;;AACD,SAAS;IACP,MAAM,eAAe,oDAAyB;IAE9C,wCAAmC;QACjC,iDAAiD;QACjD;;IAcF;IAEA,kFAAkF;IAClF;;AAcF;AAEA,gCAAgC;AAChC;AAsBO,SAAS;IACd,yEAAyE;IACzE;;IAIA,wEAAwE;IACxE,OAAO;AACT;AAaO,SAAS;IACd,mBAAmB;IACnB;;IAIA,MAAM,eAAe,oDAAyB;IAC9C,MAAM;IAEN;;IAaA,QAAQ,GAAG,CAAC,CAAC,+BAA+B,EAAE,KAAK;IACnD,OAAO;AACT;AAaO,SAAS;IACd,MAAM,eAAe,oDAAyB;IAC9C,MAAM,UAAU,6DAAoC,QAAQ,GAAG,CAAC,UAAU;IAE1E;;IAWA,OAAO;AACT;AAcO,SAAS,YAAY,IAAY;IACtC,MAAM,OAAO;IACb,MAAM,YAAY,KAAK,UAAU,CAAC,OAAO,OAAO,CAAC,CAAC,EAAE,MAAM;IAC1D,OAAO,OAAO,GAAG,OAAO,WAAW,GAAG;AACxC;AAKO,MAAM,YAAY;IACvB;;GAEC,GACD,SAAS;IAET;;GAEC,GACD,SAAS;IAET;;GAEC,GACD,cAAc,oDAAyB;IAEvC;;GAEC,GACD,eAAe,oDAAyB;IAExC;;GAEC,GACD,IAAI,cAAqB;QACvB;;QAGA,OAAO;IACT;AACF;AAQO,MAAM,MAAM;IACjB,mBAAmB;IACnB,WAAW;IACX,cAAc,QAAQ,GAAG,CAAC,YAAY;IACtC,gBAAgB,QAAQ,GAAG,CAAC,cAAc;IAE1C,6BAA6B;IAC7B,oBAAoB;IAEpB,mBAAmB;IACnB,QAAQ;AACV;AAGO,SAAS;IACd,wCAAmC;QACjC,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,oBAAoB,IAAI,WAAW,IAAI;QACnD,QAAQ,GAAG,CAAC,iBAAiB;QAC7B,QAAQ,GAAG,CAAC,iBAAiB;IAC/B;;AAKF","debugId":null}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/shared/schema.ts"],"sourcesContent":["import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, index, jsonb, json, check, uniqueIndex, numeric, serial, date, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - REQUIRED for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => ({\n    expireIdx: index(\"IDX_session_expire\").on(table.expire),\n  }),\n);\n\n// User storage table - Merged Replit Auth + YoForex fields\nexport const users = pgTable(\"users\", {\n  // Core identity field (NEVER change this type - breaking change)\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  \n  // Legacy fields (kept for backward compatibility, will be deprecated)\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\"), // Now optional - Replit Auth handles authentication\n  \n  // Replit Auth fields (added for OIDC integration)\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  location: varchar(\"location\", { length: 100 }),\n  \n  // YoForex-specific fields (preserved from original)\n  totalCoins: integer(\"total_coins\").notNull().default(0),\n  weeklyEarned: integer(\"weekly_earned\").notNull().default(0),\n  rank: integer(\"rank\"),\n  youtubeUrl: text(\"youtube_url\"),\n  instagramHandle: text(\"instagram_handle\"),\n  telegramHandle: text(\"telegram_handle\"),\n  myfxbookLink: text(\"myfxbook_link\"),\n  investorId: text(\"investor_id\"),\n  investorPassword: text(\"investor_password\"),\n  isVerifiedTrader: boolean(\"is_verified_trader\").notNull().default(false),\n  emailNotifications: boolean(\"email_notifications\").notNull().default(true),\n  hasYoutubeReward: boolean(\"has_youtube_reward\").notNull().default(false),\n  hasMyfxbookReward: boolean(\"has_myfxbook_reward\").notNull().default(false),\n  hasInvestorReward: boolean(\"has_investor_reward\").notNull().default(false),\n  \n  // Badges & Achievements\n  badges: text(\"badges\").array().default(sql`'{}'::text[]`),\n  \n  // Onboarding System\n  onboardingCompleted: boolean(\"onboarding_completed\").default(false),\n  onboardingDismissed: boolean(\"onboarding_dismissed\").default(false),\n  onboardingProgress: json(\"onboarding_progress\").default({\n    profilePicture: false,  // 10 coins - Upload profile picture\n    firstReply: false,       // 5 coins - Post first reply\n    twoReviews: false,       // 6 coins - Submit 2 reviews\n    firstThread: false,      // 10 coins - Create first thread\n    firstPublish: false,     // 30 coins - Publish EA/content\n    fiftyFollowers: false,   // 200 coins - Get 50 followers\n  }),\n  \n  // Ranking system\n  reputationScore: integer(\"reputation_score\").notNull().default(0),\n  lastReputationUpdate: timestamp(\"last_reputation_update\"),\n  \n  // Daily Earning system\n  lastJournalPost: date(\"last_journal_post\"),\n  \n  // User level system\n  level: integer(\"level\").default(0).notNull(),\n  \n  // Admin Management fields\n  role: varchar(\"role\", { length: 20 }).notNull().default(\"member\"), // member, moderator, admin\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"), // active, suspended, banned\n  suspendedUntil: timestamp(\"suspended_until\"), // When suspension ends\n  bannedAt: timestamp(\"banned_at\"), // When user was banned\n  bannedBy: varchar(\"banned_by\"), // Admin ID who banned the user\n  lastActive: timestamp(\"last_active\").defaultNow(), // Last activity timestamp for online tracking\n  \n  // Timestamps\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  usernameIdx: index(\"idx_users_username\").on(table.username),\n  emailIdx: index(\"idx_users_email\").on(table.email),\n  reputationIdx: index(\"idx_users_reputation\").on(table.reputationScore),\n  levelIdx: index(\"idx_users_level\").on(table.level),\n  coinsIdx: index(\"idx_users_coins\").on(table.totalCoins),\n  roleIdx: index(\"idx_users_role\").on(table.role), // Index for admin filters\n  statusIdx: index(\"idx_users_status\").on(table.status), // Index for admin filters\n  lastActiveIdx: index(\"idx_users_last_active\").on(table.lastActive), // Index for online users query\n  coinsCheck: check(\"chk_user_coins_nonnegative\", sql`${table.totalCoins} >= 0`),\n}));\n\nexport const userActivity = pgTable(\"user_activity\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  date: date(\"date\").notNull(),\n  activeMinutes: integer(\"active_minutes\").notNull().default(0),\n  coinsEarned: integer(\"coins_earned\").notNull().default(0),\n  lastActivityAt: timestamp(\"last_activity_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  userDateIdx: uniqueIndex(\"idx_user_activity_user_date\").on(table.userId, table.date),\n}));\n\nexport const coinTransactions = pgTable(\"coin_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull().$type<\"earn\" | \"spend\" | \"recharge\">(),\n  amount: integer(\"amount\").notNull(),\n  description: text(\"description\").notNull(),\n  status: text(\"status\").notNull().$type<\"completed\" | \"pending\" | \"failed\">().default(\"completed\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_coin_transactions_user_id\").on(table.userId),\n}));\n\nexport const rechargeOrders = pgTable(\"recharge_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  coinAmount: integer(\"coin_amount\").notNull(),\n  priceUsd: integer(\"price_usd\").notNull(),\n  paymentMethod: text(\"payment_method\").notNull().$type<\"stripe\" | \"crypto\">(),\n  paymentId: text(\"payment_id\"),\n  status: text(\"status\").notNull().$type<\"pending\" | \"completed\" | \"failed\">().default(\"pending\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n}, (table) => ({\n  userIdIdx: index(\"idx_recharge_orders_user_id\").on(table.userId),\n}));\n\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  plan: text(\"plan\").notNull().$type<\"monthly\" | \"quarterly\" | \"yearly\">(),\n  priceUsd: integer(\"price_usd\").notNull(),\n  paymentMethod: text(\"payment_method\").notNull().$type<\"stripe\" | \"paypal\" | \"crypto\" | \"other\">(),\n  paymentId: text(\"payment_id\"),\n  status: text(\"status\").notNull().$type<\"active\" | \"cancelled\" | \"expired\" | \"paused\">(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  autoRenew: boolean(\"auto_renew\").notNull().default(true),\n  cancelledAt: timestamp(\"cancelled_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_subscriptions_user_id\").on(table.userId),\n  statusIdx: index(\"idx_subscriptions_status\").on(table.status),\n  statusEndDateIdx: index(\"idx_subscriptions_status_end_date\").on(table.status, table.endDate),\n}));\n\nexport const withdrawalRequests = pgTable(\"withdrawal_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  amount: integer(\"amount\").notNull(),\n  \n  // Withdrawal Method Flexibility - method field with default 'crypto' for backward compatibility\n  method: text(\"method\").$type<\"crypto\" | \"paypal\" | \"bank\" | \"other\">().default(\"crypto\"),\n  paymentReference: text(\"payment_reference\"), // For fiat payment confirmations\n  \n  // Crypto fields - now NULLABLE for backward compatibility with fiat withdrawals\n  cryptoType: text(\"crypto_type\").$type<\"BTC\" | \"ETH\">(),\n  walletAddress: text(\"wallet_address\").notNull(),\n  exchangeRate: numeric(\"exchange_rate\", { precision: 20, scale: 8 }),\n  cryptoAmount: numeric(\"crypto_amount\", { precision: 20, scale: 8 }),\n  \n  // Extended status enum to include 'approved' and 'rejected'\n  status: text(\"status\").notNull().$type<\"pending\" | \"approved\" | \"rejected\" | \"processing\" | \"completed\" | \"failed\" | \"cancelled\">().default(\"pending\"),\n  \n  processingFee: integer(\"processing_fee\").notNull(),\n  transactionHash: text(\"transaction_hash\"),\n  adminNotes: text(\"admin_notes\"),\n  \n  // Admin Workflow Tracking Fields (all nullable for backward compatibility)\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectedBy: varchar(\"rejected_by\").references(() => users.id),\n  rejectedAt: timestamp(\"rejected_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  completedBy: varchar(\"completed_by\").references(() => users.id),\n  \n  // Revenue Tracking Field (for finance reporting)\n  amountUsd: numeric(\"amount_usd\", { precision: 10, scale: 2 }),\n  \n  requestedAt: timestamp(\"requested_at\").notNull().defaultNow(),\n  processedAt: timestamp(\"processed_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_withdrawal_requests_user_id\").on(table.userId),\n  statusIdx: index(\"idx_withdrawal_requests_status\").on(table.status),\n  methodIdx: index(\"idx_withdrawal_requests_method\").on(table.method),\n  approvedByIdx: index(\"idx_withdrawal_requests_approved_by\").on(table.approvedBy),\n  statusMethodIdx: index(\"idx_withdrawal_requests_status_method\").on(table.status, table.method),\n  amountCheck: check(\"chk_withdrawal_amount_min\", sql`${table.amount} >= 1000`),\n}));\n\nexport const feedback = pgTable(\"feedback\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: text(\"type\").notNull().$type<\"bug\" | \"feature\" | \"improvement\" | \"other\">(),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  email: text(\"email\"),\n  status: text(\"status\").notNull().$type<\"new\" | \"in_progress\" | \"resolved\" | \"closed\">().default(\"new\"),\n  priority: text(\"priority\").$type<\"low\" | \"medium\" | \"high\" | \"urgent\">().default(\"medium\"),\n  adminNotes: text(\"admin_notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_feedback_user_id\").on(table.userId),\n  statusIdx: index(\"idx_feedback_status\").on(table.status),\n  typeIdx: index(\"idx_feedback_type\").on(table.type),\n}));\n\nexport const content = pgTable(\"content\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull().$type<\"ea\" | \"indicator\" | \"article\" | \"source_code\">(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  priceCoins: integer(\"price_coins\").notNull().default(0),\n  isFree: boolean(\"is_free\").notNull().default(true),\n  category: text(\"category\").notNull(),\n  \n  // Publishing flow fields\n  platform: text(\"platform\").$type<\"MT4\" | \"MT5\" | \"Both\">(),\n  version: text(\"version\"),\n  tags: text(\"tags\").array(),\n  files: jsonb(\"files\").$type<Array<{name: string; size: number; url: string; checksum: string}>>(),\n  images: jsonb(\"images\").$type<Array<{url: string; isCover: boolean; order: number}>>(),\n  \n  // Optional fields\n  brokerCompat: text(\"broker_compat\").array(),\n  minDeposit: integer(\"min_deposit\"),\n  hedging: boolean(\"hedging\"),\n  changelog: text(\"changelog\"),\n  license: text(\"license\"),\n  \n  // Evidence fields (for Performance Reports)\n  equityCurveImage: text(\"equity_curve_image\"),\n  profitFactor: integer(\"profit_factor\"),\n  drawdownPercent: integer(\"drawdown_percent\"),\n  winPercent: integer(\"win_percent\"),\n  broker: text(\"broker\"),\n  monthsTested: integer(\"months_tested\"),\n  \n  // Legacy fields\n  fileUrl: text(\"file_url\"),\n  imageUrl: text(\"image_url\"),\n  imageUrls: text(\"image_urls\").array(),\n  postLogoUrl: text(\"post_logo_url\"),\n  views: integer(\"views\").notNull().default(0),\n  downloads: integer(\"downloads\").notNull().default(0),\n  likes: integer(\"likes\").notNull().default(0),\n  isFeatured: boolean(\"is_featured\").notNull().default(false),\n  averageRating: integer(\"average_rating\"),\n  reviewCount: integer(\"review_count\").notNull().default(0),\n  status: text(\"status\").notNull().$type<\"pending\" | \"approved\" | \"rejected\">().default(\"pending\"),\n  slug: text(\"slug\").notNull().unique(),\n  focusKeyword: text(\"focus_keyword\"),\n  autoMetaDescription: text(\"auto_meta_description\"),\n  autoImageAltTexts: text(\"auto_image_alt_texts\").array(),\n  metaTitle: text(\"meta_title\"),\n  metaKeywords: text(\"meta_keywords\"),\n  \n  // Ranking system\n  salesScore: integer(\"sales_score\").notNull().default(0),\n  lastSalesUpdate: timestamp(\"last_sales_update\"),\n  \n  // Marketplace moderation fields\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectedBy: varchar(\"rejected_by\").references(() => users.id),\n  rejectedAt: timestamp(\"rejected_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  featured: boolean(\"featured\").notNull().default(false),\n  featuredUntil: timestamp(\"featured_until\"),\n  deletedAt: timestamp(\"deleted_at\"),\n  \n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  authorIdIdx: index(\"idx_content_author_id\").on(table.authorId),\n  statusIdx: index(\"idx_content_status\").on(table.status),\n  categoryIdx: index(\"idx_content_category\").on(table.category),\n  slugIdx: index(\"idx_content_slug\").on(table.slug),\n  salesScoreIdx: index(\"idx_content_sales_score\").on(table.salesScore),\n  featuredIdx: index(\"idx_content_featured\").on(table.featured),\n  deletedAtIdx: index(\"idx_content_deleted_at\").on(table.deletedAt),\n}));\n\nexport const contentPurchases = pgTable(\"content_purchases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contentId: varchar(\"content_id\").notNull().references(() => content.id),\n  buyerId: varchar(\"buyer_id\").notNull().references(() => users.id),\n  sellerId: varchar(\"seller_id\").notNull().references(() => users.id),\n  priceCoins: integer(\"price_coins\").notNull(),\n  transactionId: varchar(\"transaction_id\").notNull().references(() => coinTransactions.id),\n  purchasedAt: timestamp(\"purchased_at\").notNull().defaultNow(),\n}, (table) => ({\n  buyerIdIdx: index(\"idx_content_purchases_user_id\").on(table.buyerId),\n  contentIdIdx: index(\"idx_content_purchases_content_id\").on(table.contentId),\n}));\n\nexport const contentReviews = pgTable(\"content_reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contentId: varchar(\"content_id\").notNull().references(() => content.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  rating: integer(\"rating\").notNull(),\n  review: text(\"review\").notNull(),\n  status: text(\"status\").notNull().$type<\"pending\" | \"approved\" | \"rejected\">().default(\"pending\"),\n  rewardGiven: boolean(\"reward_given\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  uniqueContentUserReview: uniqueIndex(\"idx_content_reviews_unique_content_user\").on(table.contentId, table.userId),\n}));\n\nexport const contentLikes = pgTable(\"content_likes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contentId: varchar(\"content_id\").notNull().references(() => content.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_content_likes_user_id\").on(table.userId),\n  uniqueContentUserLike: uniqueIndex(\"idx_content_likes_unique_content_user\").on(table.contentId, table.userId),\n}));\n\nexport const contentReplies = pgTable(\"content_replies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contentId: varchar(\"content_id\").notNull().references(() => content.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  parentId: varchar(\"parent_id\").references((): any => contentReplies.id),\n  body: text(\"body\").notNull(),\n  rating: integer(\"rating\"),\n  imageUrls: text(\"image_urls\").array(),\n  helpful: integer(\"helpful\").notNull().default(0),\n  isVerified: boolean(\"is_verified\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const brokers = pgTable(\"brokers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  websiteUrl: text(\"website_url\"),\n  logoUrl: text(\"logo_url\"),\n  yearFounded: integer(\"year_founded\"),\n  regulation: text(\"regulation\"),\n  regulationSummary: text(\"regulation_summary\"),\n  platform: text(\"platform\"),\n  spreadType: text(\"spread_type\"),\n  minSpread: numeric(\"min_spread\", { precision: 10, scale: 2 }),\n  overallRating: integer(\"overall_rating\").default(0),\n  reviewCount: integer(\"review_count\").notNull().default(0),\n  scamReportCount: integer(\"scam_report_count\").notNull().default(0),\n  isVerified: boolean(\"is_verified\").notNull().default(false),\n  status: text(\"status\").notNull().$type<\"pending\" | \"approved\" | \"rejected\">().default(\"pending\"),\n  \n  // Admin Moderation Fields\n  verifiedBy: varchar(\"verified_by\").references(() => users.id),\n  verifiedAt: timestamp(\"verified_at\"),\n  rejectedBy: varchar(\"rejected_by\").references(() => users.id),\n  rejectedAt: timestamp(\"rejected_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  scamWarning: boolean(\"scam_warning\").notNull().default(false),\n  scamWarningReason: text(\"scam_warning_reason\"),\n  deletedAt: timestamp(\"deleted_at\"),\n  \n  // Missing Trading Info (from specification)\n  country: text(\"country\"),\n  minDeposit: text(\"min_deposit\"),\n  leverage: text(\"leverage\"),\n  \n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  slugIdx: index(\"idx_brokers_slug\").on(table.slug),\n  statusIdx: index(\"idx_brokers_status\").on(table.status),\n  regulationIdx: index(\"idx_brokers_regulation\").on(table.regulation),\n  platformIdx: index(\"idx_brokers_platform\").on(table.platform),\n  verifiedIdx: index(\"idx_brokers_verified\").on(table.isVerified),\n  scamWarningIdx: index(\"idx_brokers_scam_warning\").on(table.scamWarning),\n  deletedAtIdx: index(\"idx_brokers_deleted_at\").on(table.deletedAt),\n  countryIdx: index(\"idx_brokers_country\").on(table.country),\n}));\n\nexport const brokerReviews = pgTable(\"broker_reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  brokerId: varchar(\"broker_id\").notNull().references(() => brokers.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  rating: integer(\"rating\").notNull(),\n  reviewTitle: text(\"review_title\").notNull(),\n  reviewBody: text(\"review_body\").notNull(),\n  isScamReport: boolean(\"is_scam_report\").notNull().default(false),\n  status: text(\"status\").notNull().$type<\"pending\" | \"approved\" | \"rejected\">().default(\"pending\"),\n  \n  // Admin Moderation Fields\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectedBy: varchar(\"rejected_by\").references(() => users.id),\n  rejectedAt: timestamp(\"rejected_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  \n  // Scam Report Severity (only for isScamReport=true)\n  scamSeverity: text(\"scam_severity\").$type<\"low\" | \"medium\" | \"high\" | \"critical\">(),\n  \n  datePosted: timestamp(\"date_posted\").notNull().defaultNow(),\n}, (table) => ({\n  brokerIdIdx: index(\"idx_broker_reviews_broker_id\").on(table.brokerId),\n  uniqueBrokerUserReview: uniqueIndex(\"idx_broker_reviews_unique_broker_user\").on(table.brokerId, table.userId),\n  severityIdx: index(\"idx_broker_reviews_severity\").on(table.scamSeverity),\n}));\n\nexport const userFollows = pgTable(\"user_follows\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  followerId: varchar(\"follower_id\").notNull().references(() => users.id),\n  followingId: varchar(\"following_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  followerIdIdx: index(\"idx_user_follows_follower_id\").on(table.followerId),\n  uniqueFollowerFollowing: uniqueIndex(\"idx_user_follows_unique_follower_following\").on(table.followerId, table.followingId),\n}));\n\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  participant1Id: varchar(\"participant1_id\").notNull().references(() => users.id),\n  participant2Id: varchar(\"participant2_id\").notNull().references(() => users.id),\n  lastMessageAt: timestamp(\"last_message_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").notNull().references(() => conversations.id),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id),\n  recipientId: varchar(\"recipient_id\").notNull().references(() => users.id),\n  body: text(\"body\").notNull(),\n  isRead: boolean(\"is_read\").notNull().default(false),\n  deliveredAt: timestamp(\"delivered_at\"),\n  readAt: timestamp(\"read_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  conversationIdIdx: index(\"idx_messages_conversation_id\").on(table.conversationId),\n  senderIdIdx: index(\"idx_messages_sender_id\").on(table.senderId),\n  recipientIdIdx: index(\"idx_messages_recipient_id\").on(table.recipientId),\n  createdAtIdx: index(\"idx_messages_created_at\").on(table.createdAt),\n  isReadIdx: index(\"idx_messages_is_read\").on(table.isRead),\n}));\n\n// Message Reactions\nexport const messageReactions = pgTable(\"message_reactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  messageId: varchar(\"message_id\").notNull().references(() => messages.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  emoji: varchar(\"emoji\", { length: 10 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  messageUserIdx: index(\"message_reactions_msg_user_idx\").on(table.messageId, table.userId),\n}));\n\n// Notifications system\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull().$type<\"reply\" | \"like\" | \"follow\" | \"purchase\" | \"badge\" | \"system\">(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  actionUrl: text(\"action_url\"),\n  isRead: boolean(\"is_read\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_notifications_user_id\").on(table.userId),\n  isReadIdx: index(\"idx_notifications_is_read\").on(table.isRead),\n  createdAtIdx: index(\"idx_notifications_created_at\").on(table.createdAt),\n}));\n\n// Forum Threads (separate from marketplace content)\nexport const forumThreads = pgTable(\"forum_threads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  categorySlug: text(\"category_slug\").notNull(),\n  subcategorySlug: text(\"subcategory_slug\"), // Sub-category if applicable\n  title: text(\"title\").notNull(),\n  body: text(\"body\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  focusKeyword: text(\"focus_keyword\"),\n  metaDescription: text(\"meta_description\"),\n  metaTitle: text(\"meta_title\"),\n  metaKeywords: text(\"meta_keywords\"),\n  \n  // Enhanced SEO & Thread Type\n  threadType: text(\"thread_type\").notNull().$type<\"question\" | \"discussion\" | \"review\" | \"journal\" | \"guide\" | \"program_sharing\">().default(\"discussion\"),\n  seoExcerpt: text(\"seo_excerpt\"), // 120-160 chars, optional\n  primaryKeyword: text(\"primary_keyword\"), // 1-6 words, optional\n  language: text(\"language\").notNull().default(\"en\"),\n  \n  // Trading Metadata (stored as arrays for multi-select)\n  instruments: text(\"instruments\").array().default(sql`'{}'::text[]`), // XAUUSD, EURUSD, etc.\n  timeframes: text(\"timeframes\").array().default(sql`'{}'::text[]`), // M1, M5, H1, etc.\n  strategies: text(\"strategies\").array().default(sql`'{}'::text[]`), // scalping, swing, etc.\n  platform: text(\"platform\"), // MT4, MT5, cTrader, TradingView, Other\n  broker: text(\"broker\"), // Free text broker name\n  riskNote: text(\"risk_note\"), // Optional risk management note\n  hashtags: text(\"hashtags\").array().default(sql`'{}'::text[]`), // Social hashtags\n  \n  // Review-specific fields (only for threadType=review)\n  reviewTarget: text(\"review_target\"), // EA/Indicator/Broker name\n  reviewVersion: text(\"review_version\"),\n  reviewRating: integer(\"review_rating\"), // 1-5 stars\n  reviewPros: text(\"review_pros\").array(),\n  reviewCons: text(\"review_cons\").array(),\n  \n  // Question-specific fields (only for threadType=question)\n  questionSummary: text(\"question_summary\"), // \"What do you want solved?\"\n  acceptedAnswerId: varchar(\"accepted_answer_id\"), // Reference to accepted reply\n  \n  // Attachments\n  attachmentUrls: text(\"attachment_urls\").array().default(sql`'{}'::text[]`),\n  \n  // Status & Moderation\n  isPinned: boolean(\"is_pinned\").notNull().default(false),\n  isLocked: boolean(\"is_locked\").notNull().default(false),\n  isSolved: boolean(\"is_solved\").notNull().default(false),\n  views: integer(\"views\").notNull().default(0),\n  replyCount: integer(\"reply_count\").notNull().default(0),\n  likeCount: integer(\"like_count\").notNull().default(0),\n  bookmarkCount: integer(\"bookmark_count\").notNull().default(0),\n  shareCount: integer(\"share_count\").notNull().default(0),\n  lastActivityAt: timestamp(\"last_activity_at\").notNull().defaultNow(),\n  status: text(\"status\").notNull().$type<\"pending\" | \"approved\" | \"rejected\">().default(\"approved\"),\n  \n  // Ranking system\n  engagementScore: integer(\"engagement_score\").notNull().default(0),\n  lastScoreUpdate: timestamp(\"last_score_update\"),\n  helpfulVotes: integer(\"helpful_votes\").notNull().default(0),\n  \n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  categorySlugIdx: index(\"idx_forum_threads_category\").on(table.categorySlug),\n  subcategorySlugIdx: index(\"idx_forum_threads_subcategory\").on(table.subcategorySlug),\n  threadTypeIdx: index(\"idx_forum_threads_type\").on(table.threadType),\n  statusIdx: index(\"idx_forum_threads_status\").on(table.status),\n  isPinnedIdx: index(\"idx_forum_threads_pinned\").on(table.isPinned),\n  engagementScoreIdx: index(\"idx_forum_threads_engagement\").on(table.engagementScore),\n  lastActivityAtIdx: index(\"idx_forum_threads_last_activity\").on(table.lastActivityAt),\n  slugIdx: index(\"idx_forum_threads_slug\").on(table.slug),\n  helpfulVotesIdx: index(\"idx_forum_threads_helpful_votes\").on(table.helpfulVotes),\n}));\n\n// Forum Thread Replies (with SEO for each reply)\nexport const forumReplies = pgTable(\"forum_replies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  threadId: varchar(\"thread_id\").notNull().references(() => forumThreads.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  parentId: varchar(\"parent_id\").references((): any => forumReplies.id),\n  body: text(\"body\").notNull(),\n  slug: text(\"slug\").notNull().unique(), // SEO: Each reply gets unique slug for Google indexing\n  metaDescription: text(\"meta_description\"), // SEO: Auto-generated from body\n  imageUrls: text(\"image_urls\").array(),\n  helpful: integer(\"helpful\").notNull().default(0),\n  helpfulVotes: integer(\"helpful_votes\").notNull().default(0),\n  isAccepted: boolean(\"is_accepted\").notNull().default(false),\n  isVerified: boolean(\"is_verified\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n  \n  // Moderation fields\n  status: text(\"status\").notNull().$type<\"pending\" | \"approved\" | \"rejected\">().default(\"approved\"),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  rejectedBy: varchar(\"rejected_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectedAt: timestamp(\"rejected_at\"),\n}, (table) => ({\n  threadIdIdx: index(\"idx_forum_replies_thread_id\").on(table.threadId),\n  createdAtIdx: index(\"idx_forum_replies_created_at\").on(table.createdAt),\n  slugIdx: index(\"idx_forum_replies_slug\").on(table.slug),\n  helpfulVotesIdx: index(\"idx_forum_replies_helpful_votes\").on(table.helpfulVotes),\n  statusIdx: index(\"idx_forum_replies_status\").on(table.status),\n}));\n\n// Forum Categories with dynamic stats and hierarchical support\nexport const forumCategories = pgTable(\"forum_categories\", {\n  slug: text(\"slug\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(), // Icon name from lucide-react\n  color: text(\"color\").notNull().default(\"bg-primary\"),\n  parentSlug: text(\"parent_slug\"), // For subcategories: references parent category slug\n  threadCount: integer(\"thread_count\").notNull().default(0),\n  postCount: integer(\"post_count\").notNull().default(0),\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  parentSlugIdx: index(\"idx_forum_categories_parent_slug\").on(table.parentSlug),\n}));\n\n// User Badges & Trust Levels\nexport const userBadges = pgTable(\"user_badges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  badgeType: text(\"badge_type\").notNull().$type<\"verified_trader\" | \"top_contributor\" | \"ea_expert\" | \"helpful_member\" | \"early_adopter\">(),\n  awardedAt: timestamp(\"awarded_at\").notNull().defaultNow(),\n});\n\n// Activity Feed for real-time updates\nexport const activityFeed = pgTable(\"activity_feed\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  activityType: text(\"activity_type\").notNull().$type<\"thread_created\" | \"reply_posted\" | \"content_published\" | \"purchase_made\" | \"review_posted\" | \"badge_earned\">(),\n  entityType: text(\"entity_type\").notNull().$type<\"thread\" | \"reply\" | \"content\" | \"purchase\" | \"review\" | \"badge\">(),\n  entityId: varchar(\"entity_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_activity_feed_user_id\").on(table.userId),\n}));\n\n// Double-Entry Ledger Tables (Immutable Accounting System)\n\n// User Wallet - One row per user\nexport const userWallet = pgTable(\"user_wallet\", {\n  walletId: varchar(\"wallet_id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  balance: integer(\"balance\").notNull().default(0),\n  availableBalance: integer(\"available_balance\").notNull().default(0),\n  status: text(\"status\").notNull().default(\"active\"),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: uniqueIndex(\"idx_user_wallet_user_id\").on(table.userId),\n  statusIdx: index(\"idx_user_wallet_status\").on(table.status),\n}));\n\n// Coin Ledger Transactions - Header for grouped entries\nexport const coinLedgerTransactions = pgTable(\"coin_ledger_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(),\n  context: json(\"context\").$type<Record<string, any>>(),\n  externalRef: text(\"external_ref\"),\n  initiatorUserId: varchar(\"initiator_user_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  closedAt: timestamp(\"closed_at\"),\n  status: text(\"status\").notNull().default(\"pending\"),\n}, (table) => ({\n  typeIdx: index(\"idx_ledger_tx_type\").on(table.type),\n  statusIdx: index(\"idx_ledger_tx_status\").on(table.status),\n  initiatorIdx: index(\"idx_ledger_tx_initiator\").on(table.initiatorUserId),\n}));\n\n// Coin Journal Entries - Immutable debit/credit entries\nexport const coinJournalEntries = pgTable(\"coin_journal_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ledgerTransactionId: varchar(\"ledger_transaction_id\").notNull()\n    .references(() => coinLedgerTransactions.id),\n  walletId: varchar(\"wallet_id\").notNull().references(() => userWallet.walletId),\n  direction: text(\"direction\").notNull(),\n  amount: integer(\"amount\").notNull(),\n  balanceBefore: integer(\"balance_before\").notNull(),\n  balanceAfter: integer(\"balance_after\").notNull(),\n  memo: text(\"memo\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  ledgerTxIdx: index(\"idx_journal_ledger_tx\").on(table.ledgerTransactionId),\n  walletIdx: index(\"idx_journal_wallet\").on(table.walletId),\n  createdAtIdx: index(\"idx_journal_created_at\").on(table.createdAt),\n  amountCheck: check(\"chk_amount_positive\", sql`${table.amount} > 0`),\n}));\n\n// Ledger Reconciliation Runs - Audit trail\nexport const ledgerReconciliationRuns = pgTable(\"ledger_reconciliation_runs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  status: text(\"status\").notNull(),\n  driftCount: integer(\"drift_count\").notNull().default(0),\n  maxDelta: integer(\"max_delta\").notNull().default(0),\n  report: json(\"report\").$type<Record<string, any>>(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Dashboard Preferences - User customization\nexport const dashboardPreferences = pgTable(\"dashboard_preferences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id).unique(),\n  widgetOrder: text(\"widget_order\").array().notNull(),\n  enabledWidgets: text(\"enabled_widgets\").array().notNull(),\n  layoutType: text(\"layout_type\").notNull().$type<\"default\" | \"compact\" | \"comfortable\">().default(\"default\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_dashboard_preferences_user_id\").on(table.userId),\n}));\n\n// Daily Activity Tracking - To enforce daily limits\nexport const dailyActivityLimits = pgTable(\"daily_activity_limits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  activityDate: timestamp(\"activity_date\").notNull().defaultNow(),\n  repliesCount: integer(\"replies_count\").notNull().default(0),\n  reportsCount: integer(\"reports_count\").notNull().default(0),\n  backtestsCount: integer(\"backtests_count\").notNull().default(0),\n  lastCheckinAt: timestamp(\"last_checkin_at\"),\n  consecutiveDays: integer(\"consecutive_days\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userDateIdx: uniqueIndex(\"idx_daily_activity_user_date\").on(table.userId, table.activityDate),\n  userIdIdx: index(\"idx_daily_activity_user_id\").on(table.userId),\n}));\n\n// Referral System - Track referrals and commissions\nexport const referrals = pgTable(\"referrals\", {\n  id: serial(\"id\").primaryKey(),\n  referrerId: varchar(\"referrer_id\").notNull().references(() => users.id),\n  referredUserId: varchar(\"referred_user_id\").notNull().references(() => users.id),\n  referralCode: varchar(\"referral_code\", { length: 50 }).notNull().unique(),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"),\n  totalEarnings: integer(\"total_earnings\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  referrerIdx: index(\"idx_referrals_referrer_id\").on(table.referrerId),\n  referredIdx: uniqueIndex(\"idx_referrals_referred_user_id\").on(table.referredUserId),\n  referralCodeIdx: index(\"idx_referrals_code\").on(table.referralCode),\n}));\n\n// Goals table\nexport const goals = pgTable(\"goals\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  goalType: varchar(\"goal_type\", { length: 50 }).notNull(),\n  targetValue: integer(\"target_value\").notNull(),\n  currentValue: integer(\"current_value\").notNull().default(0),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_goals_user_id\").on(table.userId),\n}));\n\n// Achievements table\nexport const achievements = pgTable(\"achievements\", {\n  id: serial(\"id\").primaryKey(),\n  slug: varchar(\"slug\", { length: 100 }).notNull().unique(),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\").notNull(),\n  icon: varchar(\"icon\", { length: 50 }).notNull(),\n  requirement: integer(\"requirement\").notNull(),\n  category: varchar(\"category\", { length: 50 }).notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  slugIdx: index(\"idx_achievements_slug\").on(table.slug),\n}));\n\n// User Achievements table\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  achievementId: integer(\"achievement_id\").notNull().references(() => achievements.id),\n  progress: integer(\"progress\").notNull().default(0),\n  unlockedAt: timestamp(\"unlocked_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_user_achievements_user_id\").on(table.userId),\n  achievementIdIdx: index(\"idx_user_achievements_achievement_id\").on(table.achievementId),\n}));\n\n// Campaigns table\nexport const campaigns = pgTable(\"campaigns\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  type: varchar(\"type\", { length: 50 }).default(\"marketing\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"),\n  budget: integer(\"budget\"),\n  discountPercent: integer(\"discount_percent\"),\n  discountCode: varchar(\"discount_code\", { length: 50 }).unique(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  uses: integer(\"uses\").notNull().default(0),\n  revenue: integer(\"revenue\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_campaigns_user_id\").on(table.userId),\n  discountCodeIdx: index(\"idx_campaigns_discount_code\").on(table.discountCode),\n}));\n\n// Dashboard Settings table\nexport const dashboardSettings = pgTable(\"dashboard_settings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id).unique(),\n  layout: json(\"layout\"),\n  theme: varchar(\"theme\", { length: 20 }).default(\"light\"),\n  autoRefresh: boolean(\"auto_refresh\").default(true),\n  refreshInterval: integer(\"refresh_interval\").default(30),\n  favorites: json(\"favorites\"),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: uniqueIndex(\"idx_dashboard_settings_user_id\").on(table.userId),\n}));\n\n// Profiles table\nexport const profiles = pgTable(\"profiles\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id).unique(),\n  coverPhoto: text(\"cover_photo\"),\n  bio: text(\"bio\"),\n  tradingLevel: varchar(\"trading_level\", { length: 50 }),\n  tradingStyle: json(\"trading_style\"),\n  tradingPlatform: json(\"trading_platform\"),\n  tradingSince: date(\"trading_since\"),\n  specialties: json(\"specialties\"),\n  telegram: varchar(\"telegram\", { length: 100 }),\n  discord: varchar(\"discord\", { length: 100 }),\n  twitter: varchar(\"twitter\", { length: 100 }),\n  youtube: varchar(\"youtube\", { length: 200 }),\n  tradingview: varchar(\"tradingview\", { length: 200 }),\n  website: varchar(\"website\", { length: 200 }),\n  profileLayout: varchar(\"profile_layout\", { length: 20 }).default(\"professional\"),\n  customSlug: varchar(\"custom_slug\", { length: 100 }).unique(),\n  isPublic: boolean(\"is_public\").default(true),\n  isPremium: boolean(\"is_premium\").default(false),\n  brandColors: json(\"brand_colors\"),\n  showRevenue: boolean(\"show_revenue\").default(true),\n  showSales: boolean(\"show_sales\").default(true),\n  showFollowers: boolean(\"show_followers\").default(true),\n  showActivity: boolean(\"show_activity\").default(true),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: uniqueIndex(\"idx_profiles_user_id\").on(table.userId),\n  customSlugIdx: index(\"idx_profiles_custom_slug\").on(table.customSlug),\n}));\n\n// User Settings table\nexport const userSettings = pgTable(\"user_settings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id).unique(),\n  notificationPreferences: json(\"notification_preferences\"),\n  privacySettings: json(\"privacy_settings\"),\n  displaySettings: json(\"display_settings\"),\n  communicationSettings: json(\"communication_settings\"),\n  publishingDefaults: json(\"publishing_defaults\"),\n  advancedSettings: json(\"advanced_settings\"),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: uniqueIndex(\"idx_user_settings_user_id\").on(table.userId),\n}));\n\n// ============================================================================\n// ADMIN DASHBOARD TABLES (20 tables for ultimate admin experience)\n// ============================================================================\n\n// 1. Admin Actions - Log all admin operations\nexport const adminActions = pgTable(\"admin_actions\", {\n  id: serial(\"id\").primaryKey(),\n  adminId: varchar(\"admin_id\").notNull().references(() => users.id),\n  actionType: varchar(\"action_type\").notNull(),\n  targetType: varchar(\"target_type\").notNull(),\n  targetId: varchar(\"target_id\"),\n  details: jsonb(\"details\"),\n  ipAddress: varchar(\"ip_address\"),\n  userAgent: varchar(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  adminIdIdx: index(\"idx_admin_actions_admin_id\").on(table.adminId),\n  actionTypeIdx: index(\"idx_admin_actions_action_type\").on(table.actionType),\n  targetTypeIdx: index(\"idx_admin_actions_target_type\").on(table.targetType),\n  createdAtIdx: index(\"idx_admin_actions_created_at\").on(table.createdAt),\n}));\n\n// 2. Moderation Queue - Content pending review\nexport const moderationQueue = pgTable(\"moderation_queue\", {\n  id: serial(\"id\").primaryKey(),\n  contentType: varchar(\"content_type\").notNull(),\n  contentId: varchar(\"content_id\").notNull(),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  status: varchar(\"status\").notNull().default(\"pending\"),\n  priorityScore: integer(\"priority_score\").notNull().default(0),\n  spamScore: numeric(\"spam_score\", { precision: 3, scale: 2 }),\n  sentimentScore: numeric(\"sentiment_score\", { precision: 3, scale: 2 }),\n  flaggedReasons: text(\"flagged_reasons\").array().default(sql`'{}'::text[]`),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewNotes: text(\"review_notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  statusIdx: index(\"idx_moderation_queue_status\").on(table.status),\n  priorityScoreIdx: index(\"idx_moderation_queue_priority_score\").on(table.priorityScore),\n  createdAtIdx: index(\"idx_moderation_queue_created_at\").on(table.createdAt),\n}));\n\n// 3. Reported Content - User-reported violations\nexport const reportedContent = pgTable(\"reported_content\", {\n  id: serial(\"id\").primaryKey(),\n  reporterId: varchar(\"reporter_id\").notNull().references(() => users.id),\n  contentType: varchar(\"content_type\").notNull(),\n  contentId: varchar(\"content_id\").notNull(),\n  reportReason: varchar(\"report_reason\").notNull(),\n  description: text(\"description\").notNull(),\n  status: varchar(\"status\").notNull().default(\"pending\"),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  resolution: text(\"resolution\"),\n  actionTaken: varchar(\"action_taken\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  resolvedAt: timestamp(\"resolved_at\"),\n}, (table) => ({\n  statusIdx: index(\"idx_reported_content_status\").on(table.status),\n  contentTypeIdx: index(\"idx_reported_content_content_type\").on(table.contentType),\n  reporterIdIdx: index(\"idx_reported_content_reporter_id\").on(table.reporterId),\n  createdAtIdx: index(\"idx_reported_content_created_at\").on(table.createdAt),\n}));\n\n// 4. System Settings - Platform configuration\nexport const systemSettings = pgTable(\"system_settings\", {\n  id: serial(\"id\").primaryKey(),\n  settingKey: varchar(\"setting_key\").notNull().unique(),\n  settingValue: jsonb(\"setting_value\").notNull(),\n  category: varchar(\"category\").notNull(),\n  description: text(\"description\"),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  settingKeyIdx: index(\"idx_system_settings_setting_key\").on(table.settingKey),\n  categoryIdx: index(\"idx_system_settings_category\").on(table.category),\n}));\n\n// 5. Support Tickets - Customer support system\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: serial(\"id\").primaryKey(),\n  ticketNumber: varchar(\"ticket_number\").notNull().unique(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  subject: varchar(\"subject\").notNull(),\n  description: text(\"description\").notNull(),\n  status: varchar(\"status\").notNull().default(\"open\"),\n  priority: varchar(\"priority\").notNull().default(\"medium\"),\n  category: varchar(\"category\").notNull(),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  replies: jsonb(\"replies\").array().default(sql`'{}'::jsonb[]`),\n  tags: text(\"tags\").array().default(sql`'{}'::text[]`),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n  resolvedAt: timestamp(\"resolved_at\"),\n}, (table) => ({\n  statusIdx: index(\"idx_support_tickets_status\").on(table.status),\n  priorityIdx: index(\"idx_support_tickets_priority\").on(table.priority),\n  userIdIdx: index(\"idx_support_tickets_user_id\").on(table.userId),\n  assignedToIdx: index(\"idx_support_tickets_assigned_to\").on(table.assignedTo),\n  createdAtIdx: index(\"idx_support_tickets_created_at\").on(table.createdAt),\n}));\n\n// 6. Announcements - Platform-wide announcements\nexport const announcements = pgTable(\"announcements\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  type: varchar(\"type\").notNull().default(\"info\"),\n  targetAudience: varchar(\"target_audience\").notNull().default(\"all\"),\n  segmentId: integer(\"segment_id\"),\n  displayType: varchar(\"display_type\").notNull().default(\"banner\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  views: integer(\"views\").notNull().default(0),\n  clicks: integer(\"clicks\").notNull().default(0),\n}, (table) => ({\n  isActiveIdx: index(\"idx_announcements_is_active\").on(table.isActive),\n  targetAudienceIdx: index(\"idx_announcements_target_audience\").on(table.targetAudience),\n  startDateIdx: index(\"idx_announcements_start_date\").on(table.startDate),\n  endDateIdx: index(\"idx_announcements_end_date\").on(table.endDate),\n}));\n\n// 7. IP Bans - IP address banning\nexport const ipBans = pgTable(\"ip_bans\", {\n  id: serial(\"id\").primaryKey(),\n  ipAddress: varchar(\"ip_address\").notNull().unique(),\n  reason: text(\"reason\").notNull(),\n  banType: varchar(\"ban_type\").notNull().default(\"permanent\"),\n  expiresAt: timestamp(\"expires_at\"),\n  bannedBy: varchar(\"banned_by\").notNull().references(() => users.id),\n  bannedAt: timestamp(\"banned_at\").notNull().defaultNow(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n}, (table) => ({\n  ipAddressIdx: index(\"idx_ip_bans_ip_address\").on(table.ipAddress),\n  isActiveIdx: index(\"idx_ip_bans_is_active\").on(table.isActive),\n  expiresAtIdx: index(\"idx_ip_bans_expires_at\").on(table.expiresAt),\n}));\n\n// 8. Email Templates - Email template management\nexport const emailTemplates = pgTable(\"email_templates\", {\n  id: serial(\"id\").primaryKey(),\n  templateKey: varchar(\"template_key\").notNull().unique(),\n  subject: varchar(\"subject\").notNull(),\n  htmlBody: text(\"html_body\").notNull(),\n  textBody: text(\"text_body\").notNull(),\n  variables: text(\"variables\").array().default(sql`'{}'::text[]`),\n  category: varchar(\"category\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  templateKeyIdx: index(\"idx_email_templates_template_key\").on(table.templateKey),\n  categoryIdx: index(\"idx_email_templates_category\").on(table.category),\n  isActiveIdx: index(\"idx_email_templates_is_active\").on(table.isActive),\n}));\n\n// 9. Admin Roles - Admin permission system\nexport const adminRoles = pgTable(\"admin_roles\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id).unique(),\n  role: varchar(\"role\").notNull(),\n  permissions: jsonb(\"permissions\").notNull(),\n  grantedBy: varchar(\"granted_by\").notNull().references(() => users.id),\n  grantedAt: timestamp(\"granted_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_admin_roles_user_id\").on(table.userId),\n  roleIdx: index(\"idx_admin_roles_role\").on(table.role),\n}));\n\n// 10. User Segments - User segmentation for targeting\nexport const userSegments = pgTable(\"user_segments\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  rules: jsonb(\"rules\").notNull(),\n  userCount: integer(\"user_count\").notNull().default(0),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  nameIdx: index(\"idx_user_segments_name\").on(table.name),\n  createdAtIdx: index(\"idx_user_segments_created_at\").on(table.createdAt),\n}));\n\n// 11. Automation Rules - Automation workflows\nexport const automationRules = pgTable(\"automation_rules\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  triggerType: varchar(\"trigger_type\").notNull(),\n  triggerConfig: jsonb(\"trigger_config\").notNull(),\n  actionType: varchar(\"action_type\").notNull(),\n  actionConfig: jsonb(\"action_config\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  executionCount: integer(\"execution_count\").notNull().default(0),\n  lastExecuted: timestamp(\"last_executed\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  triggerTypeIdx: index(\"idx_automation_rules_trigger_type\").on(table.triggerType),\n  isActiveIdx: index(\"idx_automation_rules_is_active\").on(table.isActive),\n  createdAtIdx: index(\"idx_automation_rules_created_at\").on(table.createdAt),\n}));\n\n// 12. A/B Tests - A/B testing experiments\nexport const abTests = pgTable(\"ab_tests\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  variants: jsonb(\"variants\").array().default(sql`'{}'::jsonb[]`),\n  trafficAllocation: jsonb(\"traffic_allocation\").notNull(),\n  status: varchar(\"status\").notNull().default(\"draft\"),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  winnerVariant: varchar(\"winner_variant\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  statusIdx: index(\"idx_ab_tests_status\").on(table.status),\n  startDateIdx: index(\"idx_ab_tests_start_date\").on(table.startDate),\n  endDateIdx: index(\"idx_ab_tests_end_date\").on(table.endDate),\n}));\n\n// 13. Feature Flags - Feature toggle system\nexport const featureFlags = pgTable(\"feature_flags\", {\n  id: serial(\"id\").primaryKey(),\n  flagKey: varchar(\"flag_key\").notNull().unique(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  isEnabled: boolean(\"is_enabled\").notNull().default(false),\n  rolloutPercentage: integer(\"rollout_percentage\").notNull().default(0),\n  targetUsers: text(\"target_users\").array().default(sql`'{}'::text[]`),\n  targetSegments: integer(\"target_segments\").array().default(sql`'{}'::integer[]`),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  flagKeyIdx: index(\"idx_feature_flags_flag_key\").on(table.flagKey),\n  isEnabledIdx: index(\"idx_feature_flags_is_enabled\").on(table.isEnabled),\n}));\n\n// 14. API Keys - API key management\nexport const apiKeys = pgTable(\"api_keys\", {\n  id: serial(\"id\").primaryKey(),\n  key: varchar(\"key\").notNull().unique(),\n  name: varchar(\"name\").notNull(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  permissions: text(\"permissions\").array().default(sql`'{}'::text[]`),\n  rateLimit: integer(\"rate_limit\").notNull().default(60),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastUsed: timestamp(\"last_used\"),\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  keyIdx: index(\"idx_api_keys_key\").on(table.key),\n  userIdIdx: index(\"idx_api_keys_user_id\").on(table.userId),\n  isActiveIdx: index(\"idx_api_keys_is_active\").on(table.isActive),\n}));\n\n// 15. Webhooks - Webhook configurations\nexport const webhooks = pgTable(\"webhooks\", {\n  id: serial(\"id\").primaryKey(),\n  url: varchar(\"url\").notNull(),\n  events: text(\"events\").array().default(sql`'{}'::text[]`),\n  secret: varchar(\"secret\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  lastTriggered: timestamp(\"last_triggered\"),\n  successCount: integer(\"success_count\").notNull().default(0),\n  failureCount: integer(\"failure_count\").notNull().default(0),\n}, (table) => ({\n  isActiveIdx: index(\"idx_webhooks_is_active\").on(table.isActive),\n  createdAtIdx: index(\"idx_webhooks_created_at\").on(table.createdAt),\n}));\n\n// 16. Scheduled Jobs - Cron job management\nexport const scheduledJobs = pgTable(\"scheduled_jobs\", {\n  id: serial(\"id\").primaryKey(),\n  jobKey: varchar(\"job_key\").notNull().unique(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  schedule: varchar(\"schedule\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastRun: timestamp(\"last_run\"),\n  nextRun: timestamp(\"next_run\"),\n  lastStatus: varchar(\"last_status\"),\n  lastError: text(\"last_error\"),\n  executionCount: integer(\"execution_count\").notNull().default(0),\n}, (table) => ({\n  jobKeyIdx: index(\"idx_scheduled_jobs_job_key\").on(table.jobKey),\n  isActiveIdx: index(\"idx_scheduled_jobs_is_active\").on(table.isActive),\n  nextRunIdx: index(\"idx_scheduled_jobs_next_run\").on(table.nextRun),\n}));\n\n// 17. Performance Metrics - Performance tracking\nexport const performanceMetrics = pgTable(\"performance_metrics\", {\n  id: serial(\"id\").primaryKey(),\n  metricType: varchar(\"metric_type\").notNull(),\n  metricName: varchar(\"metric_name\").notNull(),\n  value: numeric(\"value\", { precision: 10, scale: 2 }).notNull(),\n  unit: varchar(\"unit\").notNull(),\n  metadata: jsonb(\"metadata\"),\n  recordedAt: timestamp(\"recorded_at\").notNull().defaultNow(),\n}, (table) => ({\n  metricTypeIdx: index(\"idx_performance_metrics_metric_type\").on(table.metricType),\n  metricNameIdx: index(\"idx_performance_metrics_metric_name\").on(table.metricName),\n  recordedAtIdx: index(\"idx_performance_metrics_recorded_at\").on(table.recordedAt),\n}));\n\n// 18. Security Events - Security event logging\nexport const securityEvents = pgTable(\"security_events\", {\n  id: serial(\"id\").primaryKey(),\n  eventType: varchar(\"event_type\").notNull(),\n  severity: varchar(\"severity\").notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  ipAddress: varchar(\"ip_address\").notNull(),\n  details: jsonb(\"details\").notNull(),\n  isResolved: boolean(\"is_resolved\").notNull().default(false),\n  resolvedBy: varchar(\"resolved_by\").references(() => users.id),\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  eventTypeIdx: index(\"idx_security_events_event_type\").on(table.eventType),\n  severityIdx: index(\"idx_security_events_severity\").on(table.severity),\n  isResolvedIdx: index(\"idx_security_events_is_resolved\").on(table.isResolved),\n  createdAtIdx: index(\"idx_security_events_created_at\").on(table.createdAt),\n}));\n\n// 19. Media Library - Central media storage\nexport const mediaLibrary = pgTable(\"media_library\", {\n  id: serial(\"id\").primaryKey(),\n  filename: varchar(\"filename\").notNull(),\n  originalFilename: varchar(\"original_filename\").notNull(),\n  filePath: varchar(\"file_path\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  mimeType: varchar(\"mime_type\").notNull(),\n  width: integer(\"width\"),\n  height: integer(\"height\"),\n  altText: varchar(\"alt_text\"),\n  tags: text(\"tags\").array().default(sql`'{}'::text[]`),\n  uploadedBy: varchar(\"uploaded_by\").notNull().references(() => users.id),\n  uploadedAt: timestamp(\"uploaded_at\").notNull().defaultNow(),\n  usageCount: integer(\"usage_count\").notNull().default(0),\n}, (table) => ({\n  uploadedByIdx: index(\"idx_media_library_uploaded_by\").on(table.uploadedBy),\n  mimeTypeIdx: index(\"idx_media_library_mime_type\").on(table.mimeType),\n  uploadedAtIdx: index(\"idx_media_library_uploaded_at\").on(table.uploadedAt),\n}));\n\n// 20. Content Revisions - Version control for content\nexport const contentRevisions = pgTable(\"content_revisions\", {\n  id: serial(\"id\").primaryKey(),\n  contentType: varchar(\"content_type\").notNull(),\n  contentId: varchar(\"content_id\").notNull(),\n  revisionNumber: integer(\"revision_number\").notNull(),\n  data: jsonb(\"data\").notNull(),\n  changedFields: text(\"changed_fields\").array().default(sql`'{}'::text[]`),\n  changedBy: varchar(\"changed_by\").notNull().references(() => users.id),\n  changeReason: text(\"change_reason\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  contentTypeIdx: index(\"idx_content_revisions_content_type\").on(table.contentType),\n  contentIdIdx: index(\"idx_content_revisions_content_id\").on(table.contentId),\n  revisionNumberIdx: index(\"idx_content_revisions_revision_number\").on(table.revisionNumber),\n  createdAtIdx: index(\"idx_content_revisions_created_at\").on(table.createdAt),\n}));\n\n// ========================================\n// CLIENT DASHBOARD TABLES\n// ========================================\n\n// Trading Journal - Track user trades and performance\nexport const tradingJournalEntries = pgTable(\"trading_journal_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  tradingPair: varchar(\"trading_pair\").notNull(),\n  entryPrice: decimal(\"entry_price\", { precision: 20, scale: 8 }).notNull(),\n  exitPrice: decimal(\"exit_price\", { precision: 20, scale: 8 }),\n  positionSize: decimal(\"position_size\", { precision: 20, scale: 8 }).notNull(),\n  positionType: varchar(\"position_type\").notNull().$type<\"long\" | \"short\">(),\n  entryDate: timestamp(\"entry_date\").notNull(),\n  exitDate: timestamp(\"exit_date\"),\n  profitLoss: decimal(\"profit_loss\", { precision: 20, scale: 8 }),\n  profitLossPercent: decimal(\"profit_loss_percent\", { precision: 10, scale: 4 }),\n  strategy: varchar(\"strategy\"),\n  notes: text(\"notes\"),\n  tags: text(\"tags\").array().default(sql`'{}'::text[]`),\n  screenshotUrls: text(\"screenshot_urls\").array().default(sql`'{}'::text[]`),\n  broker: varchar(\"broker\"),\n  status: varchar(\"status\").notNull().default(\"open\").$type<\"open\" | \"closed\">(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_trading_journal_user_id\").on(table.userId),\n  statusIdx: index(\"idx_trading_journal_status\").on(table.status),\n  entryDateIdx: index(\"idx_trading_journal_entry_date\").on(table.entryDate),\n  tradingPairIdx: index(\"idx_trading_journal_trading_pair\").on(table.tradingPair),\n}));\n\n// Watchlists - User custom symbol lists\nexport const watchlists = pgTable(\"watchlists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  symbols: text(\"symbols\").array().default(sql`'{}'::text[]`),\n  isDefault: boolean(\"is_default\").notNull().default(false),\n  color: varchar(\"color\"),\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_watchlists_user_id\").on(table.userId),\n  isDefaultIdx: index(\"idx_watchlists_is_default\").on(table.isDefault),\n}));\n\n// Price Alerts - Real-time price notifications\nexport const priceAlerts = pgTable(\"price_alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  symbol: varchar(\"symbol\").notNull(),\n  targetPrice: decimal(\"target_price\", { precision: 20, scale: 8 }).notNull(),\n  condition: varchar(\"condition\").notNull().$type<\"above\" | \"below\" | \"equals\">(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  isTriggered: boolean(\"is_triggered\").notNull().default(false),\n  triggeredAt: timestamp(\"triggered_at\"),\n  notificationMethod: varchar(\"notification_method\").notNull().default(\"in_app\").$type<\"in_app\" | \"email\" | \"push\" | \"all\">(),\n  note: text(\"note\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_price_alerts_user_id\").on(table.userId),\n  symbolIdx: index(\"idx_price_alerts_symbol\").on(table.symbol),\n  isActiveIdx: index(\"idx_price_alerts_is_active\").on(table.isActive),\n  isTriggeredIdx: index(\"idx_price_alerts_is_triggered\").on(table.isTriggered),\n}));\n\n// Saved Searches - Quick access to frequent searches\nexport const savedSearches = pgTable(\"saved_searches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\").notNull(),\n  query: text(\"query\").notNull(),\n  filters: jsonb(\"filters\"),\n  category: varchar(\"category\").$type<\"content\" | \"threads\" | \"users\" | \"brokers\" | \"all\">(),\n  useCount: integer(\"use_count\").notNull().default(0),\n  lastUsedAt: timestamp(\"last_used_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_saved_searches_user_id\").on(table.userId),\n  categoryIdx: index(\"idx_saved_searches_category\").on(table.category),\n}));\n\n// User Habits - Track daily/weekly engagement patterns\nexport const userHabits = pgTable(\"user_habits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  habitType: varchar(\"habit_type\").notNull().$type<\"daily_login\" | \"post_thread\" | \"trading_journal\" | \"learning_course\" | \"marketplace_visit\">(),\n  currentStreak: integer(\"current_streak\").notNull().default(0),\n  longestStreak: integer(\"longest_streak\").notNull().default(0),\n  lastCompletedAt: timestamp(\"last_completed_at\"),\n  totalCompletions: integer(\"total_completions\").notNull().default(0),\n  streakData: jsonb(\"streak_data\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_user_habits_user_id\").on(table.userId),\n  habitTypeIdx: index(\"idx_user_habits_habit_type\").on(table.habitType),\n  currentStreakIdx: index(\"idx_user_habits_current_streak\").on(table.currentStreak),\n}));\n\n// Chat Rooms - Group discussions and channels\nexport const chatRooms = pgTable(\"chat_rooms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  roomType: varchar(\"room_type\").notNull().$type<\"public\" | \"private\" | \"trading_pair\" | \"strategy\">(),\n  category: varchar(\"category\"),\n  memberCount: integer(\"member_count\").notNull().default(0),\n  messageCount: integer(\"message_count\").notNull().default(0),\n  lastMessageAt: timestamp(\"last_message_at\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  settings: jsonb(\"settings\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  roomTypeIdx: index(\"idx_chat_rooms_room_type\").on(table.roomType),\n  categoryIdx: index(\"idx_chat_rooms_category\").on(table.category),\n  isActiveIdx: index(\"idx_chat_rooms_is_active\").on(table.isActive),\n  lastMessageAtIdx: index(\"idx_chat_rooms_last_message_at\").on(table.lastMessageAt),\n}));\n\n// Chat Room Members - Track room membership\nexport const chatRoomMembers = pgTable(\"chat_room_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roomId: varchar(\"room_id\").notNull().references(() => chatRooms.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  role: varchar(\"role\").notNull().default(\"member\").$type<\"admin\" | \"moderator\" | \"member\">(),\n  joinedAt: timestamp(\"joined_at\").notNull().defaultNow(),\n  lastReadAt: timestamp(\"last_read_at\"),\n  isMuted: boolean(\"is_muted\").notNull().default(false),\n}, (table) => ({\n  roomIdIdx: index(\"idx_chat_room_members_room_id\").on(table.roomId),\n  userIdIdx: index(\"idx_chat_room_members_user_id\").on(table.userId),\n  roomUserIdx: index(\"idx_chat_room_members_room_user\").on(table.roomId, table.userId),\n}));\n\n// Chat Room Messages - Real-time messaging\nexport const chatRoomMessages = pgTable(\"chat_room_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roomId: varchar(\"room_id\").notNull().references(() => chatRooms.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  messageType: varchar(\"message_type\").notNull().default(\"text\").$type<\"text\" | \"image\" | \"file\" | \"system\">(),\n  attachmentUrl: text(\"attachment_url\"),\n  replyToId: varchar(\"reply_to_id\"),\n  editedAt: timestamp(\"edited_at\"),\n  deletedAt: timestamp(\"deleted_at\"),\n  reactions: jsonb(\"reactions\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  roomIdIdx: index(\"idx_chat_room_messages_room_id\").on(table.roomId),\n  userIdIdx: index(\"idx_chat_room_messages_user_id\").on(table.userId),\n  createdAtIdx: index(\"idx_chat_room_messages_created_at\").on(table.createdAt),\n}));\n\n// Dashboard Widgets - User dashboard customization\nexport const dashboardWidgets = pgTable(\"dashboard_widgets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  widgetType: varchar(\"widget_type\").notNull().$type<\"kpi_cards\" | \"activity_feed\" | \"trading_journal\" | \"leaderboard\" | \"market_ticker\" | \"watchlist\" | \"portfolio\" | \"chat\" | \"achievements\" | \"news_feed\" | \"learning_progress\" | \"quick_actions\">(),\n  position: jsonb(\"position\").notNull(),\n  size: jsonb(\"size\").notNull(),\n  settings: jsonb(\"settings\"),\n  isVisible: boolean(\"is_visible\").notNull().default(true),\n  layoutName: varchar(\"layout_name\").notNull().default(\"default\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_dashboard_widgets_user_id\").on(table.userId),\n  layoutNameIdx: index(\"idx_dashboard_widgets_layout_name\").on(table.layoutName),\n  widgetTypeIdx: index(\"idx_dashboard_widgets_widget_type\").on(table.widgetType),\n}));\n\n// User Dashboard Layouts - Save multiple dashboard configurations\nexport const dashboardLayouts = pgTable(\"dashboard_layouts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\").notNull(),\n  isDefault: boolean(\"is_default\").notNull().default(false),\n  layoutType: varchar(\"layout_type\").notNull().default(\"trader\").$type<\"trader\" | \"publisher\" | \"learner\" | \"custom\">(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdIdx: index(\"idx_dashboard_layouts_user_id\").on(table.userId),\n  isDefaultIdx: index(\"idx_dashboard_layouts_is_default\").on(table.isDefault),\n}));\n\n// Upsert User schema for Replit Auth (OIDC)\nexport const upsertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  email: true,\n  username: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n});\n\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\n\n// Insert User schema for traditional auth (username/password)\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  totalCoins: true,\n  weeklyEarned: true,\n  rank: true,\n  youtubeUrl: true,\n  instagramHandle: true,\n  telegramHandle: true,\n  myfxbookLink: true,\n  investorId: true,\n  investorPassword: true,\n  isVerifiedTrader: true,\n  emailNotifications: true,\n  hasYoutubeReward: true,\n  hasMyfxbookReward: true,\n  hasInvestorReward: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  username: z.string().min(3).max(50),\n  password: z.string().min(8),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport const insertCoinTransactionSchema = createInsertSchema(coinTransactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRechargeOrderSchema = createInsertSchema(rechargeOrders).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWithdrawalRequestSchema = createInsertSchema(withdrawalRequests).omit({\n  id: true,\n  requestedAt: true,\n  processedAt: true,\n  completedAt: true,\n  createdAt: true,\n  updatedAt: true,\n  approvedAt: true,\n  rejectedAt: true,\n}).extend({\n  amount: z.number().min(1000, \"Minimum withdrawal is 1000 coins\"),\n  method: z.enum([\"crypto\", \"paypal\", \"bank\", \"other\"]).optional(),\n  cryptoType: z.enum([\"BTC\", \"ETH\"]).optional(),\n  walletAddress: z.string().min(26, \"Invalid wallet address\").max(100, \"Invalid wallet address\"),\n});\n\nexport const insertFeedbackSchema = createInsertSchema(feedback).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  status: true,\n  priority: true,\n  adminNotes: true,\n}).extend({\n  type: z.enum([\"bug\", \"feature\", \"improvement\", \"other\"]),\n  subject: z.string().min(10, \"Subject must be at least 10 characters\").max(200, \"Subject must be at most 200 characters\"),\n  message: z.string().min(50, \"Message must be at least 50 characters\").max(5000, \"Message must be at most 5000 characters\"),\n  email: z.string().email(\"Invalid email format\").optional(),\n});\nexport type InsertFeedback = z.infer<typeof insertFeedbackSchema>;\nexport type Feedback = typeof feedback.$inferSelect;\n\nexport const insertContentSchema = createInsertSchema(content).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  views: true,\n  downloads: true,\n  likes: true,\n  status: true,\n}).extend({\n  title: z.string().min(10).max(120),\n  description: z.string().min(300),\n  priceCoins: z.number().min(0).max(10000),\n  platform: z.enum([\"MT4\", \"MT5\", \"Both\"]).optional(),\n  version: z.string().optional(),\n  tags: z.array(z.string()).max(8).optional(),\n  files: z.array(z.object({\n    name: z.string(),\n    size: z.number(),\n    url: z.string(),\n    checksum: z.string(),\n  })).min(1, \"At least 1 file is required\").optional(),\n  images: z.array(z.object({\n    url: z.string(),\n    isCover: z.boolean(),\n    order: z.number(),\n  })).min(1, \"At least 1 image is required\").optional(),\n  brokerCompat: z.array(z.string()).optional(),\n  minDeposit: z.number().optional(),\n  hedging: z.boolean().optional(),\n  changelog: z.string().optional(),\n  license: z.string().optional(),\n  // Evidence fields (conditionally required based on tags)\n  equityCurveImage: z.string().optional(),\n  profitFactor: z.number().optional(),\n  drawdownPercent: z.number().optional(),\n  winPercent: z.number().optional(),\n  broker: z.string().optional(),\n  monthsTested: z.number().optional(),\n  \n  // Auto-generated SEO fields (optional, can be provided or generated)\n  slug: z.string().optional(),\n  focusKeyword: z.string().optional(),\n  autoMetaDescription: z.string().optional(),\n  autoImageAltTexts: z.array(z.string()).optional(),\n});\n\nexport const insertContentPurchaseSchema = createInsertSchema(contentPurchases).omit({\n  id: true,\n  purchasedAt: true,\n  sellerId: true,\n  transactionId: true,\n  priceCoins: true,\n});\n\nexport const insertContentReviewSchema = createInsertSchema(contentReviews).omit({\n  id: true,\n  createdAt: true,\n  status: true,\n  rewardGiven: true,\n}).extend({\n  rating: z.number().min(1, \"Rating must be between 1 and 5\").max(5, \"Rating must be between 1 and 5\"),\n  review: z.string().min(100, \"Review must be at least 100 characters\").max(1000, \"Review must be at most 1000 characters\"),\n});\n\nexport const insertContentLikeSchema = createInsertSchema(contentLikes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContentReplySchema = createInsertSchema(contentReplies).omit({\n  id: true,\n  createdAt: true,\n  helpful: true,\n  isVerified: true,\n}).extend({\n  body: z.string().min(10).max(5000),\n  rating: z.number().min(1).max(5).optional(),\n});\n\nexport const insertBrokerSchema = createInsertSchema(brokers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  overallRating: true,\n  reviewCount: true,\n  scamReportCount: true,\n  status: true,\n  isVerified: true,\n});\n\nexport const insertBrokerReviewSchema = createInsertSchema(brokerReviews).omit({\n  id: true,\n  datePosted: true,\n  status: true,\n}).extend({\n  rating: z.number().min(1).max(5),\n  reviewTitle: z.string().min(10).max(200),\n  reviewBody: z.string().min(100).max(2000),\n});\n\nexport const insertUserFollowSchema = createInsertSchema(userFollows).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  lastMessageAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  body: z.string().min(1).max(5000),\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n  isRead: true,\n}).extend({\n  title: z.string().min(1).max(200),\n  message: z.string().min(1).max(500),\n});\n\nexport const updateUserProfileSchema = z.object({\n  displayName: z.string().min(2).max(50).optional(),\n  email: z.string().email().optional(),\n  bio: z.string().max(500).optional().or(z.literal(\"\")),\n  location: z.string().max(100).optional().or(z.literal(\"\")),\n  website: z.string().url().optional().or(z.literal(\"\")),\n  youtubeUrl: z.string().url().optional().or(z.literal(\"\")),\n  instagramHandle: z.string().min(1).max(50).optional().or(z.literal(\"\")),\n  telegramHandle: z.string().min(1).max(50).optional().or(z.literal(\"\")),\n  myfxbookLink: z.string().url().optional().or(z.literal(\"\")),\n  investorId: z.string().optional().or(z.literal(\"\")),\n  investorPassword: z.string().optional().or(z.literal(\"\")),\n  emailNotifications: z.boolean().optional(),\n});\n\n// User types already defined above near upsertUserSchema\nexport type CoinTransaction = typeof coinTransactions.$inferSelect;\nexport type InsertCoinTransaction = z.infer<typeof insertCoinTransactionSchema>;\nexport type RechargeOrder = typeof rechargeOrders.$inferSelect;\nexport type InsertRechargeOrder = z.infer<typeof insertRechargeOrderSchema>;\nexport type SelectSubscription = typeof subscriptions.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\nexport type WithdrawalRequest = typeof withdrawalRequests.$inferSelect;\nexport type SelectWithdrawalRequest = typeof withdrawalRequests.$inferSelect; // Alias for consistency\nexport type InsertWithdrawalRequest = z.infer<typeof insertWithdrawalRequestSchema>;\nexport type Content = typeof content.$inferSelect;\nexport type InsertContent = z.infer<typeof insertContentSchema>;\nexport type ContentPurchase = typeof contentPurchases.$inferSelect;\nexport type InsertContentPurchase = z.infer<typeof insertContentPurchaseSchema>;\nexport type ContentReview = typeof contentReviews.$inferSelect;\nexport type InsertContentReview = z.infer<typeof insertContentReviewSchema>;\nexport type ContentLike = typeof contentLikes.$inferSelect;\nexport type InsertContentLike = z.infer<typeof insertContentLikeSchema>;\nexport type ContentReply = typeof contentReplies.$inferSelect;\nexport type InsertContentReply = z.infer<typeof insertContentReplySchema>;\nexport type Broker = typeof brokers.$inferSelect;\nexport type InsertBroker = z.infer<typeof insertBrokerSchema>;\nexport type BrokerReview = typeof brokerReviews.$inferSelect;\nexport type InsertBrokerReview = z.infer<typeof insertBrokerReviewSchema>;\nexport type UserFollow = typeof userFollows.$inferSelect;\nexport type InsertUserFollow = z.infer<typeof insertUserFollowSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport const insertMessageReactionSchema = createInsertSchema(messageReactions).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertMessageReaction = z.infer<typeof insertMessageReactionSchema>;\nexport type MessageReaction = typeof messageReactions.$inferSelect;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type UpdateUserProfile = z.infer<typeof updateUserProfileSchema>;\n\nexport const insertForumThreadSchema = createInsertSchema(forumThreads).omit({\n  id: true,\n  authorId: true,\n  createdAt: true,\n  updatedAt: true,\n  views: true,\n  replyCount: true,\n  likeCount: true,\n  bookmarkCount: true,\n  shareCount: true,\n  lastActivityAt: true,\n  status: true,\n  lastScoreUpdate: true,\n  acceptedAnswerId: true,\n}).extend({\n  // Core fields with proper validation\n  title: z.string()\n    .min(15, \"Title must be at least 15 characters\")\n    .max(90, \"Title must not exceed 90 characters\")\n    .refine(\n      (val) => {\n        const upperCount = (val.match(/[A-Z]/g) || []).length;\n        const letterCount = (val.match(/[a-zA-Z]/g) || []).length;\n        return letterCount === 0 || upperCount / letterCount < 0.5;\n      },\n      { message: \"Let's tone this down a bit so more folks read it\" }\n    ),\n  body: z.string()\n    .min(150, \"A little more context helps people reply. Two more sentences?\")\n    .max(50000, \"Body is too long\"),\n  categorySlug: z.string().min(1),\n  subcategorySlug: z.string().optional(),\n  \n  // Thread type and language\n  threadType: z.enum([\"question\", \"discussion\", \"review\", \"journal\", \"guide\", \"program_sharing\"]).default(\"discussion\"),\n  language: z.string().default(\"en\"),\n  \n  // Optional SEO fields\n  seoExcerpt: z.string().optional().or(z.literal(\"\")),\n  primaryKeyword: z.string().optional().or(z.literal(\"\")),\n  \n  // Trading metadata (optional multi-select)\n  instruments: z.array(z.string()).optional().default([]),\n  timeframes: z.array(z.string()).optional().default([]),\n  strategies: z.array(z.string()).optional().default([]),\n  platform: z.string().optional(),\n  broker: z.string().max(40).optional(),\n  riskNote: z.string().max(500).optional(),\n  hashtags: z.array(z.string()).max(10, \"Maximum 10 hashtags\").optional().default([]),\n  \n  // Review-specific fields (conditional)\n  reviewTarget: z.string().optional(),\n  reviewVersion: z.string().optional(),\n  reviewRating: z.number().int().min(1).max(5).optional(),\n  reviewPros: z.array(z.string()).optional().default([]),\n  reviewCons: z.array(z.string()).optional().default([]),\n  \n  // Question-specific fields (conditional)\n  questionSummary: z.string().max(200).optional(),\n  \n  // Attachments\n  attachmentUrls: z.array(z.string()).optional().default([]),\n  \n  // Status flags\n  isPinned: z.boolean().optional().default(false),\n  isLocked: z.boolean().optional().default(false),\n  isSolved: z.boolean().optional().default(false),\n  \n  // Auto-generated SEO fields (optional, can be provided or generated)\n  slug: z.string().optional(),\n  focusKeyword: z.string().optional(),\n  metaDescription: z.string().optional(),\n  \n  // Ranking field (optional, defaults to 0 if not provided)\n  engagementScore: z.number().optional(),\n});\n\nexport const insertForumReplySchema = createInsertSchema(forumReplies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  helpful: true,\n  isAccepted: true,\n  isVerified: true,\n  slug: true,\n  metaDescription: true,\n}).extend({\n  body: z.string().min(10).max(10000),\n});\n\nexport const insertForumCategorySchema = createInsertSchema(forumCategories).omit({\n  threadCount: true,\n  postCount: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  name: z.string().min(3).max(100),\n  description: z.string().min(10).max(500),\n});\n\nexport const insertUserBadgeSchema = createInsertSchema(userBadges).omit({\n  id: true,\n  awardedAt: true,\n});\n\nexport const insertActivityFeedSchema = createInsertSchema(activityFeed).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  title: z.string().min(1).max(300),\n  description: z.string().max(500).optional(),\n});\n\nexport type ForumThread = typeof forumThreads.$inferSelect;\nexport type InsertForumThread = z.infer<typeof insertForumThreadSchema>;\nexport type ForumReply = typeof forumReplies.$inferSelect;\nexport type InsertForumReply = z.infer<typeof insertForumReplySchema>;\nexport type ForumCategory = typeof forumCategories.$inferSelect;\nexport type InsertForumCategory = z.infer<typeof insertForumCategorySchema>;\nexport type UserBadge = typeof userBadges.$inferSelect;\nexport type InsertUserBadge = z.infer<typeof insertUserBadgeSchema>;\nexport type ActivityFeed = typeof activityFeed.$inferSelect;\nexport type InsertActivityFeed = z.infer<typeof insertActivityFeedSchema>;\n\n// Double-Entry Ledger schemas\nexport const insertUserWalletSchema = createInsertSchema(userWallet).omit({ walletId: true, updatedAt: true });\nexport type InsertUserWallet = z.infer<typeof insertUserWalletSchema>;\nexport type UserWallet = typeof userWallet.$inferSelect;\n\nexport const insertCoinLedgerTransactionSchema = createInsertSchema(coinLedgerTransactions)\n  .omit({ id: true, createdAt: true, closedAt: true });\nexport type InsertCoinLedgerTransaction = z.infer<typeof insertCoinLedgerTransactionSchema>;\nexport type CoinLedgerTransaction = typeof coinLedgerTransactions.$inferSelect;\n\nexport const insertCoinJournalEntrySchema = createInsertSchema(coinJournalEntries)\n  .omit({ id: true, createdAt: true });\nexport type InsertCoinJournalEntry = z.infer<typeof insertCoinJournalEntrySchema>;\nexport type CoinJournalEntry = typeof coinJournalEntries.$inferSelect;\n\nexport const insertLedgerReconciliationRunSchema = createInsertSchema(ledgerReconciliationRuns)\n  .omit({ id: true, createdAt: true, completedAt: true });\nexport type InsertLedgerReconciliationRun = z.infer<typeof insertLedgerReconciliationRunSchema>;\nexport type LedgerReconciliationRun = typeof ledgerReconciliationRuns.$inferSelect;\n\n// Dashboard Preferences schemas\nexport const insertDashboardPreferencesSchema = createInsertSchema(dashboardPreferences)\n  .omit({ id: true, createdAt: true, updatedAt: true });\nexport type InsertDashboardPreferences = z.infer<typeof insertDashboardPreferencesSchema>;\nexport type DashboardPreferences = typeof dashboardPreferences.$inferSelect;\n\n// Publish-specific validation schema with conditional evidence fields\nexport const publishContentSchema = insertContentSchema.superRefine((data, ctx) => {\n  // Check if \"Performance Report\" tag is included\n  const hasPerformanceReportTag = data.tags?.includes(\"Performance Report\");\n  \n  if (hasPerformanceReportTag) {\n    // Require evidence fields when Performance Report tag is present\n    if (!data.equityCurveImage) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Equity curve image is required for Performance Reports\",\n        path: [\"equityCurveImage\"],\n      });\n    }\n    if (!data.profitFactor) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Profit Factor is required for Performance Reports\",\n        path: [\"profitFactor\"],\n      });\n    }\n    if (!data.drawdownPercent) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Drawdown % is required for Performance Reports\",\n        path: [\"drawdownPercent\"],\n      });\n    }\n    if (!data.winPercent) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Win % is required for Performance Reports\",\n        path: [\"winPercent\"],\n      });\n    }\n    if (!data.broker) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Broker name is required for Performance Reports\",\n        path: [\"broker\"],\n      });\n    }\n    if (!data.monthsTested) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Months Tested is required for Performance Reports\",\n        path: [\"monthsTested\"],\n      });\n    }\n  }\n  \n  return data;\n});\n\nexport type PublishContent = z.infer<typeof publishContentSchema>;\n\n// Badge System Constants (matches database schema)\nexport const BADGE_TYPES = {\n  VERIFIED_TRADER: 'verified_trader',\n  TOP_CONTRIBUTOR: 'top_contributor',\n  EA_EXPERT: 'ea_expert',\n  HELPFUL_MEMBER: 'helpful_member',\n  EARLY_ADOPTER: 'early_adopter',\n} as const;\n\nexport type BadgeType = typeof BADGE_TYPES[keyof typeof BADGE_TYPES];\n\nexport const BADGE_METADATA: Record<BadgeType, {\n  name: string;\n  description: string;\n  icon: string;\n  color: string;\n}> = {\n  [BADGE_TYPES.VERIFIED_TRADER]: {\n    name: 'Verified Trader',\n    description: 'Linked and verified trading account',\n    icon: 'ShieldCheck',\n    color: 'text-blue-500',\n  },\n  [BADGE_TYPES.TOP_CONTRIBUTOR]: {\n    name: 'Top Contributor',\n    description: 'Top 10 on contributor leaderboard',\n    icon: 'Star',\n    color: 'text-yellow-500',\n  },\n  [BADGE_TYPES.EA_EXPERT]: {\n    name: 'EA Expert',\n    description: 'Published 5+ Expert Advisors',\n    icon: 'Award',\n    color: 'text-purple-500',\n  },\n  [BADGE_TYPES.HELPFUL_MEMBER]: {\n    name: 'Helpful Member',\n    description: '50+ helpful replies',\n    icon: 'Heart',\n    color: 'text-red-500',\n  },\n  [BADGE_TYPES.EARLY_ADOPTER]: {\n    name: 'Early Adopter',\n    description: 'Joined in the first month',\n    icon: 'Zap',\n    color: 'text-orange-500',\n  },\n};\n\n// Daily Activity Limits types\nexport type DailyActivityLimit = typeof dailyActivityLimits.$inferSelect;\nexport type InsertDailyActivityLimit = typeof dailyActivityLimits.$inferInsert;\n\n// Referral types\nexport const insertReferralSchema = createInsertSchema(referrals).omit({ id: true, createdAt: true });\nexport type InsertReferral = z.infer<typeof insertReferralSchema>;\nexport type Referral = typeof referrals.$inferSelect;\n\n// Goals types\nexport const insertGoalSchema = createInsertSchema(goals).omit({ id: true, createdAt: true });\nexport type InsertGoal = z.infer<typeof insertGoalSchema>;\nexport type Goal = typeof goals.$inferSelect;\n\n// Achievements types\nexport type Achievement = typeof achievements.$inferSelect;\n\n// User Achievements types\nexport type UserAchievement = typeof userAchievements.$inferSelect;\n\n// Campaigns types\nexport type Campaign = typeof campaigns.$inferSelect;\n\n// Dashboard Settings types\nexport type DashboardSettings = typeof dashboardSettings.$inferSelect;\n\n// Profiles types\nexport type Profile = typeof profiles.$inferSelect;\n\n// User Settings types\nexport type UserSettings = typeof userSettings.$inferSelect;\n\n// ============================================================================\n// ADMIN DASHBOARD SCHEMAS AND TYPES (20 new admin tables)\n// ============================================================================\n\n// 1. Admin Actions\nexport const insertAdminActionSchema = createInsertSchema(adminActions).omit({ id: true, createdAt: true });\nexport type InsertAdminAction = z.infer<typeof insertAdminActionSchema>;\nexport type AdminAction = typeof adminActions.$inferSelect;\n\n// 2. Moderation Queue\nexport const insertModerationQueueSchema = createInsertSchema(moderationQueue).omit({ id: true, createdAt: true });\nexport type InsertModerationQueue = z.infer<typeof insertModerationQueueSchema>;\nexport type ModerationQueue = typeof moderationQueue.$inferSelect;\n\n// 3. Reported Content\nexport const insertReportedContentSchema = createInsertSchema(reportedContent).omit({ id: true, createdAt: true });\nexport type InsertReportedContent = z.infer<typeof insertReportedContentSchema>;\nexport type ReportedContent = typeof reportedContent.$inferSelect;\n\n// 4. System Settings\nexport const insertSystemSettingSchema = createInsertSchema(systemSettings).omit({ id: true, updatedAt: true });\nexport type InsertSystemSetting = z.infer<typeof insertSystemSettingSchema>;\nexport type SystemSetting = typeof systemSettings.$inferSelect;\n\n// 5. Support Tickets\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({ id: true, createdAt: true, updatedAt: true });\nexport type InsertSupportTicket = z.infer<typeof insertSupportTicketSchema>;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\n\n// 6. Announcements\nexport const insertAnnouncementSchema = createInsertSchema(announcements).omit({ id: true, createdAt: true, views: true, clicks: true });\nexport type InsertAnnouncement = z.infer<typeof insertAnnouncementSchema>;\nexport type Announcement = typeof announcements.$inferSelect;\n\n// 7. IP Bans\nexport const insertIpBanSchema = createInsertSchema(ipBans).omit({ id: true, bannedAt: true });\nexport type InsertIpBan = z.infer<typeof insertIpBanSchema>;\nexport type IpBan = typeof ipBans.$inferSelect;\n\n// 8. Email Templates\nexport const insertEmailTemplateSchema = createInsertSchema(emailTemplates).omit({ id: true, updatedAt: true });\nexport type InsertEmailTemplate = z.infer<typeof insertEmailTemplateSchema>;\nexport type EmailTemplate = typeof emailTemplates.$inferSelect;\n\n// 9. Admin Roles\nexport const insertAdminRoleSchema = createInsertSchema(adminRoles).omit({ id: true, grantedAt: true });\nexport type InsertAdminRole = z.infer<typeof insertAdminRoleSchema>;\nexport type AdminRole = typeof adminRoles.$inferSelect;\n\n// 10. User Segments\nexport const insertUserSegmentSchema = createInsertSchema(userSegments).omit({ id: true, createdAt: true, updatedAt: true, userCount: true });\nexport type InsertUserSegment = z.infer<typeof insertUserSegmentSchema>;\nexport type UserSegment = typeof userSegments.$inferSelect;\n\n// 11. Automation Rules\nexport const insertAutomationRuleSchema = createInsertSchema(automationRules).omit({ id: true, createdAt: true, executionCount: true, lastExecuted: true });\nexport type InsertAutomationRule = z.infer<typeof insertAutomationRuleSchema>;\nexport type AutomationRule = typeof automationRules.$inferSelect;\n\n// 12. A/B Tests\nexport const insertAbTestSchema = createInsertSchema(abTests).omit({ id: true, createdAt: true });\nexport type InsertAbTest = z.infer<typeof insertAbTestSchema>;\nexport type AbTest = typeof abTests.$inferSelect;\n\n// 13. Feature Flags\nexport const insertFeatureFlagSchema = createInsertSchema(featureFlags).omit({ id: true, createdAt: true, updatedAt: true });\nexport type InsertFeatureFlag = z.infer<typeof insertFeatureFlagSchema>;\nexport type FeatureFlag = typeof featureFlags.$inferSelect;\n\n// 14. API Keys\nexport const insertApiKeySchema = createInsertSchema(apiKeys).omit({ id: true, createdAt: true, lastUsed: true });\nexport type InsertApiKey = z.infer<typeof insertApiKeySchema>;\nexport type ApiKey = typeof apiKeys.$inferSelect;\n\n// 15. Webhooks\nexport const insertWebhookSchema = createInsertSchema(webhooks).omit({ id: true, createdAt: true, lastTriggered: true, successCount: true, failureCount: true });\nexport type InsertWebhook = z.infer<typeof insertWebhookSchema>;\nexport type Webhook = typeof webhooks.$inferSelect;\n\n// 16. Scheduled Jobs\nexport const insertScheduledJobSchema = createInsertSchema(scheduledJobs).omit({ id: true, lastRun: true, nextRun: true, lastStatus: true, lastError: true, executionCount: true });\nexport type InsertScheduledJob = z.infer<typeof insertScheduledJobSchema>;\nexport type ScheduledJob = typeof scheduledJobs.$inferSelect;\n\n// 17. Performance Metrics\nexport const insertPerformanceMetricSchema = createInsertSchema(performanceMetrics).omit({ id: true, recordedAt: true });\nexport type InsertPerformanceMetric = z.infer<typeof insertPerformanceMetricSchema>;\nexport type PerformanceMetric = typeof performanceMetrics.$inferSelect;\n\n// 18. Security Events\nexport const insertSecurityEventSchema = createInsertSchema(securityEvents).omit({ id: true, createdAt: true });\nexport type InsertSecurityEvent = z.infer<typeof insertSecurityEventSchema>;\nexport type SecurityEvent = typeof securityEvents.$inferSelect;\n\n// 19. Media Library\nexport const insertMediaLibrarySchema = createInsertSchema(mediaLibrary).omit({ id: true, uploadedAt: true, usageCount: true });\nexport type InsertMediaLibrary = z.infer<typeof insertMediaLibrarySchema>;\nexport type MediaLibrary = typeof mediaLibrary.$inferSelect;\n\n// 20. Content Revisions\nexport const insertContentRevisionSchema = createInsertSchema(contentRevisions).omit({ id: true, createdAt: true });\nexport type InsertContentRevision = z.infer<typeof insertContentRevisionSchema>;\nexport type ContentRevision = typeof contentRevisions.$inferSelect;\n\n// User Activity types (Daily Earning system)\nexport const insertUserActivitySchema = createInsertSchema(userActivity).omit({ id: true, createdAt: true });\nexport type InsertUserActivity = z.infer<typeof insertUserActivitySchema>;\nexport type UserActivity = typeof userActivity.$inferSelect;\n\n\n//=================================================================\n// SITEMAP LOGS\n// Tracks sitemap generation, submission to search engines, and errors\n//=================================================================\n\nexport const sitemapLogs = pgTable('sitemap_logs', {\n  id: serial('id').primaryKey(),\n  action: varchar('action', { length: 50 }).notNull(), // 'generate', 'submit_google', 'submit_indexnow'\n  status: varchar('status', { length: 20 }).notNull(), // 'success', 'error', 'pending'\n  urlCount: integer('url_count'), // Number of URLs in sitemap\n  submittedTo: varchar('submitted_to', { length: 100 }), // 'google', 'bing', 'yandex', null for generation\n  errorMessage: text('error_message'),\n  metadata: jsonb('metadata'), // Additional data (API responses, etc.)\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\nexport type SitemapLog = typeof sitemapLogs.$inferSelect;\nexport type InsertSitemapLog = typeof sitemapLogs.$inferInsert;\n\nexport const insertSitemapLogSchema = createInsertSchema(sitemapLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\n//=================================================================\n// MODERATION TYPES - Phase 2\n// Type definitions for Content Moderation Admin Dashboard\n//=================================================================\n\nexport type ModerationQueueItem = {\n  id: string;\n  type: \"thread\" | \"reply\";\n  threadId?: string;\n  title?: string;\n  preview: string;\n  author: {\n    id: string;\n    username: string;\n    avatarUrl: string | null;\n    reputation: number;\n  };\n  submittedAt: Date;\n  wordCount: number;\n  hasLinks: boolean;\n  hasImages: boolean;\n  categorySlug?: string;\n  threadTitle?: string;\n  status: \"pending\" | \"approved\" | \"rejected\";\n};\n\nexport type ReportedContentSummary = {\n  contentId: string;\n  contentType: \"thread\" | \"reply\";\n  titleOrPreview: string;\n  reportCount: number;\n  reportReasons: string[];\n  reporters: Array<{ id: string; username: string }>;\n  firstReportedAt: Date;\n  author: {\n    id: string;\n    username: string;\n    reputation: number;\n  };\n  latestAction: string | null;\n  status: \"pending\" | \"resolved\" | \"dismissed\";\n};\n\nexport type ContentDetails = {\n  id: string;\n  type: \"thread\" | \"reply\";\n  title?: string;\n  body: string;\n  attachments: string[];\n  author: User;\n  authorRecentPosts: Array<{ id: string; title?: string; body: string; createdAt: Date; type: string }>;\n  authorWarnings: Array<{ actionType: string; details: any; createdAt: Date }>;\n  threadContext?: { id: string; title: string; categorySlug: string };\n  metadata: {\n    createdAt: Date;\n    updatedAt: Date;\n    wordCount: number;\n    hasLinks: boolean;\n    hasImages: boolean;\n  };\n};\n\nexport type ReportDetails = {\n  id: number;\n  contentId: string;\n  contentType: \"thread\" | \"reply\";\n  content: {\n    title?: string;\n    body: string;\n    author: {\n      id: string;\n      username: string;\n      reputation: number;\n    };\n  };\n  reports: Array<{\n    id: number;\n    reporter: {\n      id: string;\n      username: string;\n    };\n    reason: string;\n    description: string;\n    createdAt: Date;\n  }>;\n  status: string;\n  availableActions: string[];\n};\n\nexport type ModerationActionLog = {\n  id: number;\n  action: string;\n  contentId: string | null;\n  contentType: string | null;\n  moderator: {\n    id: string;\n    username: string;\n  };\n  reason: string | null;\n  timestamp: Date;\n  metadata: any;\n};\n\n// ============================================================================\n// CLIENT DASHBOARD SCHEMAS AND TYPES (New client dashboard tables)\n// ============================================================================\n\n// Trading Journal Entries\nexport const insertTradingJournalEntrySchema = createInsertSchema(tradingJournalEntries).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  tradingPair: z.string().min(1, \"Trading pair is required\"),\n  entryPrice: z.string().min(1, \"Entry price is required\"),\n  positionSize: z.string().min(1, \"Position size is required\"),\n  positionType: z.enum([\"long\", \"short\"]),\n  entryDate: z.date().or(z.string()),\n  exitDate: z.date().or(z.string()).optional(),\n});\nexport type InsertTradingJournalEntry = z.infer<typeof insertTradingJournalEntrySchema>;\nexport type TradingJournalEntry = typeof tradingJournalEntries.$inferSelect;\n\n// Watchlists\nexport const insertWatchlistSchema = createInsertSchema(watchlists).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  name: z.string().min(1, \"Watchlist name is required\").max(100),\n  symbols: z.array(z.string()).default([]),\n});\nexport type InsertWatchlist = z.infer<typeof insertWatchlistSchema>;\nexport type Watchlist = typeof watchlists.$inferSelect;\n\n// Price Alerts\nexport const insertPriceAlertSchema = createInsertSchema(priceAlerts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  isTriggered: true,\n  triggeredAt: true,\n}).extend({\n  symbol: z.string().min(1, \"Symbol is required\"),\n  targetPrice: z.string().min(1, \"Target price is required\"),\n  condition: z.enum([\"above\", \"below\", \"equals\"]),\n});\nexport type InsertPriceAlert = z.infer<typeof insertPriceAlertSchema>;\nexport type PriceAlert = typeof priceAlerts.$inferSelect;\n\n// Saved Searches\nexport const insertSavedSearchSchema = createInsertSchema(savedSearches).omit({\n  id: true,\n  createdAt: true,\n  useCount: true,\n  lastUsedAt: true,\n}).extend({\n  name: z.string().min(1, \"Search name is required\").max(100),\n  query: z.string().min(1, \"Search query is required\"),\n});\nexport type InsertSavedSearch = z.infer<typeof insertSavedSearchSchema>;\nexport type SavedSearch = typeof savedSearches.$inferSelect;\n\n// User Habits\nexport const insertUserHabitSchema = createInsertSchema(userHabits).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  currentStreak: true,\n  longestStreak: true,\n  totalCompletions: true,\n});\nexport type InsertUserHabit = z.infer<typeof insertUserHabitSchema>;\nexport type UserHabit = typeof userHabits.$inferSelect;\n\n// Chat Rooms\nexport const insertChatRoomSchema = createInsertSchema(chatRooms).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  memberCount: true,\n  messageCount: true,\n  lastMessageAt: true,\n}).extend({\n  name: z.string().min(1, \"Room name is required\").max(100),\n  roomType: z.enum([\"public\", \"private\", \"trading_pair\", \"strategy\"]),\n});\nexport type InsertChatRoom = z.infer<typeof insertChatRoomSchema>;\nexport type ChatRoom = typeof chatRooms.$inferSelect;\n\n// Chat Room Members\nexport const insertChatRoomMemberSchema = createInsertSchema(chatRoomMembers).omit({\n  id: true,\n  joinedAt: true,\n});\nexport type InsertChatRoomMember = z.infer<typeof insertChatRoomMemberSchema>;\nexport type ChatRoomMember = typeof chatRoomMembers.$inferSelect;\n\n// Chat Room Messages\nexport const insertChatRoomMessageSchema = createInsertSchema(chatRoomMessages).omit({\n  id: true,\n  createdAt: true,\n  editedAt: true,\n  deletedAt: true,\n}).extend({\n  content: z.string().min(1, \"Message content is required\").max(2000),\n});\nexport type InsertChatRoomMessage = z.infer<typeof insertChatRoomMessageSchema>;\nexport type ChatRoomMessage = typeof chatRoomMessages.$inferSelect;\n\n// Dashboard Widgets\nexport const insertDashboardWidgetSchema = createInsertSchema(dashboardWidgets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertDashboardWidget = z.infer<typeof insertDashboardWidgetSchema>;\nexport type DashboardWidget = typeof dashboardWidgets.$inferSelect;\n\n// Dashboard Layouts\nexport const insertDashboardLayoutSchema = createInsertSchema(dashboardLayouts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  name: z.string().min(1, \"Layout name is required\").max(100),\n});\nexport type InsertDashboardLayout = z.infer<typeof insertDashboardLayoutSchema>;\nexport type DashboardLayout = typeof dashboardLayouts.$inferSelect;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;AAGO,MAAM,WAAW,IAAA,gKAAO,EAC7B,YACA;IACE,KAAK,IAAA,6KAAO,EAAC,OAAO,UAAU;IAC9B,MAAM,IAAA,yKAAK,EAAC,QAAQ,OAAO;IAC3B,QAAQ,IAAA,iLAAS,EAAC,UAAU,OAAO;AACrC,GACA,CAAC,QAAU,CAAC;QACV,WAAW,IAAA,gKAAK,EAAC,sBAAsB,EAAE,CAAC,MAAM,MAAM;IACxD,CAAC;AAII,MAAM,QAAQ,IAAA,gKAAO,EAAC,SAAS;IACpC,iEAAiE;IACjE,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAE7D,sEAAsE;IACtE,UAAU,IAAA,uKAAI,EAAC,YAAY,OAAO,GAAG,MAAM;IAC3C,UAAU,IAAA,uKAAI,EAAC;IAEf,kDAAkD;IAClD,OAAO,IAAA,6KAAO,EAAC,SAAS,MAAM;IAC9B,WAAW,IAAA,6KAAO,EAAC;IACnB,UAAU,IAAA,6KAAO,EAAC;IAClB,iBAAiB,IAAA,6KAAO,EAAC;IACzB,UAAU,IAAA,6KAAO,EAAC,YAAY;QAAE,QAAQ;IAAI;IAE5C,oDAAoD;IACpD,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;IACrD,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO,GAAG,OAAO,CAAC;IACzD,MAAM,IAAA,6KAAO,EAAC;IACd,YAAY,IAAA,uKAAI,EAAC;IACjB,iBAAiB,IAAA,uKAAI,EAAC;IACtB,gBAAgB,IAAA,uKAAI,EAAC;IACrB,cAAc,IAAA,uKAAI,EAAC;IACnB,YAAY,IAAA,uKAAI,EAAC;IACjB,kBAAkB,IAAA,uKAAI,EAAC;IACvB,kBAAkB,IAAA,6KAAO,EAAC,sBAAsB,OAAO,GAAG,OAAO,CAAC;IAClE,oBAAoB,IAAA,6KAAO,EAAC,uBAAuB,OAAO,GAAG,OAAO,CAAC;IACrE,kBAAkB,IAAA,6KAAO,EAAC,sBAAsB,OAAO,GAAG,OAAO,CAAC;IAClE,mBAAmB,IAAA,6KAAO,EAAC,uBAAuB,OAAO,GAAG,OAAO,CAAC;IACpE,mBAAmB,IAAA,6KAAO,EAAC,uBAAuB,OAAO,GAAG,OAAO,CAAC;IAEpE,wBAAwB;IACxB,QAAQ,IAAA,uKAAI,EAAC,UAAU,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IAExD,oBAAoB;IACpB,qBAAqB,IAAA,6KAAO,EAAC,wBAAwB,OAAO,CAAC;IAC7D,qBAAqB,IAAA,6KAAO,EAAC,wBAAwB,OAAO,CAAC;IAC7D,oBAAoB,IAAA,uKAAI,EAAC,uBAAuB,OAAO,CAAC;QACtD,gBAAgB;QAChB,YAAY;QACZ,YAAY;QACZ,aAAa;QACb,cAAc;QACd,gBAAgB;IAClB;IAEA,iBAAiB;IACjB,iBAAiB,IAAA,6KAAO,EAAC,oBAAoB,OAAO,GAAG,OAAO,CAAC;IAC/D,sBAAsB,IAAA,iLAAS,EAAC;IAEhC,uBAAuB;IACvB,iBAAiB,IAAA,uKAAI,EAAC;IAEtB,oBAAoB;IACpB,OAAO,IAAA,6KAAO,EAAC,SAAS,OAAO,CAAC,GAAG,OAAO;IAE1C,0BAA0B;IAC1B,MAAM,IAAA,6KAAO,EAAC,QAAQ;QAAE,QAAQ;IAAG,GAAG,OAAO,GAAG,OAAO,CAAC;IACxD,QAAQ,IAAA,6KAAO,EAAC,UAAU;QAAE,QAAQ;IAAG,GAAG,OAAO,GAAG,OAAO,CAAC;IAC5D,gBAAgB,IAAA,iLAAS,EAAC;IAC1B,UAAU,IAAA,iLAAS,EAAC;IACpB,UAAU,IAAA,6KAAO,EAAC;IAClB,YAAY,IAAA,iLAAS,EAAC,eAAe,UAAU;IAE/C,aAAa;IACb,WAAW,IAAA,iLAAS,EAAC,cAAc,UAAU;IAC7C,WAAW,IAAA,iLAAS,EAAC,cAAc,UAAU;AAC/C,GAAG,CAAC,QAAU,CAAC;QACb,aAAa,IAAA,gKAAK,EAAC,sBAAsB,EAAE,CAAC,MAAM,QAAQ;QAC1D,UAAU,IAAA,gKAAK,EAAC,mBAAmB,EAAE,CAAC,MAAM,KAAK;QACjD,eAAe,IAAA,gKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,eAAe;QACrE,UAAU,IAAA,gKAAK,EAAC,mBAAmB,EAAE,CAAC,MAAM,KAAK;QACjD,UAAU,IAAA,gKAAK,EAAC,mBAAmB,EAAE,CAAC,MAAM,UAAU;QACtD,SAAS,IAAA,gKAAK,EAAC,kBAAkB,EAAE,CAAC,MAAM,IAAI;QAC9C,WAAW,IAAA,gKAAK,EAAC,oBAAoB,EAAE,CAAC,MAAM,MAAM;QACpD,eAAe,IAAA,gKAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,UAAU;QACjE,YAAY,IAAA,+JAAK,EAAC,8BAA8B,mJAAG,CAAC,EAAE,MAAM,UAAU,CAAC,KAAK,CAAC;IAC/E,CAAC;AAEM,MAAM,eAAe,IAAA,gKAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO;IAC1B,eAAe,IAAA,6KAAO,EAAC,kBAAkB,OAAO,GAAG,OAAO,CAAC;IAC3D,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,GAAG,OAAO,CAAC;IACvD,gBAAgB,IAAA,iLAAS,EAAC,oBAAoB,UAAU;IACxD,WAAW,IAAA,iLAAS,EAAC,cAAc,UAAU;AAC/C,GAAG,CAAC,QAAU,CAAC;QACb,aAAa,IAAA,sKAAW,EAAC,+BAA+B,EAAE,CAAC,MAAM,MAAM,EAAE,MAAM,IAAI;IACrF,CAAC;AAEM,MAAM,mBAAmB,IAAA,gKAAO,EAAC,qBAAqB;IAC3D,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO,GAAG,KAAK;IAClC,QAAQ,IAAA,6KAAO,EAAC,UAAU,OAAO;IACjC,aAAa,IAAA,uKAAI,EAAC,eAAe,OAAO;IACxC,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO,GAAG,KAAK,GAAuC,OAAO,CAAC;IACrF,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,MAAM;IACnE,CAAC;AAEM,MAAM,iBAAiB,IAAA,gKAAO,EAAC,mBAAmB;IACvD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO;IAC1C,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO;IACtC,eAAe,IAAA,uKAAI,EAAC,kBAAkB,OAAO,GAAG,KAAK;IACrD,WAAW,IAAA,uKAAI,EAAC;IAChB,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO,GAAG,KAAK,GAAuC,OAAO,CAAC;IACrF,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,aAAa,IAAA,iLAAS,EAAC;AACzB,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,MAAM;IACjE,CAAC;AAEM,MAAM,gBAAgB,IAAA,gKAAO,EAAC,iBAAiB;IACpD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO,GAAG,KAAK;IAClC,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO;IACtC,eAAe,IAAA,uKAAI,EAAC,kBAAkB,OAAO,GAAG,KAAK;IACrD,WAAW,IAAA,uKAAI,EAAC;IAChB,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO,GAAG,KAAK;IACtC,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO;IAC1C,SAAS,IAAA,iLAAS,EAAC,YAAY,OAAO;IACtC,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC;IACnD,aAAa,IAAA,iLAAS,EAAC;IACvB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,MAAM;QAC7D,WAAW,IAAA,gKAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,MAAM;QAC5D,kBAAkB,IAAA,gKAAK,EAAC,qCAAqC,EAAE,CAAC,MAAM,MAAM,EAAE,MAAM,OAAO;IAC7F,CAAC;AAEM,MAAM,qBAAqB,IAAA,gKAAO,EAAC,uBAAuB;IAC/D,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,QAAQ,IAAA,6KAAO,EAAC,UAAU,OAAO;IAEjC,gGAAgG;IAChG,QAAQ,IAAA,uKAAI,EAAC,UAAU,KAAK,GAA2C,OAAO,CAAC;IAC/E,kBAAkB,IAAA,uKAAI,EAAC;IAEvB,gFAAgF;IAChF,YAAY,IAAA,uKAAI,EAAC,eAAe,KAAK;IACrC,eAAe,IAAA,uKAAI,EAAC,kBAAkB,OAAO;IAC7C,cAAc,IAAA,6KAAO,EAAC,iBAAiB;QAAE,WAAW;QAAI,OAAO;IAAE;IACjE,cAAc,IAAA,6KAAO,EAAC,iBAAiB;QAAE,WAAW;QAAI,OAAO;IAAE;IAEjE,4DAA4D;IAC5D,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO,GAAG,KAAK,GAA8F,OAAO,CAAC;IAE5I,eAAe,IAAA,6KAAO,EAAC,kBAAkB,OAAO;IAChD,iBAAiB,IAAA,uKAAI,EAAC;IACtB,YAAY,IAAA,uKAAI,EAAC;IAEjB,2EAA2E;IAC3E,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,YAAY,IAAA,iLAAS,EAAC;IACtB,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,YAAY,IAAA,iLAAS,EAAC;IACtB,iBAAiB,IAAA,uKAAI,EAAC;IACtB,aAAa,IAAA,6KAAO,EAAC,gBAAgB,UAAU,CAAC,IAAM,MAAM,EAAE;IAE9D,iDAAiD;IACjD,WAAW,IAAA,6KAAO,EAAC,cAAc;QAAE,WAAW;QAAI,OAAO;IAAE;IAE3D,aAAa,IAAA,iLAAS,EAAC,gBAAgB,OAAO,GAAG,UAAU;IAC3D,aAAa,IAAA,iLAAS,EAAC;IACvB,aAAa,IAAA,iLAAS,EAAC;IACvB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,mCAAmC,EAAE,CAAC,MAAM,MAAM;QACnE,WAAW,IAAA,gKAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,MAAM;QAClE,WAAW,IAAA,gKAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,MAAM;QAClE,eAAe,IAAA,gKAAK,EAAC,uCAAuC,EAAE,CAAC,MAAM,UAAU;QAC/E,iBAAiB,IAAA,gKAAK,EAAC,yCAAyC,EAAE,CAAC,MAAM,MAAM,EAAE,MAAM,MAAM;QAC7F,aAAa,IAAA,+JAAK,EAAC,6BAA6B,mJAAG,CAAC,EAAE,MAAM,MAAM,CAAC,QAAQ,CAAC;IAC9E,CAAC;AAEM,MAAM,WAAW,IAAA,gKAAO,EAAC,YAAY;IAC1C,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,UAAU,CAAC,IAAM,MAAM,EAAE;IACpD,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO,GAAG,KAAK;IAClC,SAAS,IAAA,uKAAI,EAAC,WAAW,OAAO;IAChC,SAAS,IAAA,uKAAI,EAAC,WAAW,OAAO;IAChC,OAAO,IAAA,uKAAI,EAAC;IACZ,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO,GAAG,KAAK,GAAkD,OAAO,CAAC;IAChG,UAAU,IAAA,uKAAI,EAAC,YAAY,KAAK,GAAyC,OAAO,CAAC;IACjF,YAAY,IAAA,uKAAI,EAAC;IACjB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,MAAM;QACxD,WAAW,IAAA,gKAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,MAAM;QACvD,SAAS,IAAA,gKAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;IACnD,CAAC;AAEM,MAAM,UAAU,IAAA,gKAAO,EAAC,WAAW;IACxC,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAClE,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO,GAAG,KAAK;IAClC,OAAO,IAAA,uKAAI,EAAC,SAAS,OAAO;IAC5B,aAAa,IAAA,uKAAI,EAAC,eAAe,OAAO;IACxC,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;IACrD,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,OAAO,CAAC;IAC7C,UAAU,IAAA,uKAAI,EAAC,YAAY,OAAO;IAElC,yBAAyB;IACzB,UAAU,IAAA,uKAAI,EAAC,YAAY,KAAK;IAChC,SAAS,IAAA,uKAAI,EAAC;IACd,MAAM,IAAA,uKAAI,EAAC,QAAQ,KAAK;IACxB,OAAO,IAAA,yKAAK,EAAC,SAAS,KAAK;IAC3B,QAAQ,IAAA,yKAAK,EAAC,UAAU,KAAK;IAE7B,kBAAkB;IAClB,cAAc,IAAA,uKAAI,EAAC,iBAAiB,KAAK;IACzC,YAAY,IAAA,6KAAO,EAAC;IACpB,SAAS,IAAA,6KAAO,EAAC;IACjB,WAAW,IAAA,uKAAI,EAAC;IAChB,SAAS,IAAA,uKAAI,EAAC;IAEd,4CAA4C;IAC5C,kBAAkB,IAAA,uKAAI,EAAC;IACvB,cAAc,IAAA,6KAAO,EAAC;IACtB,iBAAiB,IAAA,6KAAO,EAAC;IACzB,YAAY,IAAA,6KAAO,EAAC;IACpB,QAAQ,IAAA,uKAAI,EAAC;IACb,cAAc,IAAA,6KAAO,EAAC;IAEtB,gBAAgB;IAChB,SAAS,IAAA,uKAAI,EAAC;IACd,UAAU,IAAA,uKAAI,EAAC;IACf,WAAW,IAAA,uKAAI,EAAC,cAAc,KAAK;IACnC,aAAa,IAAA,uKAAI,EAAC;IAClB,OAAO,IAAA,6KAAO,EAAC,SAAS,OAAO,GAAG,OAAO,CAAC;IAC1C,WAAW,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IAClD,OAAO,IAAA,6KAAO,EAAC,SAAS,OAAO,GAAG,OAAO,CAAC;IAC1C,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;IACrD,eAAe,IAAA,6KAAO,EAAC;IACvB,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,GAAG,OAAO,CAAC;IACvD,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO,GAAG,KAAK,GAAwC,OAAO,CAAC;IACtF,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO,GAAG,MAAM;IACnC,cAAc,IAAA,uKAAI,EAAC;IACnB,qBAAqB,IAAA,uKAAI,EAAC;IAC1B,mBAAmB,IAAA,uKAAI,EAAC,wBAAwB,KAAK;IACrD,WAAW,IAAA,uKAAI,EAAC;IAChB,cAAc,IAAA,uKAAI,EAAC;IAEnB,iBAAiB;IACjB,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;IACrD,iBAAiB,IAAA,iLAAS,EAAC;IAE3B,gCAAgC;IAChC,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,YAAY,IAAA,iLAAS,EAAC;IACtB,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,YAAY,IAAA,iLAAS,EAAC;IACtB,iBAAiB,IAAA,uKAAI,EAAC;IACtB,UAAU,IAAA,6KAAO,EAAC,YAAY,OAAO,GAAG,OAAO,CAAC;IAChD,eAAe,IAAA,iLAAS,EAAC;IACzB,WAAW,IAAA,iLAAS,EAAC;IAErB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,aAAa,IAAA,gKAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,QAAQ;QAC7D,WAAW,IAAA,gKAAK,EAAC,sBAAsB,EAAE,CAAC,MAAM,MAAM;QACtD,aAAa,IAAA,gKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,QAAQ;QAC5D,SAAS,IAAA,gKAAK,EAAC,oBAAoB,EAAE,CAAC,MAAM,IAAI;QAChD,eAAe,IAAA,gKAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,UAAU;QACnE,aAAa,IAAA,gKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,QAAQ;QAC5D,cAAc,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,SAAS;IAClE,CAAC;AAEM,MAAM,mBAAmB,IAAA,gKAAO,EAAC,qBAAqB;IAC3D,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,QAAQ,EAAE;IACtE,SAAS,IAAA,6KAAO,EAAC,YAAY,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAChE,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAClE,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO;IAC1C,eAAe,IAAA,6KAAO,EAAC,kBAAkB,OAAO,GAAG,UAAU,CAAC,IAAM,iBAAiB,EAAE;IACvF,aAAa,IAAA,iLAAS,EAAC,gBAAgB,OAAO,GAAG,UAAU;AAC7D,GAAG,CAAC,QAAU,CAAC;QACb,YAAY,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,OAAO;QACnE,cAAc,IAAA,gKAAK,EAAC,oCAAoC,EAAE,CAAC,MAAM,SAAS;IAC5E,CAAC;AAEM,MAAM,iBAAiB,IAAA,gKAAO,EAAC,mBAAmB;IACvD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,QAAQ,EAAE;IACtE,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,QAAQ,IAAA,6KAAO,EAAC,UAAU,OAAO;IACjC,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO;IAC9B,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO,GAAG,KAAK,GAAwC,OAAO,CAAC;IACtF,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,GAAG,OAAO,CAAC;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,yBAAyB,IAAA,sKAAW,EAAC,2CAA2C,EAAE,CAAC,MAAM,SAAS,EAAE,MAAM,MAAM;IAClH,CAAC;AAEM,MAAM,eAAe,IAAA,gKAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,QAAQ,EAAE;IACtE,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,MAAM;QAC7D,uBAAuB,IAAA,sKAAW,EAAC,yCAAyC,EAAE,CAAC,MAAM,SAAS,EAAE,MAAM,MAAM;IAC9G,CAAC;AAEM,MAAM,iBAAiB,IAAA,gKAAO,EAAC,mBAAmB;IACvD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,QAAQ,EAAE;IACtE,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,UAAU,IAAA,6KAAO,EAAC,aAAa,UAAU,CAAC,IAAW,eAAe,EAAE;IACtE,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO;IAC1B,QAAQ,IAAA,6KAAO,EAAC;IAChB,WAAW,IAAA,uKAAI,EAAC,cAAc,KAAK;IACnC,SAAS,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,OAAO,CAAC;IAC9C,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;IACrD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD;AAEO,MAAM,UAAU,IAAA,gKAAO,EAAC,WAAW;IACxC,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO;IAC1B,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO,GAAG,MAAM;IACnC,YAAY,IAAA,uKAAI,EAAC;IACjB,SAAS,IAAA,uKAAI,EAAC;IACd,aAAa,IAAA,6KAAO,EAAC;IACrB,YAAY,IAAA,uKAAI,EAAC;IACjB,mBAAmB,IAAA,uKAAI,EAAC;IACxB,UAAU,IAAA,uKAAI,EAAC;IACf,YAAY,IAAA,uKAAI,EAAC;IACjB,WAAW,IAAA,6KAAO,EAAC,cAAc;QAAE,WAAW;QAAI,OAAO;IAAE;IAC3D,eAAe,IAAA,6KAAO,EAAC,kBAAkB,OAAO,CAAC;IACjD,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,GAAG,OAAO,CAAC;IACvD,iBAAiB,IAAA,6KAAO,EAAC,qBAAqB,OAAO,GAAG,OAAO,CAAC;IAChE,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;IACrD,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO,GAAG,KAAK,GAAwC,OAAO,CAAC;IAEtF,0BAA0B;IAC1B,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,YAAY,IAAA,iLAAS,EAAC;IACtB,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,YAAY,IAAA,iLAAS,EAAC;IACtB,iBAAiB,IAAA,uKAAI,EAAC;IACtB,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,GAAG,OAAO,CAAC;IACvD,mBAAmB,IAAA,uKAAI,EAAC;IACxB,WAAW,IAAA,iLAAS,EAAC;IAErB,4CAA4C;IAC5C,SAAS,IAAA,uKAAI,EAAC;IACd,YAAY,IAAA,uKAAI,EAAC;IACjB,UAAU,IAAA,uKAAI,EAAC;IAEf,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,SAAS,IAAA,gKAAK,EAAC,oBAAoB,EAAE,CAAC,MAAM,IAAI;QAChD,WAAW,IAAA,gKAAK,EAAC,sBAAsB,EAAE,CAAC,MAAM,MAAM;QACtD,eAAe,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,UAAU;QAClE,aAAa,IAAA,gKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,QAAQ;QAC5D,aAAa,IAAA,gKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,UAAU;QAC9D,gBAAgB,IAAA,gKAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,WAAW;QACtE,cAAc,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,SAAS;QAChE,YAAY,IAAA,gKAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,OAAO;IAC3D,CAAC;AAEM,MAAM,gBAAgB,IAAA,gKAAO,EAAC,kBAAkB;IACrD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,UAAU,CAAC,IAAM,QAAQ,EAAE;IACpE,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,QAAQ,IAAA,6KAAO,EAAC,UAAU,OAAO;IACjC,aAAa,IAAA,uKAAI,EAAC,gBAAgB,OAAO;IACzC,YAAY,IAAA,uKAAI,EAAC,eAAe,OAAO;IACvC,cAAc,IAAA,6KAAO,EAAC,kBAAkB,OAAO,GAAG,OAAO,CAAC;IAC1D,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO,GAAG,KAAK,GAAwC,OAAO,CAAC;IAEtF,0BAA0B;IAC1B,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,YAAY,IAAA,iLAAS,EAAC;IACtB,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,YAAY,IAAA,iLAAS,EAAC;IACtB,iBAAiB,IAAA,uKAAI,EAAC;IAEtB,oDAAoD;IACpD,cAAc,IAAA,uKAAI,EAAC,iBAAiB,KAAK;IAEzC,YAAY,IAAA,iLAAS,EAAC,eAAe,OAAO,GAAG,UAAU;AAC3D,GAAG,CAAC,QAAU,CAAC;QACb,aAAa,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,QAAQ;QACpE,wBAAwB,IAAA,sKAAW,EAAC,yCAAyC,EAAE,CAAC,MAAM,QAAQ,EAAE,MAAM,MAAM;QAC5G,aAAa,IAAA,gKAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,YAAY;IACzE,CAAC;AAEM,MAAM,cAAc,IAAA,gKAAO,EAAC,gBAAgB;IACjD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACtE,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACxE,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,eAAe,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,UAAU;QACxE,yBAAyB,IAAA,sKAAW,EAAC,8CAA8C,EAAE,CAAC,MAAM,UAAU,EAAE,MAAM,WAAW;IAC3H,CAAC;AAEM,MAAM,gBAAgB,IAAA,gKAAO,EAAC,iBAAiB;IACpD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,gBAAgB,IAAA,6KAAO,EAAC,mBAAmB,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9E,gBAAgB,IAAA,6KAAO,EAAC,mBAAmB,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9E,eAAe,IAAA,iLAAS,EAAC,mBAAmB,OAAO,GAAG,UAAU;IAChE,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD;AAEO,MAAM,WAAW,IAAA,gKAAO,EAAC,YAAY;IAC1C,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,gBAAgB,IAAA,6KAAO,EAAC,mBAAmB,OAAO,GAAG,UAAU,CAAC,IAAM,cAAc,EAAE;IACtF,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAClE,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACxE,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO;IAC1B,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,OAAO,CAAC;IAC7C,aAAa,IAAA,iLAAS,EAAC;IACvB,QAAQ,IAAA,iLAAS,EAAC;IAClB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,mBAAmB,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,cAAc;QAChF,aAAa,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,QAAQ;QAC9D,gBAAgB,IAAA,gKAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,WAAW;QACvE,cAAc,IAAA,gKAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,SAAS;QACjE,WAAW,IAAA,gKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,MAAM;IAC1D,CAAC;AAGM,MAAM,mBAAmB,IAAA,gKAAO,EAAC,qBAAqB;IAC3D,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,SAAS,EAAE,EAAE;QAAE,UAAU;IAAU;IAC/F,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACtF,OAAO,IAAA,6KAAO,EAAC,SAAS;QAAE,QAAQ;IAAG,GAAG,OAAO;IAC/C,WAAW,IAAA,iLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,gBAAgB,IAAA,gKAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,SAAS,EAAE,MAAM,MAAM;IAC1F,CAAC;AAGM,MAAM,gBAAgB,IAAA,gKAAO,EAAC,iBAAiB;IACpD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO,GAAG,KAAK;IAClC,OAAO,IAAA,uKAAI,EAAC,SAAS,OAAO;IAC5B,SAAS,IAAA,uKAAI,EAAC,WAAW,OAAO;IAChC,WAAW,IAAA,uKAAI,EAAC;IAChB,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,OAAO,CAAC;IAC7C,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,MAAM;QAC7D,WAAW,IAAA,gKAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,MAAM;QAC7D,cAAc,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,SAAS;IACxE,CAAC;AAGM,MAAM,eAAe,IAAA,gKAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAClE,cAAc,IAAA,uKAAI,EAAC,iBAAiB,OAAO;IAC3C,iBAAiB,IAAA,uKAAI,EAAC;IACtB,OAAO,IAAA,uKAAI,EAAC,SAAS,OAAO;IAC5B,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO;IAC1B,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO,GAAG,MAAM;IACnC,cAAc,IAAA,uKAAI,EAAC;IACnB,iBAAiB,IAAA,uKAAI,EAAC;IACtB,WAAW,IAAA,uKAAI,EAAC;IAChB,cAAc,IAAA,uKAAI,EAAC;IAEnB,6BAA6B;IAC7B,YAAY,IAAA,uKAAI,EAAC,eAAe,OAAO,GAAG,KAAK,GAAmF,OAAO,CAAC;IAC1I,YAAY,IAAA,uKAAI,EAAC;IACjB,gBAAgB,IAAA,uKAAI,EAAC;IACrB,UAAU,IAAA,uKAAI,EAAC,YAAY,OAAO,GAAG,OAAO,CAAC;IAE7C,uDAAuD;IACvD,aAAa,IAAA,uKAAI,EAAC,eAAe,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IAClE,YAAY,IAAA,uKAAI,EAAC,cAAc,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IAChE,YAAY,IAAA,uKAAI,EAAC,cAAc,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IAChE,UAAU,IAAA,uKAAI,EAAC;IACf,QAAQ,IAAA,uKAAI,EAAC;IACb,UAAU,IAAA,uKAAI,EAAC;IACf,UAAU,IAAA,uKAAI,EAAC,YAAY,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IAE5D,sDAAsD;IACtD,cAAc,IAAA,uKAAI,EAAC;IACnB,eAAe,IAAA,uKAAI,EAAC;IACpB,cAAc,IAAA,6KAAO,EAAC;IACtB,YAAY,IAAA,uKAAI,EAAC,eAAe,KAAK;IACrC,YAAY,IAAA,uKAAI,EAAC,eAAe,KAAK;IAErC,0DAA0D;IAC1D,iBAAiB,IAAA,uKAAI,EAAC;IACtB,kBAAkB,IAAA,6KAAO,EAAC;IAE1B,cAAc;IACd,gBAAgB,IAAA,uKAAI,EAAC,mBAAmB,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IAEzE,sBAAsB;IACtB,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,OAAO,IAAA,6KAAO,EAAC,SAAS,OAAO,GAAG,OAAO,CAAC;IAC1C,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;IACrD,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC;IACnD,eAAe,IAAA,6KAAO,EAAC,kBAAkB,OAAO,GAAG,OAAO,CAAC;IAC3D,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;IACrD,gBAAgB,IAAA,iLAAS,EAAC,oBAAoB,OAAO,GAAG,UAAU;IAClE,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO,GAAG,KAAK,GAAwC,OAAO,CAAC;IAEtF,iBAAiB;IACjB,iBAAiB,IAAA,6KAAO,EAAC,oBAAoB,OAAO,GAAG,OAAO,CAAC;IAC/D,iBAAiB,IAAA,iLAAS,EAAC;IAC3B,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO,GAAG,OAAO,CAAC;IAEzD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,iBAAiB,IAAA,gKAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,YAAY;QAC1E,oBAAoB,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,eAAe;QACnF,eAAe,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,UAAU;QAClE,WAAW,IAAA,gKAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,MAAM;QAC5D,aAAa,IAAA,gKAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,QAAQ;QAChE,oBAAoB,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,eAAe;QAClF,mBAAmB,IAAA,gKAAK,EAAC,mCAAmC,EAAE,CAAC,MAAM,cAAc;QACnF,SAAS,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,IAAI;QACtD,iBAAiB,IAAA,gKAAK,EAAC,mCAAmC,EAAE,CAAC,MAAM,YAAY;IACjF,CAAC;AAGM,MAAM,eAAe,IAAA,gKAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,UAAU,CAAC,IAAM,aAAa,EAAE;IACzE,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,UAAU,IAAA,6KAAO,EAAC,aAAa,UAAU,CAAC,IAAW,aAAa,EAAE;IACpE,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO;IAC1B,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO,GAAG,MAAM;IACnC,iBAAiB,IAAA,uKAAI,EAAC;IACtB,WAAW,IAAA,uKAAI,EAAC,cAAc,KAAK;IACnC,SAAS,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,OAAO,CAAC;IAC9C,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO,GAAG,OAAO,CAAC;IACzD,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;IACrD,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;IACrD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IAEvD,oBAAoB;IACpB,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO,GAAG,KAAK,GAAwC,OAAO,CAAC;IACtF,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,YAAY,IAAA,iLAAS,EAAC;IACtB,YAAY,IAAA,iLAAS,EAAC;AACxB,GAAG,CAAC,QAAU,CAAC;QACb,aAAa,IAAA,gKAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,QAAQ;QACnE,cAAc,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,SAAS;QACtE,SAAS,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,IAAI;QACtD,iBAAiB,IAAA,gKAAK,EAAC,mCAAmC,EAAE,CAAC,MAAM,YAAY;QAC/E,WAAW,IAAA,gKAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,MAAM;IAC9D,CAAC;AAGM,MAAM,kBAAkB,IAAA,gKAAO,EAAC,oBAAoB;IACzD,MAAM,IAAA,uKAAI,EAAC,QAAQ,UAAU;IAC7B,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO;IAC1B,aAAa,IAAA,uKAAI,EAAC,eAAe,OAAO;IACxC,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO;IAC1B,OAAO,IAAA,uKAAI,EAAC,SAAS,OAAO,GAAG,OAAO,CAAC;IACvC,YAAY,IAAA,uKAAI,EAAC;IACjB,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,GAAG,OAAO,CAAC;IACvD,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC;IACnD,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC;IACnD,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,eAAe,IAAA,gKAAK,EAAC,oCAAoC,EAAE,CAAC,MAAM,UAAU;IAC9E,CAAC;AAGM,MAAM,aAAa,IAAA,gKAAO,EAAC,eAAe;IAC/C,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,WAAW,IAAA,uKAAI,EAAC,cAAc,OAAO,GAAG,KAAK;IAC7C,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD;AAGO,MAAM,eAAe,IAAA,gKAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,cAAc,IAAA,uKAAI,EAAC,iBAAiB,OAAO,GAAG,KAAK;IACnD,YAAY,IAAA,uKAAI,EAAC,eAAe,OAAO,GAAG,KAAK;IAC/C,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO;IACtC,OAAO,IAAA,uKAAI,EAAC,SAAS,OAAO;IAC5B,aAAa,IAAA,uKAAI,EAAC;IAClB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,MAAM;IAC/D,CAAC;AAKM,MAAM,aAAa,IAAA,gKAAO,EAAC,eAAe;IAC/C,UAAU,IAAA,6KAAO,EAAC,aAAa,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC1E,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,SAAS,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,OAAO,CAAC;IAC9C,kBAAkB,IAAA,6KAAO,EAAC,qBAAqB,OAAO,GAAG,OAAO,CAAC;IACjE,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO,GAAG,OAAO,CAAC;IACzC,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,sKAAW,EAAC,2BAA2B,EAAE,CAAC,MAAM,MAAM;QACjE,WAAW,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,MAAM;IAC5D,CAAC;AAGM,MAAM,yBAAyB,IAAA,gKAAO,EAAC,4BAA4B;IACxE,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,MAAM,IAAA,uKAAI,EAAC,QAAQ,OAAO;IAC1B,SAAS,IAAA,uKAAI,EAAC,WAAW,KAAK;IAC9B,aAAa,IAAA,uKAAI,EAAC;IAClB,iBAAiB,IAAA,6KAAO,EAAC,qBAAqB,UAAU,CAAC,IAAM,MAAM,EAAE;IACvE,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,UAAU,IAAA,iLAAS,EAAC;IACpB,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO,GAAG,OAAO,CAAC;AAC3C,GAAG,CAAC,QAAU,CAAC;QACb,SAAS,IAAA,gKAAK,EAAC,sBAAsB,EAAE,CAAC,MAAM,IAAI;QAClD,WAAW,IAAA,gKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,MAAM;QACxD,cAAc,IAAA,gKAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,eAAe;IACzE,CAAC;AAGM,MAAM,qBAAqB,IAAA,gKAAO,EAAC,wBAAwB;IAChE,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,qBAAqB,IAAA,6KAAO,EAAC,yBAAyB,OAAO,GAC1D,UAAU,CAAC,IAAM,uBAAuB,EAAE;IAC7C,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,UAAU,CAAC,IAAM,WAAW,QAAQ;IAC7E,WAAW,IAAA,uKAAI,EAAC,aAAa,OAAO;IACpC,QAAQ,IAAA,6KAAO,EAAC,UAAU,OAAO;IACjC,eAAe,IAAA,6KAAO,EAAC,kBAAkB,OAAO;IAChD,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO;IAC9C,MAAM,IAAA,uKAAI,EAAC;IACX,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,aAAa,IAAA,gKAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,mBAAmB;QACxE,WAAW,IAAA,gKAAK,EAAC,sBAAsB,EAAE,CAAC,MAAM,QAAQ;QACxD,cAAc,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,SAAS;QAChE,aAAa,IAAA,+JAAK,EAAC,uBAAuB,mJAAG,CAAC,EAAE,MAAM,MAAM,CAAC,IAAI,CAAC;IACpE,CAAC;AAGM,MAAM,2BAA2B,IAAA,gKAAO,EAAC,8BAA8B;IAC5E,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO;IAC9B,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;IACrD,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,QAAQ,IAAA,uKAAI,EAAC,UAAU,KAAK;IAC5B,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,aAAa,IAAA,iLAAS,EAAC;AACzB;AAGO,MAAM,uBAAuB,IAAA,gKAAO,EAAC,yBAAyB;IACnE,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE,MAAM;IACtE,aAAa,IAAA,uKAAI,EAAC,gBAAgB,KAAK,GAAG,OAAO;IACjD,gBAAgB,IAAA,uKAAI,EAAC,mBAAmB,KAAK,GAAG,OAAO;IACvD,YAAY,IAAA,uKAAI,EAAC,eAAe,OAAO,GAAG,KAAK,GAA0C,OAAO,CAAC;IACjG,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,qCAAqC,EAAE,CAAC,MAAM,MAAM;IACvE,CAAC;AAGM,MAAM,sBAAsB,IAAA,gKAAO,EAAC,yBAAyB;IAClE,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,cAAc,IAAA,iLAAS,EAAC,iBAAiB,OAAO,GAAG,UAAU;IAC7D,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO,GAAG,OAAO,CAAC;IACzD,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO,GAAG,OAAO,CAAC;IACzD,gBAAgB,IAAA,6KAAO,EAAC,mBAAmB,OAAO,GAAG,OAAO,CAAC;IAC7D,eAAe,IAAA,iLAAS,EAAC;IACzB,iBAAiB,IAAA,6KAAO,EAAC,oBAAoB,OAAO,GAAG,OAAO,CAAC;IAC/D,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,aAAa,IAAA,sKAAW,EAAC,gCAAgC,EAAE,CAAC,MAAM,MAAM,EAAE,MAAM,YAAY;QAC5F,WAAW,IAAA,gKAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,MAAM;IAChE,CAAC;AAGM,MAAM,YAAY,IAAA,gKAAO,EAAC,aAAa;IAC5C,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACtE,gBAAgB,IAAA,6KAAO,EAAC,oBAAoB,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC/E,cAAc,IAAA,6KAAO,EAAC,iBAAiB;QAAE,QAAQ;IAAG,GAAG,OAAO,GAAG,MAAM;IACvE,QAAQ,IAAA,6KAAO,EAAC,UAAU;QAAE,QAAQ;IAAG,GAAG,OAAO,GAAG,OAAO,CAAC;IAC5D,eAAe,IAAA,6KAAO,EAAC,kBAAkB,OAAO,GAAG,OAAO,CAAC;IAC3D,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,aAAa,IAAA,gKAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,UAAU;QACnE,aAAa,IAAA,sKAAW,EAAC,kCAAkC,EAAE,CAAC,MAAM,cAAc;QAClF,iBAAiB,IAAA,gKAAK,EAAC,sBAAsB,EAAE,CAAC,MAAM,YAAY;IACpE,CAAC;AAGM,MAAM,QAAQ,IAAA,gKAAO,EAAC,SAAS;IACpC,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,UAAU,IAAA,6KAAO,EAAC,aAAa;QAAE,QAAQ;IAAG,GAAG,OAAO;IACtD,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO;IAC5C,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO,GAAG,OAAO,CAAC;IACzD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO;IAC1C,SAAS,IAAA,iLAAS,EAAC,YAAY,OAAO;IACtC,QAAQ,IAAA,6KAAO,EAAC,UAAU;QAAE,QAAQ;IAAG,GAAG,OAAO,GAAG,OAAO,CAAC;IAC5D,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,MAAM;IACvD,CAAC;AAGM,MAAM,eAAe,IAAA,gKAAO,EAAC,gBAAgB;IAClD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,MAAM,IAAA,6KAAO,EAAC,QAAQ;QAAE,QAAQ;IAAI,GAAG,OAAO,GAAG,MAAM;IACvD,MAAM,IAAA,6KAAO,EAAC,QAAQ;QAAE,QAAQ;IAAI,GAAG,OAAO;IAC9C,aAAa,IAAA,uKAAI,EAAC,eAAe,OAAO;IACxC,MAAM,IAAA,6KAAO,EAAC,QAAQ;QAAE,QAAQ;IAAG,GAAG,OAAO;IAC7C,aAAa,IAAA,6KAAO,EAAC,eAAe,OAAO;IAC3C,UAAU,IAAA,6KAAO,EAAC,YAAY;QAAE,QAAQ;IAAG,GAAG,OAAO;IACrD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,SAAS,IAAA,gKAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,IAAI;IACvD,CAAC;AAGM,MAAM,mBAAmB,IAAA,gKAAO,EAAC,qBAAqB;IAC3D,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,eAAe,IAAA,6KAAO,EAAC,kBAAkB,OAAO,GAAG,UAAU,CAAC,IAAM,aAAa,EAAE;IACnF,UAAU,IAAA,6KAAO,EAAC,YAAY,OAAO,GAAG,OAAO,CAAC;IAChD,YAAY,IAAA,iLAAS,EAAC;IACtB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,MAAM;QACjE,kBAAkB,IAAA,gKAAK,EAAC,wCAAwC,EAAE,CAAC,MAAM,aAAa;IACxF,CAAC;AAGM,MAAM,YAAY,IAAA,gKAAO,EAAC,aAAa;IAC5C,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,MAAM,IAAA,6KAAO,EAAC,QAAQ;QAAE,QAAQ;IAAI,GAAG,OAAO;IAC9C,aAAa,IAAA,uKAAI,EAAC;IAClB,MAAM,IAAA,6KAAO,EAAC,QAAQ;QAAE,QAAQ;IAAG,GAAG,OAAO,CAAC;IAC9C,QAAQ,IAAA,6KAAO,EAAC,UAAU;QAAE,QAAQ;IAAG,GAAG,OAAO,GAAG,OAAO,CAAC;IAC5D,QAAQ,IAAA,6KAAO,EAAC;IAChB,iBAAiB,IAAA,6KAAO,EAAC;IACzB,cAAc,IAAA,6KAAO,EAAC,iBAAiB;QAAE,QAAQ;IAAG,GAAG,MAAM;IAC7D,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO;IAC1C,SAAS,IAAA,iLAAS,EAAC,YAAY,OAAO;IACtC,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO,GAAG,OAAO,CAAC;IACxC,SAAS,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,OAAO,CAAC;IAC9C,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,MAAM;QACzD,iBAAiB,IAAA,gKAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,YAAY;IAC7E,CAAC;AAGM,MAAM,oBAAoB,IAAA,gKAAO,EAAC,sBAAsB;IAC7D,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE,MAAM;IACtE,QAAQ,IAAA,uKAAI,EAAC;IACb,OAAO,IAAA,6KAAO,EAAC,SAAS;QAAE,QAAQ;IAAG,GAAG,OAAO,CAAC;IAChD,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,CAAC;IAC7C,iBAAiB,IAAA,6KAAO,EAAC,oBAAoB,OAAO,CAAC;IACrD,WAAW,IAAA,uKAAI,EAAC;IAChB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,sKAAW,EAAC,kCAAkC,EAAE,CAAC,MAAM,MAAM;IAC1E,CAAC;AAGM,MAAM,WAAW,IAAA,gKAAO,EAAC,YAAY;IAC1C,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE,MAAM;IACtE,YAAY,IAAA,uKAAI,EAAC;IACjB,KAAK,IAAA,uKAAI,EAAC;IACV,cAAc,IAAA,6KAAO,EAAC,iBAAiB;QAAE,QAAQ;IAAG;IACpD,cAAc,IAAA,uKAAI,EAAC;IACnB,iBAAiB,IAAA,uKAAI,EAAC;IACtB,cAAc,IAAA,uKAAI,EAAC;IACnB,aAAa,IAAA,uKAAI,EAAC;IAClB,UAAU,IAAA,6KAAO,EAAC,YAAY;QAAE,QAAQ;IAAI;IAC5C,SAAS,IAAA,6KAAO,EAAC,WAAW;QAAE,QAAQ;IAAI;IAC1C,SAAS,IAAA,6KAAO,EAAC,WAAW;QAAE,QAAQ;IAAI;IAC1C,SAAS,IAAA,6KAAO,EAAC,WAAW;QAAE,QAAQ;IAAI;IAC1C,aAAa,IAAA,6KAAO,EAAC,eAAe;QAAE,QAAQ;IAAI;IAClD,SAAS,IAAA,6KAAO,EAAC,WAAW;QAAE,QAAQ;IAAI;IAC1C,eAAe,IAAA,6KAAO,EAAC,kBAAkB;QAAE,QAAQ;IAAG,GAAG,OAAO,CAAC;IACjE,YAAY,IAAA,6KAAO,EAAC,eAAe;QAAE,QAAQ;IAAI,GAAG,MAAM;IAC1D,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,CAAC;IACvC,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,CAAC;IACzC,aAAa,IAAA,uKAAI,EAAC;IAClB,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,CAAC;IAC7C,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,CAAC;IACzC,eAAe,IAAA,6KAAO,EAAC,kBAAkB,OAAO,CAAC;IACjD,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO,CAAC;IAC/C,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,sKAAW,EAAC,wBAAwB,EAAE,CAAC,MAAM,MAAM;QAC9D,eAAe,IAAA,gKAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,UAAU;IACtE,CAAC;AAGM,MAAM,eAAe,IAAA,gKAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE,MAAM;IACtE,yBAAyB,IAAA,uKAAI,EAAC;IAC9B,iBAAiB,IAAA,uKAAI,EAAC;IACtB,iBAAiB,IAAA,uKAAI,EAAC;IACtB,uBAAuB,IAAA,uKAAI,EAAC;IAC5B,oBAAoB,IAAA,uKAAI,EAAC;IACzB,kBAAkB,IAAA,uKAAI,EAAC;IACvB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,sKAAW,EAAC,6BAA6B,EAAE,CAAC,MAAM,MAAM;IACrE,CAAC;AAOM,MAAM,eAAe,IAAA,gKAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,SAAS,IAAA,6KAAO,EAAC,YAAY,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAChE,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO;IAC1C,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO;IAC1C,UAAU,IAAA,6KAAO,EAAC;IAClB,SAAS,IAAA,yKAAK,EAAC;IACf,WAAW,IAAA,6KAAO,EAAC;IACnB,WAAW,IAAA,6KAAO,EAAC;IACnB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,YAAY,IAAA,gKAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,OAAO;QAChE,eAAe,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,UAAU;QACzE,eAAe,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,UAAU;QACzE,cAAc,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,SAAS;IACxE,CAAC;AAGM,MAAM,kBAAkB,IAAA,gKAAO,EAAC,oBAAoB;IACzD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO;IAC5C,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO;IACxC,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAClE,QAAQ,IAAA,6KAAO,EAAC,UAAU,OAAO,GAAG,OAAO,CAAC;IAC5C,eAAe,IAAA,6KAAO,EAAC,kBAAkB,OAAO,GAAG,OAAO,CAAC;IAC3D,WAAW,IAAA,6KAAO,EAAC,cAAc;QAAE,WAAW;QAAG,OAAO;IAAE;IAC1D,gBAAgB,IAAA,6KAAO,EAAC,mBAAmB;QAAE,WAAW;QAAG,OAAO;IAAE;IACpE,gBAAgB,IAAA,uKAAI,EAAC,mBAAmB,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IACzE,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,YAAY,IAAA,iLAAS,EAAC;IACtB,aAAa,IAAA,uKAAI,EAAC;IAClB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,MAAM;QAC/D,kBAAkB,IAAA,gKAAK,EAAC,uCAAuC,EAAE,CAAC,MAAM,aAAa;QACrF,cAAc,IAAA,gKAAK,EAAC,mCAAmC,EAAE,CAAC,MAAM,SAAS;IAC3E,CAAC;AAGM,MAAM,kBAAkB,IAAA,gKAAO,EAAC,oBAAoB;IACzD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACtE,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO;IAC5C,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO;IACxC,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO;IAC9C,aAAa,IAAA,uKAAI,EAAC,eAAe,OAAO;IACxC,QAAQ,IAAA,6KAAO,EAAC,UAAU,OAAO,GAAG,OAAO,CAAC;IAC5C,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,YAAY,IAAA,uKAAI,EAAC;IACjB,aAAa,IAAA,6KAAO,EAAC;IACrB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,YAAY,IAAA,iLAAS,EAAC;AACxB,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,MAAM;QAC/D,gBAAgB,IAAA,gKAAK,EAAC,qCAAqC,EAAE,CAAC,MAAM,WAAW;QAC/E,eAAe,IAAA,gKAAK,EAAC,oCAAoC,EAAE,CAAC,MAAM,UAAU;QAC5E,cAAc,IAAA,gKAAK,EAAC,mCAAmC,EAAE,CAAC,MAAM,SAAS;IAC3E,CAAC;AAGM,MAAM,iBAAiB,IAAA,gKAAO,EAAC,mBAAmB;IACvD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,MAAM;IACnD,cAAc,IAAA,yKAAK,EAAC,iBAAiB,OAAO;IAC5C,UAAU,IAAA,6KAAO,EAAC,YAAY,OAAO;IACrC,aAAa,IAAA,uKAAI,EAAC;IAClB,WAAW,IAAA,6KAAO,EAAC,cAAc,UAAU,CAAC,IAAM,MAAM,EAAE;IAC1D,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,eAAe,IAAA,gKAAK,EAAC,mCAAmC,EAAE,CAAC,MAAM,UAAU;QAC3E,aAAa,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,QAAQ;IACtE,CAAC;AAGM,MAAM,iBAAiB,IAAA,gKAAO,EAAC,mBAAmB;IACvD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO,GAAG,MAAM;IACvD,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,SAAS,IAAA,6KAAO,EAAC,WAAW,OAAO;IACnC,aAAa,IAAA,uKAAI,EAAC,eAAe,OAAO;IACxC,QAAQ,IAAA,6KAAO,EAAC,UAAU,OAAO,GAAG,OAAO,CAAC;IAC5C,UAAU,IAAA,6KAAO,EAAC,YAAY,OAAO,GAAG,OAAO,CAAC;IAChD,UAAU,IAAA,6KAAO,EAAC,YAAY,OAAO;IACrC,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,SAAS,IAAA,yKAAK,EAAC,WAAW,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,aAAa,CAAC;IAC5D,MAAM,IAAA,uKAAI,EAAC,QAAQ,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IACpD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,YAAY,IAAA,iLAAS,EAAC;AACxB,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,MAAM;QAC9D,aAAa,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,QAAQ;QACpE,WAAW,IAAA,gKAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,MAAM;QAC/D,eAAe,IAAA,gKAAK,EAAC,mCAAmC,EAAE,CAAC,MAAM,UAAU;QAC3E,cAAc,IAAA,gKAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,SAAS;IAC1E,CAAC;AAGM,MAAM,gBAAgB,IAAA,gKAAO,EAAC,iBAAiB;IACpD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,OAAO,IAAA,6KAAO,EAAC,SAAS,OAAO;IAC/B,SAAS,IAAA,uKAAI,EAAC,WAAW,OAAO;IAChC,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO,GAAG,OAAO,CAAC;IACxC,gBAAgB,IAAA,6KAAO,EAAC,mBAAmB,OAAO,GAAG,OAAO,CAAC;IAC7D,WAAW,IAAA,6KAAO,EAAC;IACnB,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,GAAG,OAAO,CAAC;IACvD,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO;IAC1C,SAAS,IAAA,iLAAS,EAAC;IACnB,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACpE,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,OAAO,IAAA,6KAAO,EAAC,SAAS,OAAO,GAAG,OAAO,CAAC;IAC1C,QAAQ,IAAA,6KAAO,EAAC,UAAU,OAAO,GAAG,OAAO,CAAC;AAC9C,GAAG,CAAC,QAAU,CAAC;QACb,aAAa,IAAA,gKAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,QAAQ;QACnE,mBAAmB,IAAA,gKAAK,EAAC,qCAAqC,EAAE,CAAC,MAAM,cAAc;QACrF,cAAc,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,SAAS;QACtE,YAAY,IAAA,gKAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,OAAO;IAClE,CAAC;AAGM,MAAM,SAAS,IAAA,gKAAO,EAAC,WAAW;IACvC,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,MAAM;IACjD,QAAQ,IAAA,uKAAI,EAAC,UAAU,OAAO;IAC9B,SAAS,IAAA,6KAAO,EAAC,YAAY,OAAO,GAAG,OAAO,CAAC;IAC/C,WAAW,IAAA,iLAAS,EAAC;IACrB,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAClE,UAAU,IAAA,iLAAS,EAAC,aAAa,OAAO,GAAG,UAAU;IACrD,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;AACnD,GAAG,CAAC,QAAU,CAAC;QACb,cAAc,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,SAAS;QAChE,aAAa,IAAA,gKAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,QAAQ;QAC7D,cAAc,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,SAAS;IAClE,CAAC;AAGM,MAAM,iBAAiB,IAAA,gKAAO,EAAC,mBAAmB;IACvD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,GAAG,MAAM;IACrD,SAAS,IAAA,6KAAO,EAAC,WAAW,OAAO;IACnC,UAAU,IAAA,uKAAI,EAAC,aAAa,OAAO;IACnC,UAAU,IAAA,uKAAI,EAAC,aAAa,OAAO;IACnC,WAAW,IAAA,uKAAI,EAAC,aAAa,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IAC9D,UAAU,IAAA,6KAAO,EAAC,YAAY,OAAO;IACrC,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,WAAW,IAAA,6KAAO,EAAC,cAAc,UAAU,CAAC,IAAM,MAAM,EAAE;IAC1D,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,gBAAgB,IAAA,gKAAK,EAAC,oCAAoC,EAAE,CAAC,MAAM,WAAW;QAC9E,aAAa,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,QAAQ;QACpE,aAAa,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,QAAQ;IACvE,CAAC;AAGM,MAAM,aAAa,IAAA,gKAAO,EAAC,eAAe;IAC/C,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE,MAAM;IACtE,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO;IAC7B,aAAa,IAAA,yKAAK,EAAC,eAAe,OAAO;IACzC,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACpE,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,MAAM;QAC3D,SAAS,IAAA,gKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,IAAI;IACtD,CAAC;AAGM,MAAM,eAAe,IAAA,gKAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO;IAC7B,aAAa,IAAA,uKAAI,EAAC,eAAe,OAAO;IACxC,OAAO,IAAA,yKAAK,EAAC,SAAS,OAAO;IAC7B,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC;IACnD,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACpE,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,SAAS,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,IAAI;QACtD,cAAc,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,SAAS;IACxE,CAAC;AAGM,MAAM,kBAAkB,IAAA,gKAAO,EAAC,oBAAoB;IACzD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO;IAC7B,aAAa,IAAA,uKAAI,EAAC,eAAe,OAAO;IACxC,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO;IAC5C,eAAe,IAAA,yKAAK,EAAC,kBAAkB,OAAO;IAC9C,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO;IAC1C,cAAc,IAAA,yKAAK,EAAC,iBAAiB,OAAO;IAC5C,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,gBAAgB,IAAA,6KAAO,EAAC,mBAAmB,OAAO,GAAG,OAAO,CAAC;IAC7D,cAAc,IAAA,iLAAS,EAAC;IACxB,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACpE,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,gBAAgB,IAAA,gKAAK,EAAC,qCAAqC,EAAE,CAAC,MAAM,WAAW;QAC/E,aAAa,IAAA,gKAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,QAAQ;QACtE,cAAc,IAAA,gKAAK,EAAC,mCAAmC,EAAE,CAAC,MAAM,SAAS;IAC3E,CAAC;AAGM,MAAM,UAAU,IAAA,gKAAO,EAAC,YAAY;IACzC,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO;IAC7B,aAAa,IAAA,uKAAI,EAAC,eAAe,OAAO;IACxC,UAAU,IAAA,yKAAK,EAAC,YAAY,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,aAAa,CAAC;IAC9D,mBAAmB,IAAA,yKAAK,EAAC,sBAAsB,OAAO;IACtD,QAAQ,IAAA,6KAAO,EAAC,UAAU,OAAO,GAAG,OAAO,CAAC;IAC5C,WAAW,IAAA,iLAAS,EAAC;IACrB,SAAS,IAAA,iLAAS,EAAC;IACnB,eAAe,IAAA,6KAAO,EAAC;IACvB,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACpE,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,MAAM;QACvD,cAAc,IAAA,gKAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,SAAS;QACjE,YAAY,IAAA,gKAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,OAAO;IAC7D,CAAC;AAGM,MAAM,eAAe,IAAA,gKAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,SAAS,IAAA,6KAAO,EAAC,YAAY,OAAO,GAAG,MAAM;IAC7C,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO;IAC7B,aAAa,IAAA,uKAAI,EAAC,eAAe,OAAO;IACxC,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC;IACnD,mBAAmB,IAAA,6KAAO,EAAC,sBAAsB,OAAO,GAAG,OAAO,CAAC;IACnE,aAAa,IAAA,uKAAI,EAAC,gBAAgB,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IACnE,gBAAgB,IAAA,6KAAO,EAAC,mBAAmB,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,eAAe,CAAC;IAC/E,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACpE,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,YAAY,IAAA,gKAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,OAAO;QAChE,cAAc,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,SAAS;IACxE,CAAC;AAGM,MAAM,UAAU,IAAA,gKAAO,EAAC,YAAY;IACzC,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,KAAK,IAAA,6KAAO,EAAC,OAAO,OAAO,GAAG,MAAM;IACpC,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO;IAC7B,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,aAAa,IAAA,uKAAI,EAAC,eAAe,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IAClE,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC;IACnD,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,UAAU,IAAA,iLAAS,EAAC;IACpB,WAAW,IAAA,iLAAS,EAAC;IACrB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,QAAQ,IAAA,gKAAK,EAAC,oBAAoB,EAAE,CAAC,MAAM,GAAG;QAC9C,WAAW,IAAA,gKAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,MAAM;QACxD,aAAa,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,QAAQ;IAChE,CAAC;AAGM,MAAM,WAAW,IAAA,gKAAO,EAAC,YAAY;IAC1C,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,KAAK,IAAA,6KAAO,EAAC,OAAO,OAAO;IAC3B,QAAQ,IAAA,uKAAI,EAAC,UAAU,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IACxD,QAAQ,IAAA,6KAAO,EAAC,UAAU,OAAO;IACjC,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACpE,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,eAAe,IAAA,iLAAS,EAAC;IACzB,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO,GAAG,OAAO,CAAC;IACzD,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO,GAAG,OAAO,CAAC;AAC3D,GAAG,CAAC,QAAU,CAAC;QACb,aAAa,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,QAAQ;QAC9D,cAAc,IAAA,gKAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,SAAS;IACnE,CAAC;AAGM,MAAM,gBAAgB,IAAA,gKAAO,EAAC,kBAAkB;IACrD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,MAAM;IAC3C,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO;IAC7B,aAAa,IAAA,uKAAI,EAAC,eAAe,OAAO;IACxC,UAAU,IAAA,6KAAO,EAAC,YAAY,OAAO;IACrC,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,SAAS,IAAA,iLAAS,EAAC;IACnB,SAAS,IAAA,iLAAS,EAAC;IACnB,YAAY,IAAA,6KAAO,EAAC;IACpB,WAAW,IAAA,uKAAI,EAAC;IAChB,gBAAgB,IAAA,6KAAO,EAAC,mBAAmB,OAAO,GAAG,OAAO,CAAC;AAC/D,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,MAAM;QAC9D,aAAa,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,QAAQ;QACpE,YAAY,IAAA,gKAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,OAAO;IACnE,CAAC;AAGM,MAAM,qBAAqB,IAAA,gKAAO,EAAC,uBAAuB;IAC/D,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO;IAC1C,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO;IAC1C,OAAO,IAAA,6KAAO,EAAC,SAAS;QAAE,WAAW;QAAI,OAAO;IAAE,GAAG,OAAO;IAC5D,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO;IAC7B,UAAU,IAAA,yKAAK,EAAC;IAChB,YAAY,IAAA,iLAAS,EAAC,eAAe,OAAO,GAAG,UAAU;AAC3D,GAAG,CAAC,QAAU,CAAC;QACb,eAAe,IAAA,gKAAK,EAAC,uCAAuC,EAAE,CAAC,MAAM,UAAU;QAC/E,eAAe,IAAA,gKAAK,EAAC,uCAAuC,EAAE,CAAC,MAAM,UAAU;QAC/E,eAAe,IAAA,gKAAK,EAAC,uCAAuC,EAAE,CAAC,MAAM,UAAU;IACjF,CAAC;AAGM,MAAM,iBAAiB,IAAA,gKAAO,EAAC,mBAAmB;IACvD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO;IACxC,UAAU,IAAA,6KAAO,EAAC,YAAY,OAAO;IACrC,QAAQ,IAAA,6KAAO,EAAC,WAAW,UAAU,CAAC,IAAM,MAAM,EAAE;IACpD,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO;IACxC,SAAS,IAAA,yKAAK,EAAC,WAAW,OAAO;IACjC,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;IACrD,YAAY,IAAA,6KAAO,EAAC,eAAe,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5D,YAAY,IAAA,iLAAS,EAAC;IACtB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,cAAc,IAAA,gKAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,SAAS;QACxE,aAAa,IAAA,gKAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,QAAQ;QACpE,eAAe,IAAA,gKAAK,EAAC,mCAAmC,EAAE,CAAC,MAAM,UAAU;QAC3E,cAAc,IAAA,gKAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,SAAS;IAC1E,CAAC;AAGM,MAAM,eAAe,IAAA,gKAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,UAAU,IAAA,6KAAO,EAAC,YAAY,OAAO;IACrC,kBAAkB,IAAA,6KAAO,EAAC,qBAAqB,OAAO;IACtD,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO;IACtC,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO;IACtC,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO;IACtC,OAAO,IAAA,6KAAO,EAAC;IACf,QAAQ,IAAA,6KAAO,EAAC;IAChB,SAAS,IAAA,6KAAO,EAAC;IACjB,MAAM,IAAA,uKAAI,EAAC,QAAQ,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IACpD,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACtE,YAAY,IAAA,iLAAS,EAAC,eAAe,OAAO,GAAG,UAAU;IACzD,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;AACvD,GAAG,CAAC,QAAU,CAAC;QACb,eAAe,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,UAAU;QACzE,aAAa,IAAA,gKAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,QAAQ;QACnE,eAAe,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,UAAU;IAC3E,CAAC;AAGM,MAAM,mBAAmB,IAAA,gKAAO,EAAC,qBAAqB;IAC3D,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO;IAC5C,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO;IACxC,gBAAgB,IAAA,6KAAO,EAAC,mBAAmB,OAAO;IAClD,MAAM,IAAA,yKAAK,EAAC,QAAQ,OAAO;IAC3B,eAAe,IAAA,uKAAI,EAAC,kBAAkB,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IACvE,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACpE,cAAc,IAAA,uKAAI,EAAC;IACnB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,gBAAgB,IAAA,gKAAK,EAAC,sCAAsC,EAAE,CAAC,MAAM,WAAW;QAChF,cAAc,IAAA,gKAAK,EAAC,oCAAoC,EAAE,CAAC,MAAM,SAAS;QAC1E,mBAAmB,IAAA,gKAAK,EAAC,yCAAyC,EAAE,CAAC,MAAM,cAAc;QACzF,cAAc,IAAA,gKAAK,EAAC,oCAAoC,EAAE,CAAC,MAAM,SAAS;IAC5E,CAAC;AAOM,MAAM,wBAAwB,IAAA,gKAAO,EAAC,2BAA2B;IACtE,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACtF,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO;IAC5C,YAAY,IAAA,6KAAO,EAAC,eAAe;QAAE,WAAW;QAAI,OAAO;IAAE,GAAG,OAAO;IACvE,WAAW,IAAA,6KAAO,EAAC,cAAc;QAAE,WAAW;QAAI,OAAO;IAAE;IAC3D,cAAc,IAAA,6KAAO,EAAC,iBAAiB;QAAE,WAAW;QAAI,OAAO;IAAE,GAAG,OAAO;IAC3E,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO,GAAG,KAAK;IACtD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO;IAC1C,UAAU,IAAA,iLAAS,EAAC;IACpB,YAAY,IAAA,6KAAO,EAAC,eAAe;QAAE,WAAW;QAAI,OAAO;IAAE;IAC7D,mBAAmB,IAAA,6KAAO,EAAC,uBAAuB;QAAE,WAAW;QAAI,OAAO;IAAE;IAC5E,UAAU,IAAA,6KAAO,EAAC;IAClB,OAAO,IAAA,uKAAI,EAAC;IACZ,MAAM,IAAA,uKAAI,EAAC,QAAQ,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IACpD,gBAAgB,IAAA,uKAAI,EAAC,mBAAmB,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IACzE,QAAQ,IAAA,6KAAO,EAAC;IAChB,QAAQ,IAAA,6KAAO,EAAC,UAAU,OAAO,GAAG,OAAO,CAAC,QAAQ,KAAK;IACzD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,MAAM;QAC/D,WAAW,IAAA,gKAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,MAAM;QAC9D,cAAc,IAAA,gKAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,SAAS;QACxE,gBAAgB,IAAA,gKAAK,EAAC,oCAAoC,EAAE,CAAC,MAAM,WAAW;IAChF,CAAC;AAGM,MAAM,aAAa,IAAA,gKAAO,EAAC,cAAc;IAC9C,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACtF,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO;IAC7B,aAAa,IAAA,uKAAI,EAAC;IAClB,SAAS,IAAA,uKAAI,EAAC,WAAW,KAAK,GAAG,OAAO,CAAC,mJAAG,CAAC,YAAY,CAAC;IAC1D,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC;IACnD,OAAO,IAAA,6KAAO,EAAC;IACf,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC;IACnD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,MAAM;QAC1D,cAAc,IAAA,gKAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,SAAS;IACrE,CAAC;AAGM,MAAM,cAAc,IAAA,gKAAO,EAAC,gBAAgB;IACjD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACtF,QAAQ,IAAA,6KAAO,EAAC,UAAU,OAAO;IACjC,aAAa,IAAA,6KAAO,EAAC,gBAAgB;QAAE,WAAW;QAAI,OAAO;IAAE,GAAG,OAAO;IACzE,WAAW,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,KAAK;IAC/C,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,GAAG,OAAO,CAAC;IACvD,aAAa,IAAA,iLAAS,EAAC;IACvB,oBAAoB,IAAA,6KAAO,EAAC,uBAAuB,OAAO,GAAG,OAAO,CAAC,UAAU,KAAK;IACpF,MAAM,IAAA,uKAAI,EAAC;IACX,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,MAAM;QAC5D,WAAW,IAAA,gKAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,MAAM;QAC3D,aAAa,IAAA,gKAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,QAAQ;QAClE,gBAAgB,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,WAAW;IAC7E,CAAC;AAGM,MAAM,gBAAgB,IAAA,gKAAO,EAAC,kBAAkB;IACrD,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACtF,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO;IAC7B,OAAO,IAAA,uKAAI,EAAC,SAAS,OAAO;IAC5B,SAAS,IAAA,yKAAK,EAAC;IACf,UAAU,IAAA,6KAAO,EAAC,YAAY,KAAK;IACnC,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,YAAY,IAAA,iLAAS,EAAC;IACtB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,MAAM;QAC9D,aAAa,IAAA,gKAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,QAAQ;IACrE,CAAC;AAGM,MAAM,aAAa,IAAA,gKAAO,EAAC,eAAe;IAC/C,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACtF,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,KAAK;IAChD,eAAe,IAAA,6KAAO,EAAC,kBAAkB,OAAO,GAAG,OAAO,CAAC;IAC3D,eAAe,IAAA,6KAAO,EAAC,kBAAkB,OAAO,GAAG,OAAO,CAAC;IAC3D,iBAAiB,IAAA,iLAAS,EAAC;IAC3B,kBAAkB,IAAA,6KAAO,EAAC,qBAAqB,OAAO,GAAG,OAAO,CAAC;IACjE,YAAY,IAAA,yKAAK,EAAC;IAClB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,MAAM;QAC3D,cAAc,IAAA,gKAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,SAAS;QACpE,kBAAkB,IAAA,gKAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,aAAa;IAClF,CAAC;AAGM,MAAM,YAAY,IAAA,gKAAO,EAAC,cAAc;IAC7C,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO;IAC7B,aAAa,IAAA,uKAAI,EAAC;IAClB,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,KAAK;IAC9C,UAAU,IAAA,6KAAO,EAAC;IAClB,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,GAAG,OAAO,CAAC;IACvD,cAAc,IAAA,6KAAO,EAAC,iBAAiB,OAAO,GAAG,OAAO,CAAC;IACzD,eAAe,IAAA,iLAAS,EAAC;IACzB,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IACpE,UAAU,IAAA,6KAAO,EAAC,aAAa,OAAO,GAAG,OAAO,CAAC;IACjD,UAAU,IAAA,yKAAK,EAAC;IAChB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,aAAa,IAAA,gKAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,QAAQ;QAChE,aAAa,IAAA,gKAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,QAAQ;QAC/D,aAAa,IAAA,gKAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,QAAQ;QAChE,kBAAkB,IAAA,gKAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,aAAa;IAClF,CAAC;AAGM,MAAM,kBAAkB,IAAA,gKAAO,EAAC,qBAAqB;IAC1D,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,UAAU,EAAE,EAAE;QAAE,UAAU;IAAU;IAC1F,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACtF,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO,GAAG,OAAO,CAAC,UAAU,KAAK;IACvD,UAAU,IAAA,iLAAS,EAAC,aAAa,OAAO,GAAG,UAAU;IACrD,YAAY,IAAA,iLAAS,EAAC;IACtB,SAAS,IAAA,6KAAO,EAAC,YAAY,OAAO,GAAG,OAAO,CAAC;AACjD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,MAAM;QACjE,WAAW,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,MAAM;QACjE,aAAa,IAAA,gKAAK,EAAC,mCAAmC,EAAE,CAAC,MAAM,MAAM,EAAE,MAAM,MAAM;IACrF,CAAC;AAGM,MAAM,mBAAmB,IAAA,gKAAO,EAAC,sBAAsB;IAC5D,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,UAAU,EAAE,EAAE;QAAE,UAAU;IAAU;IAC1F,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACtF,SAAS,IAAA,uKAAI,EAAC,WAAW,OAAO;IAChC,aAAa,IAAA,6KAAO,EAAC,gBAAgB,OAAO,GAAG,OAAO,CAAC,QAAQ,KAAK;IACpE,eAAe,IAAA,uKAAI,EAAC;IACpB,WAAW,IAAA,6KAAO,EAAC;IACnB,UAAU,IAAA,iLAAS,EAAC;IACpB,WAAW,IAAA,iLAAS,EAAC;IACrB,WAAW,IAAA,yKAAK,EAAC;IACjB,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,MAAM;QAClE,WAAW,IAAA,gKAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,MAAM;QAClE,cAAc,IAAA,gKAAK,EAAC,qCAAqC,EAAE,CAAC,MAAM,SAAS;IAC7E,CAAC;AAGM,MAAM,mBAAmB,IAAA,gKAAO,EAAC,qBAAqB;IAC3D,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACtF,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,KAAK;IAClD,UAAU,IAAA,yKAAK,EAAC,YAAY,OAAO;IACnC,MAAM,IAAA,yKAAK,EAAC,QAAQ,OAAO;IAC3B,UAAU,IAAA,yKAAK,EAAC;IAChB,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC;IACnD,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC;IACrD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,MAAM;QACjE,eAAe,IAAA,gKAAK,EAAC,qCAAqC,EAAE,CAAC,MAAM,UAAU;QAC7E,eAAe,IAAA,gKAAK,EAAC,qCAAqC,EAAE,CAAC,MAAM,UAAU;IAC/E,CAAC;AAGM,MAAM,mBAAmB,IAAA,gKAAO,EAAC,qBAAqB;IAC3D,IAAI,IAAA,6KAAO,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,mJAAG,CAAC,iBAAiB,CAAC;IAC7D,QAAQ,IAAA,6KAAO,EAAC,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACtF,MAAM,IAAA,6KAAO,EAAC,QAAQ,OAAO;IAC7B,WAAW,IAAA,6KAAO,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC;IACnD,YAAY,IAAA,6KAAO,EAAC,eAAe,OAAO,GAAG,OAAO,CAAC,UAAU,KAAK;IACpE,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,IAAA,iLAAS,EAAC,cAAc,OAAO,GAAG,UAAU;AACzD,GAAG,CAAC,QAAU,CAAC;QACb,WAAW,IAAA,gKAAK,EAAC,iCAAiC,EAAE,CAAC,MAAM,MAAM;QACjE,cAAc,IAAA,gKAAK,EAAC,oCAAoC,EAAE,CAAC,MAAM,SAAS;IAC5E,CAAC;AAGM,MAAM,mBAAmB,IAAA,8JAAkB,EAAC,OAAO,IAAI,CAAC;IAC7D,IAAI;IACJ,OAAO;IACP,UAAU;IACV,WAAW;IACX,UAAU;IACV,iBAAiB;AACnB;AAKO,MAAM,mBAAmB,IAAA,8JAAkB,EAAC,OAAO,IAAI,CAAC;IAC7D,IAAI;IACJ,YAAY;IACZ,cAAc;IACd,MAAM;IACN,YAAY;IACZ,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;IACd,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,oBAAoB;IACpB,kBAAkB;IAClB,mBAAmB;IACnB,mBAAmB;IACnB,WAAW;IACX,WAAW;AACb,GAAG,MAAM,CAAC;IACR,UAAU,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAChC,UAAU,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC;AAC3B;AAKO,MAAM,8BAA8B,IAAA,8JAAkB,EAAC,kBAAkB,IAAI,CAAC;IACnF,IAAI;IACJ,WAAW;AACb;AAEO,MAAM,4BAA4B,IAAA,8JAAkB,EAAC,gBAAgB,IAAI,CAAC;IAC/E,IAAI;IACJ,WAAW;IACX,aAAa;AACf;AAEO,MAAM,2BAA2B,IAAA,8JAAkB,EAAC,eAAe,IAAI,CAAC;IAC7E,IAAI;IACJ,WAAW;IACX,WAAW;AACb;AAEO,MAAM,gCAAgC,IAAA,8JAAkB,EAAC,oBAAoB,IAAI,CAAC;IACvF,IAAI;IACJ,aAAa;IACb,aAAa;IACb,aAAa;IACb,WAAW;IACX,WAAW;IACX,YAAY;IACZ,YAAY;AACd,GAAG,MAAM,CAAC;IACR,QAAQ,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM;IAC7B,QAAQ,yIAAC,CAAC,IAAI,CAAC;QAAC;QAAU;QAAU;QAAQ;KAAQ,EAAE,QAAQ;IAC9D,YAAY,yIAAC,CAAC,IAAI,CAAC;QAAC;QAAO;KAAM,EAAE,QAAQ;IAC3C,eAAe,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,0BAA0B,GAAG,CAAC,KAAK;AACvE;AAEO,MAAM,uBAAuB,IAAA,8JAAkB,EAAC,UAAU,IAAI,CAAC;IACpE,IAAI;IACJ,WAAW;IACX,WAAW;IACX,QAAQ;IACR,UAAU;IACV,YAAY;AACd,GAAG,MAAM,CAAC;IACR,MAAM,yIAAC,CAAC,IAAI,CAAC;QAAC;QAAO;QAAW;QAAe;KAAQ;IACvD,SAAS,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,0CAA0C,GAAG,CAAC,KAAK;IAC/E,SAAS,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,0CAA0C,GAAG,CAAC,MAAM;IAChF,OAAO,yIAAC,CAAC,MAAM,GAAG,KAAK,CAAC,wBAAwB,QAAQ;AAC1D;AAIO,MAAM,sBAAsB,IAAA,8JAAkB,EAAC,SAAS,IAAI,CAAC;IAClE,IAAI;IACJ,WAAW;IACX,WAAW;IACX,OAAO;IACP,WAAW;IACX,OAAO;IACP,QAAQ;AACV,GAAG,MAAM,CAAC;IACR,OAAO,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC;IAC9B,aAAa,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAC5B,YAAY,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAClC,UAAU,yIAAC,CAAC,IAAI,CAAC;QAAC;QAAO;QAAO;KAAO,EAAE,QAAQ;IACjD,SAAS,yIAAC,CAAC,MAAM,GAAG,QAAQ;IAC5B,MAAM,yIAAC,CAAC,KAAK,CAAC,yIAAC,CAAC,MAAM,IAAI,GAAG,CAAC,GAAG,QAAQ;IACzC,OAAO,yIAAC,CAAC,KAAK,CAAC,yIAAC,CAAC,MAAM,CAAC;QACtB,MAAM,yIAAC,CAAC,MAAM;QACd,MAAM,yIAAC,CAAC,MAAM;QACd,KAAK,yIAAC,CAAC,MAAM;QACb,UAAU,yIAAC,CAAC,MAAM;IACpB,IAAI,GAAG,CAAC,GAAG,+BAA+B,QAAQ;IAClD,QAAQ,yIAAC,CAAC,KAAK,CAAC,yIAAC,CAAC,MAAM,CAAC;QACvB,KAAK,yIAAC,CAAC,MAAM;QACb,SAAS,yIAAC,CAAC,OAAO;QAClB,OAAO,yIAAC,CAAC,MAAM;IACjB,IAAI,GAAG,CAAC,GAAG,gCAAgC,QAAQ;IACnD,cAAc,yIAAC,CAAC,KAAK,CAAC,yIAAC,CAAC,MAAM,IAAI,QAAQ;IAC1C,YAAY,yIAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,SAAS,yIAAC,CAAC,OAAO,GAAG,QAAQ;IAC7B,WAAW,yIAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,SAAS,yIAAC,CAAC,MAAM,GAAG,QAAQ;IAC5B,yDAAyD;IACzD,kBAAkB,yIAAC,CAAC,MAAM,GAAG,QAAQ;IACrC,cAAc,yIAAC,CAAC,MAAM,GAAG,QAAQ;IACjC,iBAAiB,yIAAC,CAAC,MAAM,GAAG,QAAQ;IACpC,YAAY,yIAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,QAAQ,yIAAC,CAAC,MAAM,GAAG,QAAQ;IAC3B,cAAc,yIAAC,CAAC,MAAM,GAAG,QAAQ;IAEjC,qEAAqE;IACrE,MAAM,yIAAC,CAAC,MAAM,GAAG,QAAQ;IACzB,cAAc,yIAAC,CAAC,MAAM,GAAG,QAAQ;IACjC,qBAAqB,yIAAC,CAAC,MAAM,GAAG,QAAQ;IACxC,mBAAmB,yIAAC,CAAC,KAAK,CAAC,yIAAC,CAAC,MAAM,IAAI,QAAQ;AACjD;AAEO,MAAM,8BAA8B,IAAA,8JAAkB,EAAC,kBAAkB,IAAI,CAAC;IACnF,IAAI;IACJ,aAAa;IACb,UAAU;IACV,eAAe;IACf,YAAY;AACd;AAEO,MAAM,4BAA4B,IAAA,8JAAkB,EAAC,gBAAgB,IAAI,CAAC;IAC/E,IAAI;IACJ,WAAW;IACX,QAAQ;IACR,aAAa;AACf,GAAG,MAAM,CAAC;IACR,QAAQ,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,kCAAkC,GAAG,CAAC,GAAG;IACnE,QAAQ,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,0CAA0C,GAAG,CAAC,MAAM;AAClF;AAEO,MAAM,0BAA0B,IAAA,8JAAkB,EAAC,cAAc,IAAI,CAAC;IAC3E,IAAI;IACJ,WAAW;AACb;AAEO,MAAM,2BAA2B,IAAA,8JAAkB,EAAC,gBAAgB,IAAI,CAAC;IAC9E,IAAI;IACJ,WAAW;IACX,SAAS;IACT,YAAY;AACd,GAAG,MAAM,CAAC;IACR,MAAM,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC;IAC7B,QAAQ,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ;AAC3C;AAEO,MAAM,qBAAqB,IAAA,8JAAkB,EAAC,SAAS,IAAI,CAAC;IACjE,IAAI;IACJ,WAAW;IACX,WAAW;IACX,eAAe;IACf,aAAa;IACb,iBAAiB;IACjB,QAAQ;IACR,YAAY;AACd;AAEO,MAAM,2BAA2B,IAAA,8JAAkB,EAAC,eAAe,IAAI,CAAC;IAC7E,IAAI;IACJ,YAAY;IACZ,QAAQ;AACV,GAAG,MAAM,CAAC;IACR,QAAQ,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAC9B,aAAa,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC;IACpC,YAAY,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC;AACtC;AAEO,MAAM,yBAAyB,IAAA,8JAAkB,EAAC,aAAa,IAAI,CAAC;IACzE,IAAI;IACJ,WAAW;AACb;AAEO,MAAM,2BAA2B,IAAA,8JAAkB,EAAC,eAAe,IAAI,CAAC;IAC7E,IAAI;IACJ,WAAW;IACX,eAAe;AACjB;AAEO,MAAM,sBAAsB,IAAA,8JAAkB,EAAC,UAAU,IAAI,CAAC;IACnE,IAAI;IACJ,WAAW;AACb,GAAG,MAAM,CAAC;IACR,MAAM,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AAC9B;AAEO,MAAM,2BAA2B,IAAA,8JAAkB,EAAC,eAAe,IAAI,CAAC;IAC7E,IAAI;IACJ,WAAW;IACX,QAAQ;AACV,GAAG,MAAM,CAAC;IACR,OAAO,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAC7B,SAAS,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACjC;AAEO,MAAM,0BAA0B,yIAAC,CAAC,MAAM,CAAC;IAC9C,aAAa,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,QAAQ;IAC/C,OAAO,yIAAC,CAAC,MAAM,GAAG,KAAK,GAAG,QAAQ;IAClC,KAAK,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,QAAQ,GAAG,EAAE,CAAC,yIAAC,CAAC,OAAO,CAAC;IACjD,UAAU,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,QAAQ,GAAG,EAAE,CAAC,yIAAC,CAAC,OAAO,CAAC;IACtD,SAAS,yIAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,GAAG,EAAE,CAAC,yIAAC,CAAC,OAAO,CAAC;IAClD,YAAY,yIAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,GAAG,EAAE,CAAC,yIAAC,CAAC,OAAO,CAAC;IACrD,iBAAiB,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,QAAQ,GAAG,EAAE,CAAC,yIAAC,CAAC,OAAO,CAAC;IACnE,gBAAgB,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,QAAQ,GAAG,EAAE,CAAC,yIAAC,CAAC,OAAO,CAAC;IAClE,cAAc,yIAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,GAAG,EAAE,CAAC,yIAAC,CAAC,OAAO,CAAC;IACvD,YAAY,yIAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,EAAE,CAAC,yIAAC,CAAC,OAAO,CAAC;IAC/C,kBAAkB,yIAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,EAAE,CAAC,yIAAC,CAAC,OAAO,CAAC;IACrD,oBAAoB,yIAAC,CAAC,OAAO,GAAG,QAAQ;AAC1C;AAgCO,MAAM,8BAA8B,IAAA,8JAAkB,EAAC,kBAAkB,IAAI,CAAC;IACnF,IAAI;IACJ,WAAW;AACb;AAOO,MAAM,0BAA0B,IAAA,8JAAkB,EAAC,cAAc,IAAI,CAAC;IAC3E,IAAI;IACJ,UAAU;IACV,WAAW;IACX,WAAW;IACX,OAAO;IACP,YAAY;IACZ,WAAW;IACX,eAAe;IACf,YAAY;IACZ,gBAAgB;IAChB,QAAQ;IACR,iBAAiB;IACjB,kBAAkB;AACpB,GAAG,MAAM,CAAC;IACR,qCAAqC;IACrC,OAAO,yIAAC,CAAC,MAAM,GACZ,GAAG,CAAC,IAAI,wCACR,GAAG,CAAC,IAAI,uCACR,MAAM,CACL,CAAC;QACC,MAAM,aAAa,CAAC,IAAI,KAAK,CAAC,aAAa,EAAE,EAAE,MAAM;QACrD,MAAM,cAAc,CAAC,IAAI,KAAK,CAAC,gBAAgB,EAAE,EAAE,MAAM;QACzD,OAAO,gBAAgB,KAAK,aAAa,cAAc;IACzD,GACA;QAAE,SAAS;IAAmD;IAElE,MAAM,yIAAC,CAAC,MAAM,GACX,GAAG,CAAC,KAAK,iEACT,GAAG,CAAC,OAAO;IACd,cAAc,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAC7B,iBAAiB,yIAAC,CAAC,MAAM,GAAG,QAAQ;IAEpC,2BAA2B;IAC3B,YAAY,yIAAC,CAAC,IAAI,CAAC;QAAC;QAAY;QAAc;QAAU;QAAW;QAAS;KAAkB,EAAE,OAAO,CAAC;IACxG,UAAU,yIAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IAE7B,sBAAsB;IACtB,YAAY,yIAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,EAAE,CAAC,yIAAC,CAAC,OAAO,CAAC;IAC/C,gBAAgB,yIAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,EAAE,CAAC,yIAAC,CAAC,OAAO,CAAC;IAEnD,2CAA2C;IAC3C,aAAa,yIAAC,CAAC,KAAK,CAAC,yIAAC,CAAC,MAAM,IAAI,QAAQ,GAAG,OAAO,CAAC,EAAE;IACtD,YAAY,yIAAC,CAAC,KAAK,CAAC,yIAAC,CAAC,MAAM,IAAI,QAAQ,GAAG,OAAO,CAAC,EAAE;IACrD,YAAY,yIAAC,CAAC,KAAK,CAAC,yIAAC,CAAC,MAAM,IAAI,QAAQ,GAAG,OAAO,CAAC,EAAE;IACrD,UAAU,yIAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,QAAQ,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,QAAQ;IACnC,UAAU,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,QAAQ;IACtC,UAAU,yIAAC,CAAC,KAAK,CAAC,yIAAC,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,uBAAuB,QAAQ,GAAG,OAAO,CAAC,EAAE;IAElF,uCAAuC;IACvC,cAAc,yIAAC,CAAC,MAAM,GAAG,QAAQ;IACjC,eAAe,yIAAC,CAAC,MAAM,GAAG,QAAQ;IAClC,cAAc,yIAAC,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ;IACrD,YAAY,yIAAC,CAAC,KAAK,CAAC,yIAAC,CAAC,MAAM,IAAI,QAAQ,GAAG,OAAO,CAAC,EAAE;IACrD,YAAY,yIAAC,CAAC,KAAK,CAAC,yIAAC,CAAC,MAAM,IAAI,QAAQ,GAAG,OAAO,CAAC,EAAE;IAErD,yCAAyC;IACzC,iBAAiB,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,QAAQ;IAE7C,cAAc;IACd,gBAAgB,yIAAC,CAAC,KAAK,CAAC,yIAAC,CAAC,MAAM,IAAI,QAAQ,GAAG,OAAO,CAAC,EAAE;IAEzD,eAAe;IACf,UAAU,yIAAC,CAAC,OAAO,GAAG,QAAQ,GAAG,OAAO,CAAC;IACzC,UAAU,yIAAC,CAAC,OAAO,GAAG,QAAQ,GAAG,OAAO,CAAC;IACzC,UAAU,yIAAC,CAAC,OAAO,GAAG,QAAQ,GAAG,OAAO,CAAC;IAEzC,qEAAqE;IACrE,MAAM,yIAAC,CAAC,MAAM,GAAG,QAAQ;IACzB,cAAc,yIAAC,CAAC,MAAM,GAAG,QAAQ;IACjC,iBAAiB,yIAAC,CAAC,MAAM,GAAG,QAAQ;IAEpC,0DAA0D;IAC1D,iBAAiB,yIAAC,CAAC,MAAM,GAAG,QAAQ;AACtC;AAEO,MAAM,yBAAyB,IAAA,8JAAkB,EAAC,cAAc,IAAI,CAAC;IAC1E,IAAI;IACJ,WAAW;IACX,WAAW;IACX,SAAS;IACT,YAAY;IACZ,YAAY;IACZ,MAAM;IACN,iBAAiB;AACnB,GAAG,MAAM,CAAC;IACR,MAAM,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC;AAC/B;AAEO,MAAM,4BAA4B,IAAA,8JAAkB,EAAC,iBAAiB,IAAI,CAAC;IAChF,aAAa;IACb,WAAW;IACX,WAAW;IACX,WAAW;AACb,GAAG,MAAM,CAAC;IACR,MAAM,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAC5B,aAAa,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC;AACtC;AAEO,MAAM,wBAAwB,IAAA,8JAAkB,EAAC,YAAY,IAAI,CAAC;IACvE,IAAI;IACJ,WAAW;AACb;AAEO,MAAM,2BAA2B,IAAA,8JAAkB,EAAC,cAAc,IAAI,CAAC;IAC5E,IAAI;IACJ,WAAW;AACb,GAAG,MAAM,CAAC;IACR,OAAO,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAC7B,aAAa,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,QAAQ;AAC3C;AAcO,MAAM,yBAAyB,IAAA,8JAAkB,EAAC,YAAY,IAAI,CAAC;IAAE,UAAU;IAAM,WAAW;AAAK;AAIrG,MAAM,oCAAoC,IAAA,8JAAkB,EAAC,wBACjE,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;IAAM,UAAU;AAAK;AAI7C,MAAM,+BAA+B,IAAA,8JAAkB,EAAC,oBAC5D,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;AAAK;AAI7B,MAAM,sCAAsC,IAAA,8JAAkB,EAAC,0BACnE,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;IAAM,aAAa;AAAK;AAKhD,MAAM,mCAAmC,IAAA,8JAAkB,EAAC,sBAChE,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;IAAM,WAAW;AAAK;AAK9C,MAAM,uBAAuB,oBAAoB,WAAW,CAAC,CAAC,MAAM;IACzE,gDAAgD;IAChD,MAAM,0BAA0B,KAAK,IAAI,EAAE,SAAS;IAEpD,IAAI,yBAAyB;QAC3B,iEAAiE;QACjE,IAAI,CAAC,KAAK,gBAAgB,EAAE;YAC1B,IAAI,QAAQ,CAAC;gBACX,MAAM,yIAAC,CAAC,YAAY,CAAC,MAAM;gBAC3B,SAAS;gBACT,MAAM;oBAAC;iBAAmB;YAC5B;QACF;QACA,IAAI,CAAC,KAAK,YAAY,EAAE;YACtB,IAAI,QAAQ,CAAC;gBACX,MAAM,yIAAC,CAAC,YAAY,CAAC,MAAM;gBAC3B,SAAS;gBACT,MAAM;oBAAC;iBAAe;YACxB;QACF;QACA,IAAI,CAAC,KAAK,eAAe,EAAE;YACzB,IAAI,QAAQ,CAAC;gBACX,MAAM,yIAAC,CAAC,YAAY,CAAC,MAAM;gBAC3B,SAAS;gBACT,MAAM;oBAAC;iBAAkB;YAC3B;QACF;QACA,IAAI,CAAC,KAAK,UAAU,EAAE;YACpB,IAAI,QAAQ,CAAC;gBACX,MAAM,yIAAC,CAAC,YAAY,CAAC,MAAM;gBAC3B,SAAS;gBACT,MAAM;oBAAC;iBAAa;YACtB;QACF;QACA,IAAI,CAAC,KAAK,MAAM,EAAE;YAChB,IAAI,QAAQ,CAAC;gBACX,MAAM,yIAAC,CAAC,YAAY,CAAC,MAAM;gBAC3B,SAAS;gBACT,MAAM;oBAAC;iBAAS;YAClB;QACF;QACA,IAAI,CAAC,KAAK,YAAY,EAAE;YACtB,IAAI,QAAQ,CAAC;gBACX,MAAM,yIAAC,CAAC,YAAY,CAAC,MAAM;gBAC3B,SAAS;gBACT,MAAM;oBAAC;iBAAe;YACxB;QACF;IACF;IAEA,OAAO;AACT;AAKO,MAAM,cAAc;IACzB,iBAAiB;IACjB,iBAAiB;IACjB,WAAW;IACX,gBAAgB;IAChB,eAAe;AACjB;AAIO,MAAM,iBAKR;IACH,CAAC,YAAY,eAAe,CAAC,EAAE;QAC7B,MAAM;QACN,aAAa;QACb,MAAM;QACN,OAAO;IACT;IACA,CAAC,YAAY,eAAe,CAAC,EAAE;QAC7B,MAAM;QACN,aAAa;QACb,MAAM;QACN,OAAO;IACT;IACA,CAAC,YAAY,SAAS,CAAC,EAAE;QACvB,MAAM;QACN,aAAa;QACb,MAAM;QACN,OAAO;IACT;IACA,CAAC,YAAY,cAAc,CAAC,EAAE;QAC5B,MAAM;QACN,aAAa;QACb,MAAM;QACN,OAAO;IACT;IACA,CAAC,YAAY,aAAa,CAAC,EAAE;QAC3B,MAAM;QACN,aAAa;QACb,MAAM;QACN,OAAO;IACT;AACF;AAOO,MAAM,uBAAuB,IAAA,8JAAkB,EAAC,WAAW,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;AAAK;AAK5F,MAAM,mBAAmB,IAAA,8JAAkB,EAAC,OAAO,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;AAAK;AA2BpF,MAAM,0BAA0B,IAAA,8JAAkB,EAAC,cAAc,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;AAAK;AAKlG,MAAM,8BAA8B,IAAA,8JAAkB,EAAC,iBAAiB,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;AAAK;AAKzG,MAAM,8BAA8B,IAAA,8JAAkB,EAAC,iBAAiB,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;AAAK;AAKzG,MAAM,4BAA4B,IAAA,8JAAkB,EAAC,gBAAgB,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;AAAK;AAKtG,MAAM,4BAA4B,IAAA,8JAAkB,EAAC,gBAAgB,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;IAAM,WAAW;AAAK;AAKvH,MAAM,2BAA2B,IAAA,8JAAkB,EAAC,eAAe,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;IAAM,OAAO;IAAM,QAAQ;AAAK;AAK/H,MAAM,oBAAoB,IAAA,8JAAkB,EAAC,QAAQ,IAAI,CAAC;IAAE,IAAI;IAAM,UAAU;AAAK;AAKrF,MAAM,4BAA4B,IAAA,8JAAkB,EAAC,gBAAgB,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;AAAK;AAKtG,MAAM,wBAAwB,IAAA,8JAAkB,EAAC,YAAY,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;AAAK;AAK9F,MAAM,0BAA0B,IAAA,8JAAkB,EAAC,cAAc,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;IAAM,WAAW;IAAM,WAAW;AAAK;AAKpI,MAAM,6BAA6B,IAAA,8JAAkB,EAAC,iBAAiB,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;IAAM,gBAAgB;IAAM,cAAc;AAAK;AAKlJ,MAAM,qBAAqB,IAAA,8JAAkB,EAAC,SAAS,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;AAAK;AAKxF,MAAM,0BAA0B,IAAA,8JAAkB,EAAC,cAAc,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;IAAM,WAAW;AAAK;AAKnH,MAAM,qBAAqB,IAAA,8JAAkB,EAAC,SAAS,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;IAAM,UAAU;AAAK;AAKxG,MAAM,sBAAsB,IAAA,8JAAkB,EAAC,UAAU,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;IAAM,eAAe;IAAM,cAAc;IAAM,cAAc;AAAK;AAKvJ,MAAM,2BAA2B,IAAA,8JAAkB,EAAC,eAAe,IAAI,CAAC;IAAE,IAAI;IAAM,SAAS;IAAM,SAAS;IAAM,YAAY;IAAM,WAAW;IAAM,gBAAgB;AAAK;AAK1K,MAAM,gCAAgC,IAAA,8JAAkB,EAAC,oBAAoB,IAAI,CAAC;IAAE,IAAI;IAAM,YAAY;AAAK;AAK/G,MAAM,4BAA4B,IAAA,8JAAkB,EAAC,gBAAgB,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;AAAK;AAKtG,MAAM,2BAA2B,IAAA,8JAAkB,EAAC,cAAc,IAAI,CAAC;IAAE,IAAI;IAAM,YAAY;IAAM,YAAY;AAAK;AAKtH,MAAM,8BAA8B,IAAA,8JAAkB,EAAC,kBAAkB,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;AAAK;AAK1G,MAAM,2BAA2B,IAAA,8JAAkB,EAAC,cAAc,IAAI,CAAC;IAAE,IAAI;IAAM,WAAW;AAAK;AAUnG,MAAM,cAAc,IAAA,gKAAO,EAAC,gBAAgB;IACjD,IAAI,IAAA,2KAAM,EAAC,MAAM,UAAU;IAC3B,QAAQ,IAAA,6KAAO,EAAC,UAAU;QAAE,QAAQ;IAAG,GAAG,OAAO;IACjD,QAAQ,IAAA,6KAAO,EAAC,UAAU;QAAE,QAAQ;IAAG,GAAG,OAAO;IACjD,UAAU,IAAA,6KAAO,EAAC;IAClB,aAAa,IAAA,6KAAO,EAAC,gBAAgB;QAAE,QAAQ;IAAI;IACnD,cAAc,IAAA,uKAAI,EAAC;IACnB,UAAU,IAAA,yKAAK,EAAC;IAChB,WAAW,IAAA,iLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAKO,MAAM,yBAAyB,IAAA,8JAAkB,EAAC,aAAa,IAAI,CAAC;IACzE,IAAI;IACJ,WAAW;AACb;AA8GO,MAAM,kCAAkC,IAAA,8JAAkB,EAAC,uBAAuB,IAAI,CAAC;IAC5F,IAAI;IACJ,WAAW;IACX,WAAW;AACb,GAAG,MAAM,CAAC;IACR,aAAa,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC/B,YAAY,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,cAAc,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAChC,cAAc,yIAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAQ;IACtC,WAAW,yIAAC,CAAC,IAAI,GAAG,EAAE,CAAC,yIAAC,CAAC,MAAM;IAC/B,UAAU,yIAAC,CAAC,IAAI,GAAG,EAAE,CAAC,yIAAC,CAAC,MAAM,IAAI,QAAQ;AAC5C;AAKO,MAAM,wBAAwB,IAAA,8JAAkB,EAAC,YAAY,IAAI,CAAC;IACvE,IAAI;IACJ,WAAW;IACX,WAAW;AACb,GAAG,MAAM,CAAC;IACR,MAAM,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,8BAA8B,GAAG,CAAC;IAC1D,SAAS,yIAAC,CAAC,KAAK,CAAC,yIAAC,CAAC,MAAM,IAAI,OAAO,CAAC,EAAE;AACzC;AAKO,MAAM,yBAAyB,IAAA,8JAAkB,EAAC,aAAa,IAAI,CAAC;IACzE,IAAI;IACJ,WAAW;IACX,WAAW;IACX,aAAa;IACb,aAAa;AACf,GAAG,MAAM,CAAC;IACR,QAAQ,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC1B,aAAa,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC/B,WAAW,yIAAC,CAAC,IAAI,CAAC;QAAC;QAAS;QAAS;KAAS;AAChD;AAKO,MAAM,0BAA0B,IAAA,8JAAkB,EAAC,eAAe,IAAI,CAAC;IAC5E,IAAI;IACJ,WAAW;IACX,UAAU;IACV,YAAY;AACd,GAAG,MAAM,CAAC;IACR,MAAM,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,2BAA2B,GAAG,CAAC;IACvD,OAAO,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC3B;AAKO,MAAM,wBAAwB,IAAA,8JAAkB,EAAC,YAAY,IAAI,CAAC;IACvE,IAAI;IACJ,WAAW;IACX,WAAW;IACX,eAAe;IACf,eAAe;IACf,kBAAkB;AACpB;AAKO,MAAM,uBAAuB,IAAA,8JAAkB,EAAC,WAAW,IAAI,CAAC;IACrE,IAAI;IACJ,WAAW;IACX,WAAW;IACX,aAAa;IACb,cAAc;IACd,eAAe;AACjB,GAAG,MAAM,CAAC;IACR,MAAM,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,yBAAyB,GAAG,CAAC;IACrD,UAAU,yIAAC,CAAC,IAAI,CAAC;QAAC;QAAU;QAAW;QAAgB;KAAW;AACpE;AAKO,MAAM,6BAA6B,IAAA,8JAAkB,EAAC,iBAAiB,IAAI,CAAC;IACjF,IAAI;IACJ,UAAU;AACZ;AAKO,MAAM,8BAA8B,IAAA,8JAAkB,EAAC,kBAAkB,IAAI,CAAC;IACnF,IAAI;IACJ,WAAW;IACX,UAAU;IACV,WAAW;AACb,GAAG,MAAM,CAAC;IACR,SAAS,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,+BAA+B,GAAG,CAAC;AAChE;AAKO,MAAM,8BAA8B,IAAA,8JAAkB,EAAC,kBAAkB,IAAI,CAAC;IACnF,IAAI;IACJ,WAAW;IACX,WAAW;AACb;AAKO,MAAM,8BAA8B,IAAA,8JAAkB,EAAC,kBAAkB,IAAI,CAAC;IACnF,IAAI;IACJ,WAAW;IACX,WAAW;AACb,GAAG,MAAM,CAAC;IACR,MAAM,yIAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,2BAA2B,GAAG,CAAC;AACzD","debugId":null}},
    {"offset": {"line": 2532, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/server/db.ts"],"sourcesContent":["import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;AAEA,oKAAU,CAAC,oBAAoB,GAAG,yJAAE;AAEpC,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;IAC7B,MAAM,IAAI,MACR;AAEJ;AAEO,MAAM,OAAO,IAAI,8JAAI,CAAC;IAAE,kBAAkB,QAAQ,GAAG,CAAC,YAAY;AAAC;AACnE,MAAM,KAAK,IAAA,yKAAO,EAAC;IAAE,QAAQ;IAAM,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 2561, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/category-path.ts"],"sourcesContent":["/**\n * Category Path Utilities\n * Handles hierarchical URL generation for YoForex content\n * \n * Transforms flat category slugs into full hierarchical paths:\n * \"xauusd-scalping\" → \"trading-strategies/scalping-m1-m15/xauusd-scalping\"\n */\n\nimport { db } from '../server/db';\nimport { forumCategories, type ForumThread, type Content } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// In-memory cache for category paths (5 minute TTL)\nconst pathCache = new Map<string, { path: string; expiry: number }>();\nconst CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n\n/**\n * Build full category path by walking up the hierarchy\n * \n * @param categorySlug - The leaf category slug (e.g., \"xauusd-scalping\")\n * @returns Full path (e.g., \"trading-strategies/scalping-m1-m15/xauusd-scalping\")\n * \n * @example\n * const path = await getCategoryPath(\"xauusd-scalping\");\n * // Returns: \"trading-strategies/scalping-m1-m15/xauusd-scalping\"\n */\nexport async function getCategoryPath(categorySlug: string): Promise<string> {\n  // Check cache first\n  const cached = pathCache.get(categorySlug);\n  if (cached && cached.expiry > Date.now()) {\n    return cached.path;\n  }\n  \n  const path: string[] = [];\n  let currentSlug: string | null = categorySlug;\n  const visited = new Set<string>(); // Prevent infinite loops\n  \n  // Walk up the parent chain\n  while (currentSlug && !visited.has(currentSlug)) {\n    visited.add(currentSlug);\n    \n    const [category] = await db\n      .select()\n      .from(forumCategories)\n      .where(eq(forumCategories.slug, currentSlug))\n      .limit(1);\n    \n    if (!category) break;\n    \n    path.unshift(category.slug); // Add to beginning\n    currentSlug = category.parentSlug;\n  }\n  \n  const fullPath = path.join('/');\n  \n  // Cache the result\n  pathCache.set(categorySlug, {\n    path: fullPath,\n    expiry: Date.now() + CACHE_TTL,\n  });\n  \n  return fullPath;\n}\n\n/**\n * Get category object from full hierarchical path\n * \n * @param path - Full category path (e.g., \"trading-strategies/scalping-m1-m15\")\n * @returns Category object or null if not found\n * \n * @example\n * const category = await getCategoryByPath(\"trading-strategies/scalping-m1-m15\");\n * // Returns: { slug: \"scalping-m1-m15\", name: \"Scalping Strategies (M1–M15)\", ... }\n */\nexport async function getCategoryByPath(path: string) {\n  const slugs = path.split('/');\n  const targetSlug = slugs[slugs.length - 1]; // Last segment is the actual category\n  \n  const [category] = await db\n    .select()\n    .from(forumCategories)\n    .where(eq(forumCategories.slug, targetSlug))\n    .limit(1);\n  \n  return category || null;\n}\n\n/**\n * Build full hierarchical URL for a forum thread\n * \n * @param thread - Forum thread object with categorySlug\n * @returns Full URL path\n * \n * @example\n * const url = await getThreadUrl(thread);\n * // Returns: \"/category/trading-strategies/scalping-m1-m15/thread-slug\"\n */\nexport async function getThreadUrl(thread: Pick<ForumThread, 'categorySlug' | 'slug'>): Promise<string> {\n  const categoryPath = await getCategoryPath(thread.categorySlug);\n  return `/category/${categoryPath}/${thread.slug}`;\n}\n\n/**\n * Build full hierarchical URL for marketplace content\n * \n * @param content - Content object with category\n * @returns Full URL path\n * \n * @example\n * const url = await getContentUrl(content);\n * // Returns: \"/category/ea-library/scalping-eas/gold-scalper-pro\"\n */\nexport async function getContentUrl(content: Pick<Content, 'category' | 'slug'>): Promise<string> {\n  const categoryPath = await getCategoryPath(content.category);\n  return `/category/${categoryPath}/${content.slug}`;\n}\n\n/**\n * Build URL for broker profile\n * For now, brokers use a simpler structure: /brokers/[slug]\n * Can be extended later to: /brokers/[type]/[slug]\n * \n * @param brokerSlug - Broker slug\n * @returns Broker URL path\n */\nexport function getBrokerUrl(brokerSlug: string): string {\n  return `/brokers/${brokerSlug}`;\n}\n\n/**\n * Build URL for category browsing page\n * \n * @param categorySlug - Category slug\n * @returns Category browsing URL\n * \n * @example\n * const url = await getCategoryUrl(\"scalping-m1-m15\");\n * // Returns: \"/category/trading-strategies/scalping-m1-m15\"\n */\nexport async function getCategoryUrl(categorySlug: string): Promise<string> {\n  const categoryPath = await getCategoryPath(categorySlug);\n  return `/category/${categoryPath}`;\n}\n\n/**\n * Clear the category path cache\n * Useful after bulk category updates\n */\nexport function clearCategoryPathCache() {\n  pathCache.clear();\n}\n\n/**\n * Parse a hierarchical URL path into components\n * \n * @param urlPath - Full URL path (e.g., \"/category/trading-strategies/scalping/thread-slug\")\n * @returns Parsed components\n * \n * @example\n * const parsed = parseHierarchicalUrl(\"/category/trading-strategies/scalping-m1-m15/my-thread\");\n * // Returns: {\n * //   categoryPath: \"trading-strategies/scalping-m1-m15\",\n * //   contentSlug: \"my-thread\",\n * //   isCategory: false\n * // }\n */\nexport function parseHierarchicalUrl(urlPath: string): {\n  categoryPath: string;\n  contentSlug: string | null;\n  isCategory: boolean;\n} {\n  // Remove leading /category/ prefix\n  const cleanPath = urlPath.replace(/^\\/category\\//, '');\n  const segments = cleanPath.split('/');\n  \n  // If only one segment, it's a root category\n  if (segments.length === 1) {\n    return {\n      categoryPath: segments[0],\n      contentSlug: null,\n      isCategory: true,\n    };\n  }\n  \n  // Last segment could be content or subcategory - caller must determine\n  const contentSlug = segments[segments.length - 1];\n  const categoryPath = segments.slice(0, -1).join('/');\n  \n  return {\n    categoryPath,\n    contentSlug,\n    isCategory: false, // Assume content, caller should verify\n  };\n}\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;;;;;;;;;;;;;;;;;;AAED;AACA;AACA;;;;AAEA,oDAAoD;AACpD,MAAM,YAAY,IAAI;AACtB,MAAM,YAAY,IAAI,KAAK,MAAM,YAAY;AAYtC,eAAe,gBAAgB,YAAoB;IACxD,oBAAoB;IACpB,MAAM,SAAS,UAAU,GAAG,CAAC;IAC7B,IAAI,UAAU,OAAO,MAAM,GAAG,KAAK,GAAG,IAAI;QACxC,OAAO,OAAO,IAAI;IACpB;IAEA,MAAM,OAAiB,EAAE;IACzB,IAAI,cAA6B;IACjC,MAAM,UAAU,IAAI,OAAe,yBAAyB;IAE5D,2BAA2B;IAC3B,MAAO,eAAe,CAAC,QAAQ,GAAG,CAAC,aAAc;QAC/C,QAAQ,GAAG,CAAC;QAEZ,MAAM,CAAC,SAAS,GAAG,MAAM,kHAAE,CACxB,MAAM,GACN,IAAI,CAAC,mIAAe,EACpB,KAAK,CAAC,IAAA,wKAAE,EAAC,mIAAe,CAAC,IAAI,EAAE,cAC/B,KAAK,CAAC;QAET,IAAI,CAAC,UAAU;QAEf,KAAK,OAAO,CAAC,SAAS,IAAI,GAAG,mBAAmB;QAChD,cAAc,SAAS,UAAU;IACnC;IAEA,MAAM,WAAW,KAAK,IAAI,CAAC;IAE3B,mBAAmB;IACnB,UAAU,GAAG,CAAC,cAAc;QAC1B,MAAM;QACN,QAAQ,KAAK,GAAG,KAAK;IACvB;IAEA,OAAO;AACT;AAYO,eAAe,kBAAkB,IAAY;IAClD,MAAM,QAAQ,KAAK,KAAK,CAAC;IACzB,MAAM,aAAa,KAAK,CAAC,MAAM,MAAM,GAAG,EAAE,EAAE,sCAAsC;IAElF,MAAM,CAAC,SAAS,GAAG,MAAM,kHAAE,CACxB,MAAM,GACN,IAAI,CAAC,mIAAe,EACpB,KAAK,CAAC,IAAA,wKAAE,EAAC,mIAAe,CAAC,IAAI,EAAE,aAC/B,KAAK,CAAC;IAET,OAAO,YAAY;AACrB;AAYO,eAAe,aAAa,MAAkD;IACnF,MAAM,eAAe,MAAM,gBAAgB,OAAO,YAAY;IAC9D,OAAO,CAAC,UAAU,EAAE,aAAa,CAAC,EAAE,OAAO,IAAI,EAAE;AACnD;AAYO,eAAe,cAAc,OAA2C;IAC7E,MAAM,eAAe,MAAM,gBAAgB,QAAQ,QAAQ;IAC3D,OAAO,CAAC,UAAU,EAAE,aAAa,CAAC,EAAE,QAAQ,IAAI,EAAE;AACpD;AAUO,SAAS,aAAa,UAAkB;IAC7C,OAAO,CAAC,SAAS,EAAE,YAAY;AACjC;AAYO,eAAe,eAAe,YAAoB;IACvD,MAAM,eAAe,MAAM,gBAAgB;IAC3C,OAAO,CAAC,UAAU,EAAE,cAAc;AACpC;AAMO,SAAS;IACd,UAAU,KAAK;AACjB;AAgBO,SAAS,qBAAqB,OAAe;IAKlD,mCAAmC;IACnC,MAAM,YAAY,QAAQ,OAAO,CAAC,iBAAiB;IACnD,MAAM,WAAW,UAAU,KAAK,CAAC;IAEjC,4CAA4C;IAC5C,IAAI,SAAS,MAAM,KAAK,GAAG;QACzB,OAAO;YACL,cAAc,QAAQ,CAAC,EAAE;YACzB,aAAa;YACb,YAAY;QACd;IACF;IAEA,uEAAuE;IACvE,MAAM,cAAc,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;IACjD,MAAM,eAAe,SAAS,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IAEhD,OAAO;QACL;QACA;QACA,YAAY;IACd;AACF","debugId":null}},
    {"offset": {"line": 2668, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/components/BreadcrumbSchema.tsx"],"sourcesContent":["interface BreadcrumbItem {\n  name: string;\n  url: string;\n}\n\ninterface BreadcrumbSchemaProps {\n  path: BreadcrumbItem[];\n}\n\nexport default function BreadcrumbSchema({ path }: BreadcrumbSchemaProps) {\n  const breadcrumbList = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": path.map((item, index) => ({\n      \"@type\": \"ListItem\",\n      \"position\": index + 1,\n      \"name\": item.name,\n      \"item\": item.url\n    }))\n  };\n\n  return (\n    <script\n      type=\"application/ld+json\"\n      dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbList) }}\n    />\n  );\n}\n"],"names":[],"mappings":";;;;;;AASe,SAAS,iBAAiB,EAAE,IAAI,EAAyB;IACtE,MAAM,iBAAiB;QACrB,YAAY;QACZ,SAAS;QACT,mBAAmB,KAAK,GAAG,CAAC,CAAC,MAAM,QAAU,CAAC;gBAC5C,SAAS;gBACT,YAAY,QAAQ;gBACpB,QAAQ,KAAK,IAAI;gBACjB,QAAQ,KAAK,GAAG;YAClB,CAAC;IACH;IAEA,qBACE,8OAAC;QACC,MAAK;QACL,yBAAyB;YAAE,QAAQ,KAAK,SAAS,CAAC;QAAgB;;;;;;AAGxE","debugId":null}},
    {"offset": {"line": 2700, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/components/SchemaGenerator.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const SchemaScript = registerClientReference(\n    function() { throw new Error(\"Attempted to call SchemaScript() from the server but SchemaScript is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/SchemaGenerator.tsx <module evaluation>\",\n    \"SchemaScript\",\n);\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/components/SchemaGenerator.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/SchemaGenerator.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;AACvE;;AACO,MAAM,eAAe,IAAA,wQAAuB,EAC/C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,oEACA;uCAEW,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2719, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/components/SchemaGenerator.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const SchemaScript = registerClientReference(\n    function() { throw new Error(\"Attempted to call SchemaScript() from the server but SchemaScript is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/SchemaGenerator.tsx\",\n    \"SchemaScript\",\n);\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/components/SchemaGenerator.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/SchemaGenerator.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;AACvE;;AACO,MAAM,eAAe,IAAA,wQAAuB,EAC/C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,gDACA;uCAEW,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2738, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 2746, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/schema-utils.ts"],"sourcesContent":["/**\n * Schema Utilities - Validation, Sanitization, and Field Mapping\n * \n * Provides helper functions for Schema.org JSON-LD generation:\n * - URL normalization and validation\n * - HTML sanitization for schema fields\n * - Date formatting to ISO 8601\n * - Conditional property validation\n * - Schema quality checks\n */\n\n/**\n * Convert relative URL to absolute URL\n * Handles http, https, protocol-relative (//), data, and mailto URLs\n * \n * @param url - URL to convert (can be relative or absolute)\n * @param baseUrl - Base URL of the site\n * @returns Absolute URL or undefined if input is null/undefined\n */\nexport function toAbsoluteUrl(url: string | undefined | null, baseUrl: string): string | undefined {\n  if (!url) return undefined;\n  \n  // Trim whitespace\n  url = url.trim();\n  \n  // Already absolute (http or https)\n  if (url.startsWith('http://') || url.startsWith('https://')) {\n    return url;\n  }\n  \n  // Protocol-relative URL (//cdn.example.com/image.jpg)\n  if (url.startsWith('//')) {\n    return `https:${url}`; // Add https: protocol\n  }\n  \n  // Data URLs (data:image/png;base64,...)\n  if (url.startsWith('data:')) {\n    return url;\n  }\n  \n  // Mailto URLs\n  if (url.startsWith('mailto:')) {\n    return url;\n  }\n  \n  // Telephone URLs\n  if (url.startsWith('tel:')) {\n    return url;\n  }\n  \n  // Relative URL starting with /\n  if (url.startsWith('/')) {\n    return `${baseUrl}${url}`;\n  }\n  \n  // Relative URL without leading slash\n  return `${baseUrl}/${url}`;\n}\n\n/**\n * Validate and ensure image URL is absolute with proper formatting\n * Google recommends images be at least 1200px wide for optimal rich results\n * \n * @param url - Image URL to validate\n * @param baseUrl - Base URL of the site\n * @returns Absolute image URL or undefined if input is null/undefined\n */\nexport function validateImageUrl(url: string | undefined | null, baseUrl: string): string | undefined {\n  const absoluteUrl = toAbsoluteUrl(url, baseUrl);\n  \n  // Add size parameter for recommended 1200px width if it's from YoForex domain\n  if (absoluteUrl && absoluteUrl.includes(baseUrl)) {\n    // Add image optimization parameters if supported\n    // This can be extended to add query params like ?w=1200 if image service supports it\n    return absoluteUrl;\n  }\n  \n  return absoluteUrl;\n}\n\n/**\n * Sanitize HTML content for schema articleBody\n * Removes HTML tags and normalizes whitespace\n * Relies on JSON.stringify for proper escaping\n * \n * @param html - HTML content to sanitize\n * @returns Clean text suitable for schema.org or undefined if input is null/undefined\n */\nexport function sanitizeForSchema(html: string | undefined | null): string | undefined {\n  if (!html) return undefined;\n  \n  // Strip HTML tags\n  let text = html.replace(/<[^>]*>/g, '');\n  \n  // Decode HTML entities\n  text = text.replace(/&nbsp;/g, ' ')\n            .replace(/&quot;/g, '\"')\n            .replace(/&apos;/g, \"'\")\n            .replace(/&lt;/g, '<')\n            .replace(/&gt;/g, '>')\n            .replace(/&amp;/g, '&');\n  \n  // Normalize whitespace (but don't escape quotes - JSON.stringify handles that)\n  text = text.replace(/\\n/g, ' ')\n            .replace(/\\r/g, '')\n            .replace(/\\t/g, ' ')\n            .replace(/\\s+/g, ' '); // Collapse multiple spaces\n  \n  // Trim whitespace\n  return text.trim();\n}\n\n/**\n * Convert database timestamp to ISO 8601 format\n * Schema.org requires ISO 8601 date format for all date fields\n * \n * @param date - Date object or string to convert\n * @returns ISO 8601 formatted date string or undefined if invalid\n */\nexport function toISO8601(date: Date | string | undefined | null): string | undefined {\n  if (!date) return undefined;\n  \n  try {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    \n    // Check if date is valid\n    if (isNaN(dateObj.getTime())) {\n      return undefined;\n    }\n    \n    return dateObj.toISOString();\n  } catch (e) {\n    console.warn('[Schema Utils] Invalid date conversion:', date);\n    return undefined;\n  }\n}\n\n/**\n * Check if aggregateRating should be included\n * Google requires minimum 5 reviews for aggregateRating to be valid\n * \n * @param reviewCount - Number of reviews\n * @returns True if rating should be included (>= 5 reviews)\n */\nexport function shouldIncludeRating(reviewCount: number): boolean {\n  return reviewCount >= 5;\n}\n\n/**\n * Validate schema has all required properties before generation\n * Prevents generating invalid schemas that won't pass Google validation\n * \n * @param schema - Schema object to validate\n * @param requiredProps - Array of required property names\n * @returns True if all required properties exist and are non-empty\n */\nexport function validateRequiredProperties(schema: any, requiredProps: string[]): boolean {\n  return requiredProps.every(prop => {\n    const value = schema[prop];\n    \n    // Check for nested properties (e.g., 'author.name')\n    if (prop.includes('.')) {\n      const parts = prop.split('.');\n      let current = schema;\n      for (const part of parts) {\n        if (!current || current[part] === undefined || current[part] === null) {\n          return false;\n        }\n        current = current[part];\n      }\n      return current !== '';\n    }\n    \n    // Direct property check\n    return value !== undefined && value !== null && value !== '';\n  });\n}\n\n/**\n * Get inLanguage property for schema.org\n * Currently defaults to 'en' but can be extended with language detection\n * \n * @param content - Content to analyze (for future language detection)\n * @returns Language code (BCP 47 format)\n */\nexport function getLanguage(content?: string): string {\n  // Future enhancement: Implement language detection\n  // For now, default to English as primary platform language\n  return 'en';\n}\n\n/**\n * Truncate text to specified length while preserving word boundaries\n * Useful for meta descriptions and schema descriptions\n * \n * @param text - Text to truncate\n * @param maxLength - Maximum length\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string | undefined | null, maxLength: number): string | undefined {\n  if (!text) return undefined;\n  \n  if (text.length <= maxLength) {\n    return text;\n  }\n  \n  // Truncate at last space before maxLength\n  const truncated = text.substring(0, maxLength);\n  const lastSpace = truncated.lastIndexOf(' ');\n  \n  if (lastSpace > 0) {\n    return truncated.substring(0, lastSpace) + '...';\n  }\n  \n  return truncated + '...';\n}\n\n/**\n * Calculate word count for articleBody\n * Used in Article and BlogPosting schemas\n * \n * @param text - Text to count words in\n * @returns Number of words\n */\nexport function getWordCount(text: string | undefined | null): number {\n  if (!text) return 0;\n  \n  // Remove extra whitespace and split on word boundaries\n  return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2897, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/schema-generator.ts"],"sourcesContent":["/**\n * Dynamic Schema.org JSON-LD Generator\n * \n * Complies with:\n * - Schema.org v29.3 (Latest 2025 standard)\n * - Google Rich Results Guidelines 2025\n * - JSON-LD 1.0 specification\n * \n * Features:\n * - Automatic content type detection\n * - Dynamic schema generation based on page context\n * - Type-safe schema builders\n * - Validation-ready output\n */\n\nimport { ForumThread, Content, User, ForumCategory } from '@shared/schema';\nimport { \n  toAbsoluteUrl, \n  validateImageUrl, \n  sanitizeForSchema, \n  toISO8601, \n  shouldIncludeRating,\n  validateRequiredProperties,\n  getLanguage,\n  getWordCount\n} from './schema-utils';\n\n// ============================================================================\n// TYPE DEFINITIONS\n// ============================================================================\n\nexport type SchemaContext = 'https://schema.org';\n\nexport interface BaseSchema {\n  '@context': SchemaContext;\n  '@type': string;\n  '@id'?: string;\n}\n\nexport interface OrganizationSchema extends BaseSchema {\n  '@type': 'Organization';\n  name: string;\n  url: string;\n  logo?: string;\n  description?: string;\n  email?: string;\n  telephone?: string;\n  address?: PostalAddress;\n  sameAs?: string[];\n  foundingDate?: string;\n}\n\nexport interface PostalAddress {\n  '@type': 'PostalAddress';\n  streetAddress?: string;\n  addressLocality?: string;\n  addressRegion?: string;\n  postalCode?: string;\n  addressCountry?: string;\n}\n\nexport interface WebSiteSchema extends BaseSchema {\n  '@type': 'WebSite';\n  url: string;\n  name: string;\n  description?: string;\n  inLanguage?: string;\n  publisher?: { '@id': string };\n  potentialAction?: SearchAction;\n}\n\nexport interface SearchAction {\n  '@type': 'SearchAction';\n  target: string | EntryPoint;\n  'query-input'?: string;\n}\n\nexport interface EntryPoint {\n  '@type': 'EntryPoint';\n  urlTemplate: string;\n}\n\nexport interface BreadcrumbListSchema extends BaseSchema {\n  '@type': 'BreadcrumbList';\n  itemListElement: ListItem[];\n}\n\nexport interface ListItem {\n  '@type': 'ListItem';\n  position: number;\n  name: string;\n  item?: string | { '@id': string; name: string };\n}\n\nexport interface ArticleSchema extends BaseSchema {\n  '@type': 'Article' | 'BlogPosting' | 'NewsArticle';\n  headline: string;\n  description?: string;\n  image?: string | string[];\n  datePublished: string;\n  dateModified?: string;\n  author: Person | Organization;\n  publisher: Organization;\n  articleBody?: string;\n  wordCount?: number;\n  commentCount?: number;\n  interactionStatistic?: InteractionCounter;\n}\n\nexport interface Person {\n  '@type': 'Person';\n  '@id'?: string;\n  name: string;\n  url?: string;\n  image?: string;\n}\n\nexport interface Organization {\n  '@type': 'Organization';\n  '@id'?: string;\n  name: string;\n  url?: string;\n  logo?: ImageObject;\n}\n\nexport interface ImageObject {\n  '@type': 'ImageObject';\n  url: string;\n  width?: number;\n  height?: number;\n}\n\nexport interface InteractionCounter {\n  '@type': 'InteractionCounter';\n  interactionType: string;\n  userInteractionCount: number;\n}\n\n// ============================================================================\n// DISCUSSION FORUM POSTING SCHEMA (Schema.org 2025)\n// ============================================================================\n\nexport interface DiscussionForumPostingSchema extends BaseSchema {\n  '@type': 'DiscussionForumPosting';\n  '@id': string;\n  headline: string;\n  articleBody: string;\n  author: Person | Organization;\n  datePublished: string;\n  dateModified?: string;\n  url: string;\n  mainEntityOfPage?: { '@id': string };\n  inLanguage?: string;\n  interactionStatistic?: InteractionCounter[];\n  comment?: CommentSchema[];\n  commentCount?: number;\n  publisher?: Organization;\n}\n\nexport interface CommentSchema extends BaseSchema {\n  '@type': 'Comment';\n  '@id'?: string;\n  text: string;\n  author: Person | Organization;\n  datePublished: string;\n  upvoteCount?: number;\n  parentItem?: { '@id': string };\n}\n\n// ============================================================================\n// PRODUCT SCHEMA (Schema.org 2025 - Enhanced)\n// ============================================================================\n\nexport interface ProductSchema extends BaseSchema {\n  '@type': 'Product';\n  '@id': string;\n  name: string;\n  description: string;\n  image?: string | string[];\n  brand?: Organization | { '@type': 'Brand'; name: string };\n  offers: OfferSchema;\n  aggregateRating?: AggregateRatingSchema;\n  review?: ReviewSchema[];\n  sku?: string;\n  gtin?: string;\n  mpn?: string;\n  additionalType?: string;\n  category?: string;\n}\n\nexport interface OfferSchema {\n  '@type': 'Offer';\n  price: string;\n  priceCurrency: string;\n  availability: string;\n  url?: string;\n  seller?: Organization | Person;\n  priceValidUntil?: string;\n}\n\nexport interface AggregateRatingSchema {\n  '@type': 'AggregateRating';\n  ratingValue: number;\n  reviewCount: number;\n  bestRating?: number;\n  worstRating?: number;\n}\n\nexport interface ReviewSchema {\n  '@type': 'Review';\n  author: Person;\n  datePublished: string;\n  reviewRating: {\n    '@type': 'Rating';\n    ratingValue: number;\n    bestRating?: number;\n  };\n  reviewBody?: string;\n}\n\n// Legacy type aliases for backward compatibility\nexport interface Brand {\n  '@type': 'Brand';\n  name: string;\n}\n\nexport interface Offer extends OfferSchema {}\nexport interface AggregateRating extends AggregateRatingSchema {}\nexport interface Review extends ReviewSchema {}\n\nexport interface Rating {\n  '@type': 'Rating';\n  ratingValue: number;\n  bestRating?: number;\n  worstRating?: number;\n}\n\n// ============================================================================\n// FAQ PAGE SCHEMA (Schema.org 2025 - Enhanced)\n// ============================================================================\n\nexport interface FAQPageSchema extends BaseSchema {\n  '@type': 'FAQPage';\n  '@id': string;\n  mainEntity: QuestionSchema[];\n}\n\nexport interface QuestionSchema {\n  '@type': 'Question';\n  '@id'?: string;\n  name: string;\n  acceptedAnswer: AnswerSchema;\n}\n\nexport interface AnswerSchema {\n  '@type': 'Answer';\n  '@id'?: string;\n  text: string;\n  dateCreated?: string;\n  upvoteCount?: number;\n  url?: string;\n  author?: Person;\n}\n\n// Legacy type aliases for backward compatibility\nexport interface Question extends QuestionSchema {}\nexport interface Answer extends AnswerSchema {}\n\n// ============================================================================\n// VIDEO OBJECT SCHEMA (Schema.org 2025 - Enhanced)\n// ============================================================================\n\nexport interface VideoObjectSchema extends BaseSchema {\n  '@type': 'VideoObject';\n  '@id': string;\n  name: string;\n  description: string;\n  thumbnailUrl: string | string[];\n  uploadDate: string;\n  contentUrl?: string;\n  embedUrl?: string;\n  duration?: string;\n  interactionStatistic?: InteractionCounter;\n  author?: Person | Organization;\n}\n\n// ============================================================================\n// NEWS ARTICLE SCHEMA (Schema.org 2025)\n// ============================================================================\n\nexport interface NewsArticleSchema extends BaseSchema {\n  '@type': 'NewsArticle';\n  '@id': string;\n  headline: string;\n  description?: string;\n  image?: string | string[];\n  datePublished: string;\n  dateModified?: string;\n  author: Person | Organization;\n  publisher: Organization;\n  articleBody?: string;\n  inLanguage?: string;\n  dateline?: string;\n  url: string;\n}\n\n// ============================================================================\n// BLOG POSTING SCHEMA (Schema.org 2025)\n// ============================================================================\n\nexport interface BlogPostingSchema extends BaseSchema {\n  '@type': 'BlogPosting';\n  '@id': string;\n  headline: string;\n  description?: string;\n  image?: string | string[];\n  datePublished: string;\n  dateModified?: string;\n  author: Person | Organization;\n  publisher: Organization;\n  articleBody?: string;\n  wordCount?: number;\n  inLanguage?: string;\n  articleSection?: string;\n  url: string;\n  mainEntityOfPage?: { '@id': string };\n}\n\nexport interface ProfilePageSchema extends BaseSchema {\n  '@type': 'ProfilePage';\n  mainEntity: Person;\n  dateCreated?: string;\n  dateModified?: string;\n}\n\nexport interface PersonSchema extends BaseSchema {\n  '@type': 'Person';\n  '@id': string;\n  name: string;\n  url: string;\n  image?: string;\n  jobTitle?: string;\n  description?: string;\n  alumniOf?: Organization;\n  affiliation?: Organization;\n  worksFor?: Organization;\n  sameAs?: string[];\n  knowsAbout?: string[];\n  interactionStatistic?: InteractionCounter[];\n}\n\n// ============================================================================\n// SITE CONFIGURATION\n// ============================================================================\n\nexport interface SiteConfig {\n  name: string;\n  url: string;\n  description: string;\n  logo: string;\n  organizationId: string;\n  foundingDate?: string;\n  email?: string;\n  telephone?: string;\n  socialProfiles?: string[];\n  searchEndpoint?: string;\n}\n\n// Default YoForex configuration\nexport const SITE_CONFIG: SiteConfig = {\n  name: 'YoForex',\n  url: process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com',\n  description: 'Global forex trading community platform featuring forum discussions, EA marketplace, broker reviews, and expert insights',\n  logo: `${process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com'}/logo.png`,\n  organizationId: `${process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com'}/#organization`,\n  foundingDate: '2024-01-01',\n  email: 'contact@yoforex.com',\n  socialProfiles: [\n    'https://twitter.com/yoforex',\n    'https://linkedin.com/company/yoforex',\n    'https://facebook.com/yoforex',\n  ],\n  searchEndpoint: '/search?q={search_term_string}',\n};\n\n// ============================================================================\n// SCHEMA GENERATORS\n// ============================================================================\n\n/**\n * Generate WebSite schema with SearchAction\n * Should be included on all pages (usually in root layout)\n */\nexport function generateWebSiteSchema(config: SiteConfig = SITE_CONFIG): WebSiteSchema {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'WebSite',\n    '@id': `${config.url}/#website`,\n    url: config.url,\n    name: config.name,\n    description: config.description,\n    inLanguage: 'en-US',\n    publisher: {\n      '@id': config.organizationId,\n    },\n    potentialAction: config.searchEndpoint\n      ? {\n          '@type': 'SearchAction',\n          target: {\n            '@type': 'EntryPoint',\n            urlTemplate: `${config.url}${config.searchEndpoint}`,\n          },\n          'query-input': 'required name=search_term_string',\n        }\n      : undefined,\n  };\n}\n\n/**\n * Generate Organization schema\n * Should be included on homepage and about page\n */\nexport function generateOrganizationSchema(\n  config: SiteConfig = SITE_CONFIG\n): OrganizationSchema {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Organization',\n    '@id': config.organizationId,\n    name: config.name,\n    url: config.url,\n    logo: config.logo,\n    description: config.description,\n    email: config.email,\n    telephone: config.telephone,\n    foundingDate: config.foundingDate,\n    sameAs: config.socialProfiles,\n  };\n}\n\n/**\n * Generate BreadcrumbList schema from path segments\n * @param items Array of breadcrumb items with name and url\n */\nexport function generateBreadcrumbSchema(\n  items: Array<{ name: string; url: string }>\n): BreadcrumbListSchema {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: items.map((item, index) => ({\n      '@type': 'ListItem',\n      position: index + 1,\n      name: item.name,\n      item: index < items.length - 1 ? item.url : undefined, // Last item shouldn't have URL\n    })),\n  };\n}\n\n/**\n * Generate Article schema for forum threads\n * Complies with Google Rich Results requirements\n */\nexport function generateArticleSchema(params: {\n  thread: ForumThread;\n  author?: User;\n  canonicalUrl: string;\n  category?: ForumCategory;\n}): ArticleSchema {\n  const { thread, author, canonicalUrl, category } = params;\n\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Article',\n    '@id': canonicalUrl,\n    headline: thread.title,\n    description: thread.metaDescription || thread.body?.substring(0, 160) || '',\n    image: `${SITE_CONFIG.logo}`, // Thread schema doesn't have featured image\n    datePublished: new Date(thread.createdAt).toISOString(),\n    dateModified: new Date(thread.updatedAt).toISOString(),\n    author: author\n      ? {\n          '@type': 'Person',\n          name: author.username,\n          url: `${SITE_CONFIG.url}/user/${author.username}`,\n        }\n      : {\n          '@type': 'Person',\n          name: 'YoForex Community',\n        },\n    publisher: {\n      '@type': 'Organization',\n      '@id': SITE_CONFIG.organizationId,\n      name: SITE_CONFIG.name,\n      logo: {\n        '@type': 'ImageObject',\n        url: SITE_CONFIG.logo,\n      },\n    },\n    wordCount: thread.body ? thread.body.split(/\\s+/).length : 0,\n    commentCount: thread.replyCount || 0,\n    interactionStatistic: {\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/ViewAction',\n      userInteractionCount: thread.views || 0,\n    },\n  };\n}\n\n/**\n * Generate Product schema for marketplace items (Schema.org 2025 Enhanced)\n * Includes offers, ratings, and reviews\n * Supports digital products (SoftwareApplication for EAs/Indicators)\n */\nexport function generateProductSchema(params: {\n  product: Content;\n  baseUrl: string;\n  author: User;\n  averageRating?: number;\n  reviewCount?: number;\n  reviews?: Array<{ author: User; rating: number; comment: string; createdAt: Date }>;\n}): ProductSchema {\n  const { product, baseUrl, author, averageRating, reviewCount, reviews } = params;\n\n  const images = product.images || [];\n  const coverImage = images.find((img) => img.isCover) || images[0];\n  const imageUrl = images.length > 0 ? images[0].url : undefined;\n\n  // Determine additional type based on content type\n  let additionalType: string | undefined;\n  if (product.type === 'ea' || product.type === 'indicator') {\n    additionalType = 'https://schema.org/SoftwareApplication';\n  }\n\n  // Build reviews array if provided with Person schema links\n  const reviewSchemas: ReviewSchema[] | undefined = reviews?.map((review) => ({\n    '@context': 'https://schema.org',\n    '@type': 'Review',\n    author: {\n      '@type': 'Person',\n      '@id': `${baseUrl}/user/${review.author.username}#person`,\n      name: review.author.username,\n      url: `${baseUrl}/user/${review.author.username}`,\n    },\n    datePublished: toISO8601(review.createdAt)!,\n    reviewRating: {\n      '@type': 'Rating',\n      ratingValue: review.rating,\n      bestRating: 5,\n    },\n    reviewBody: sanitizeForSchema(review.comment),\n  }));\n\n  const schema: ProductSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'Product',\n    '@id': `${baseUrl}/content/${product.slug}#product`,\n    name: product.title,\n    description: sanitizeForSchema(product.description) || '',\n    image: validateImageUrl(imageUrl || coverImage?.url, baseUrl) || `${baseUrl}/logo.png`,\n    brand: {\n      '@type': 'Brand',\n      name: SITE_CONFIG.name,\n    },\n    offers: {\n      '@type': 'Offer',\n      price: product.isFree ? '0' : (product.priceCoins || 0).toString(),\n      priceCurrency: 'USD',\n      availability: product.status === 'approved' \n        ? 'https://schema.org/InStock' \n        : 'https://schema.org/OutOfStock',\n      url: `${baseUrl}/content/${product.slug}`,\n      seller: {\n        '@type': 'Person',\n        '@id': `${baseUrl}/user/${author.username}#person`,\n        name: author.username,\n        url: `${baseUrl}/user/${author.username}`,\n      },\n    },\n    sku: product.id,\n    ...(additionalType && { additionalType }),\n    ...(product.category && { category: product.category }),\n  };\n  \n  // Conditional: Include aggregateRating only when minimum 5 reviews present\n  if (reviewCount && shouldIncludeRating(reviewCount) && averageRating) {\n    schema.aggregateRating = {\n      '@type': 'AggregateRating',\n      ratingValue: averageRating,\n      reviewCount: reviewCount,\n      bestRating: 5,\n      worstRating: 1,\n    };\n  }\n  \n  // Include individual reviews\n  if (reviewSchemas && reviewSchemas.length > 0) {\n    schema.review = reviewSchemas;\n  }\n  \n  // Validate required properties\n  if (!validateRequiredProperties(schema, ['name', 'offers'])) {\n    throw new Error('Missing required Product schema properties');\n  }\n  \n  return schema;\n}\n\n/**\n * Generate comprehensive Person schema for user profiles\n * Follows Schema.org 2025 Person specification\n */\nexport function generatePersonSchema(params: {\n  user: User;\n  baseUrl: string;\n  reputationScore?: number;\n  threadCount?: number;\n  replyCount?: number;\n  badges?: string[];\n}): PersonSchema {\n  const { user, baseUrl, reputationScore, threadCount, replyCount, badges } = params;\n  \n  // Build name from firstName/lastName or fallback to username\n  const name = user.firstName && user.lastName \n    ? `${user.firstName} ${user.lastName}`\n    : user.username;\n  \n  // Build sameAs array from social profiles\n  const sameAs: string[] = [];\n  if (user.youtubeUrl) sameAs.push(user.youtubeUrl);\n  if (user.instagramHandle) {\n    // Handle both full URLs and handles\n    const instaUrl = user.instagramHandle.startsWith('http') \n      ? user.instagramHandle \n      : `https://instagram.com/${user.instagramHandle}`;\n    sameAs.push(instaUrl);\n  }\n  if (user.telegramHandle) {\n    // Handle both full URLs and handles\n    const telegramUrl = user.telegramHandle.startsWith('http') || user.telegramHandle.startsWith('https://t.me/')\n      ? user.telegramHandle\n      : `https://t.me/${user.telegramHandle}`;\n    sameAs.push(telegramUrl);\n  }\n  if (user.myfxbookLink) sameAs.push(user.myfxbookLink);\n  \n  // Build knowsAbout from badges (expertise areas)\n  const knowsAbout: string[] = [];\n  if (badges && badges.length > 0) {\n    // Map badge types to expertise areas\n    const badgeToExpertise: Record<string, string> = {\n      'EA_EXPERT': 'Expert Advisor Development',\n      'TRADER_PRO': 'Forex Trading',\n      'HELPFUL_MEMBER': 'Community Support',\n      'TOP_CONTRIBUTOR': 'Technical Analysis',\n      'VERIFIED_TRADER': 'Live Trading',\n      'EARLY_ADOPTER': 'Trading Systems',\n      'CONTENT_CREATOR': 'Trading Education'\n    };\n    badges.forEach(badge => {\n      if (badgeToExpertise[badge]) {\n        knowsAbout.push(badgeToExpertise[badge]);\n      }\n    });\n  }\n  \n  // Add default expertise based on user level\n  if (!knowsAbout.length) {\n    knowsAbout.push('Forex Trading', 'Expert Advisors');\n  }\n  \n  // Build interaction statistics\n  const interactionStatistic: InteractionCounter[] = [];\n  if (threadCount) {\n    interactionStatistic.push({\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/CreateAction',\n      userInteractionCount: threadCount,\n    });\n  }\n  if (replyCount) {\n    interactionStatistic.push({\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/CommentAction',\n      userInteractionCount: replyCount,\n    });\n  }\n  \n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Person',\n    '@id': `${baseUrl}/user/${user.username}#person`,\n    name,\n    url: `${baseUrl}/user/${user.username}`,\n    image: user.profileImageUrl || `${baseUrl}/default-avatar.png`,\n    description: `Forex trader and community member on YoForex with ${reputationScore || 0} reputation points`,\n    jobTitle: 'Forex Trader',\n    worksFor: {\n      '@type': 'Organization',\n      '@id': `${baseUrl}#organization`,\n      name: 'YoForex Community',\n      url: baseUrl,\n    },\n    ...(sameAs.length > 0 && { sameAs }),\n    ...(knowsAbout.length > 0 && { knowsAbout }),\n    ...(interactionStatistic.length > 0 && { interactionStatistic }),\n  };\n}\n\n/**\n * Generate ProfilePage schema for user profiles (legacy)\n * Use generatePersonSchema for comprehensive Person schema\n */\nexport function generateProfilePageSchema(params: {\n  user: User;\n  canonicalUrl: string;\n}): ProfilePageSchema {\n  const { user, canonicalUrl } = params;\n\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'ProfilePage',\n    '@id': canonicalUrl,\n    mainEntity: {\n      '@type': 'Person',\n      '@id': `${canonicalUrl}#person`,\n      name: user.username,\n      url: canonicalUrl,\n      image: user.profileImageUrl || undefined,\n    },\n    dateCreated: user.createdAt ? new Date(user.createdAt).toISOString() : undefined,\n  };\n}\n\n/**\n * Generate FAQPage schema from Q&A content (Schema.org 2025 Enhanced)\n */\nexport function generateFAQPageSchema(params: {\n  questions: Array<{ question: string; answer: string; id?: string }>;\n  baseUrl: string;\n  pageUrl: string;\n}): FAQPageSchema {\n  const { questions, baseUrl, pageUrl } = params;\n  \n  return {\n    '@context': 'https://schema.org',\n    '@type': 'FAQPage',\n    '@id': pageUrl,\n    mainEntity: questions.map((q, index) => ({\n      '@type': 'Question',\n      '@id': q.id || `${pageUrl}#question-${index + 1}`,\n      name: q.question,\n      acceptedAnswer: {\n        '@type': 'Answer',\n        '@id': q.id ? `${pageUrl}#answer-${q.id}` : `${pageUrl}#answer-${index + 1}`,\n        text: q.answer,\n      },\n    })),\n  };\n}\n\n/**\n * Legacy alias for backward compatibility\n */\nexport function generateFAQSchema(\n  questions: Array<{ question: string; answer: string }>\n): FAQPageSchema {\n  return generateFAQPageSchema({\n    questions,\n    baseUrl: SITE_CONFIG.url,\n    pageUrl: `${SITE_CONFIG.url}/faq`,\n  });\n}\n\n/**\n * Generate VideoObject schema (Schema.org 2025 Enhanced)\n * Supports duration conversion and interaction statistics\n */\nexport function generateVideoObjectSchema(params: {\n  title: string;\n  description: string;\n  thumbnailUrl: string;\n  uploadDate: Date;\n  videoUrl?: string;\n  embedUrl?: string;\n  durationSeconds?: number;\n  viewCount?: number;\n  baseUrl: string;\n  author?: User;\n}): VideoObjectSchema {\n  const { title, description, thumbnailUrl, uploadDate, videoUrl, embedUrl, durationSeconds, viewCount, baseUrl, author } = params;\n  \n  return {\n    '@context': 'https://schema.org',\n    '@type': 'VideoObject',\n    '@id': videoUrl || embedUrl || `${baseUrl}/video/${title.toLowerCase().replace(/\\s+/g, '-')}`,\n    name: title,\n    description,\n    thumbnailUrl,\n    uploadDate: new Date(uploadDate).toISOString(),\n    ...(videoUrl && { contentUrl: videoUrl }),\n    ...(embedUrl && { embedUrl }),\n    ...(durationSeconds && { duration: secondsToISO8601Duration(durationSeconds) }),\n    ...(viewCount && {\n      interactionStatistic: {\n        '@type': 'InteractionCounter',\n        interactionType: 'https://schema.org/WatchAction',\n        userInteractionCount: viewCount,\n      },\n    }),\n    ...(author && {\n      author: {\n        '@type': 'Person',\n        name: author.username,\n        url: `${baseUrl}/user/${author.username}`,\n      },\n    }),\n  };\n}\n\n/**\n * Legacy alias for backward compatibility\n */\nexport function generateVideoSchema(params: {\n  title: string;\n  description?: string;\n  thumbnailUrl?: string;\n  uploadDate?: string;\n  duration?: string;\n  embedUrl?: string;\n  views?: number;\n}): VideoObjectSchema {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'VideoObject',\n    '@id': params.embedUrl || `${SITE_CONFIG.url}/video/${params.title.toLowerCase().replace(/\\s+/g, '-')}`,\n    name: params.title,\n    description: params.description || '',\n    thumbnailUrl: params.thumbnailUrl || '',\n    uploadDate: params.uploadDate || new Date().toISOString(),\n    duration: params.duration,\n    embedUrl: params.embedUrl,\n    interactionStatistic: params.views\n      ? {\n          '@type': 'InteractionCounter',\n          interactionType: 'https://schema.org/WatchAction',\n          userInteractionCount: params.views,\n        }\n      : undefined,\n  };\n}\n\n/**\n * Generate DiscussionForumPosting schema for forum threads (Schema.org 2025)\n * Includes interaction statistics, comments, and nested replies\n */\nexport function generateDiscussionForumPostingSchema(params: {\n  thread: ForumThread;\n  author: User;\n  baseUrl: string;\n  viewCount?: number;\n  replyCount?: number;\n  upvoteCount?: number;\n  replies?: Array<{ id: string; content: string; author: User; createdAt: Date; upvotes?: number }>;\n}): DiscussionForumPostingSchema {\n  const { thread, author, baseUrl, viewCount, replyCount, upvoteCount, replies } = params;\n  \n  const threadUrl = `${baseUrl}/thread/${thread.slug}`;\n  \n  // Build interaction statistics array\n  const interactionStatistic: InteractionCounter[] = [];\n  \n  if (viewCount !== undefined) {\n    interactionStatistic.push({\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/ViewAction',\n      userInteractionCount: viewCount,\n    });\n  }\n  \n  if (replyCount !== undefined) {\n    interactionStatistic.push({\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/CommentAction',\n      userInteractionCount: replyCount,\n    });\n  }\n  \n  if (upvoteCount !== undefined) {\n    interactionStatistic.push({\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/LikeAction',\n      userInteractionCount: upvoteCount,\n    });\n  }\n  \n  // Build comment schemas if replies are provided\n  const comments: CommentSchema[] | undefined = replies?.map((reply) => ({\n    '@context': 'https://schema.org',\n    '@type': 'Comment',\n    '@id': `${threadUrl}#comment-${reply.id}`,\n    text: sanitizeForSchema(reply.content) || '',\n    author: {\n      '@type': 'Person',\n      '@id': `${baseUrl}/user/${reply.author.username}#person`,\n      name: reply.author.username,\n      url: `${baseUrl}/user/${reply.author.username}`,\n    },\n    datePublished: toISO8601(reply.createdAt)!,\n    ...(reply.upvotes !== undefined && { upvoteCount: reply.upvotes }),\n    parentItem: { '@id': threadUrl },\n  }));\n  \n  const schema: DiscussionForumPostingSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'DiscussionForumPosting',\n    '@id': threadUrl,\n    headline: thread.title.substring(0, 110),\n    articleBody: sanitizeForSchema(thread.body) || '',\n    author: {\n      '@type': 'Person',\n      '@id': `${baseUrl}/user/${author.username}#person`,\n      name: author.username,\n      url: `${baseUrl}/user/${author.username}`,\n    },\n    datePublished: toISO8601(thread.createdAt)!,\n    dateModified: toISO8601(thread.updatedAt)!,\n    url: threadUrl,\n    mainEntityOfPage: { '@id': threadUrl },\n    inLanguage: getLanguage(thread.body),\n    publisher: {\n      '@type': 'Organization',\n      '@id': SITE_CONFIG.organizationId,\n      name: SITE_CONFIG.name,\n      logo: {\n        '@type': 'ImageObject',\n        url: SITE_CONFIG.logo,\n      },\n    },\n  };\n  \n  // Add interaction statistics if provided\n  if (interactionStatistic.length > 0) {\n    schema.interactionStatistic = interactionStatistic;\n  }\n  \n  // Add comments if provided\n  if (comments && comments.length > 0) {\n    schema.comment = comments;\n  }\n  \n  // Add commentCount if provided\n  if (replyCount !== undefined) {\n    schema.commentCount = replyCount;\n  }\n  \n  return schema;\n}\n\n/**\n * Generate NewsArticle schema (Schema.org 2025)\n * For news articles with dateline and news-specific metadata\n */\nexport function generateNewsArticleSchema(params: {\n  headline: string;\n  description?: string;\n  content: string;\n  author: User;\n  publishDate: Date;\n  modifiedDate?: Date;\n  baseUrl: string;\n  url: string;\n  imageUrl?: string;\n  location?: string;\n  commentCount?: number;\n}): NewsArticleSchema {\n  const { headline, description, content, author, publishDate, modifiedDate, baseUrl, url, imageUrl, location, commentCount } = params;\n  \n  const schema: NewsArticleSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'NewsArticle',\n    '@id': `${baseUrl}${url}#newsarticle`,\n    headline: headline.substring(0, 110),\n    description: sanitizeForSchema(description),\n    image: validateImageUrl(imageUrl, baseUrl),\n    datePublished: toISO8601(publishDate)!,\n    dateModified: toISO8601(modifiedDate) || toISO8601(publishDate)!,\n    author: {\n      '@type': 'Person',\n      '@id': `${baseUrl}/user/${author.username}#person`,\n      name: author.firstName && author.lastName ? `${author.firstName} ${author.lastName}` : author.username,\n      url: `${baseUrl}/user/${author.username}`,\n    },\n    publisher: {\n      '@type': 'Organization',\n      '@id': SITE_CONFIG.organizationId,\n      name: SITE_CONFIG.name,\n      logo: {\n        '@type': 'ImageObject',\n        url: SITE_CONFIG.logo,\n      },\n    },\n    articleBody: sanitizeForSchema(content),\n    inLanguage: getLanguage(content),\n    url: `${baseUrl}${url}`,\n    ...(location && { dateline: location }),\n  };\n  \n  // Conditional: Add commentCount only if comments exist\n  if (commentCount && commentCount > 0) {\n    (schema as any).commentCount = commentCount;\n  }\n  \n  // Validate required properties\n  if (!validateRequiredProperties(schema, ['headline', 'datePublished', 'author', 'publisher'])) {\n    throw new Error('Missing required NewsArticle schema properties');\n  }\n  \n  return schema;\n}\n\n/**\n * Generate BlogPosting schema (Schema.org 2025)\n * For blog posts with word count and article sections\n */\nexport function generateBlogPostingSchema(params: {\n  title: string;\n  description?: string;\n  content: string;\n  author: User;\n  publishDate: Date;\n  modifiedDate?: Date;\n  baseUrl: string;\n  url: string;\n  imageUrl?: string;\n  category?: string;\n  commentCount?: number;\n}): BlogPostingSchema {\n  const { title, description, content, author, publishDate, modifiedDate, baseUrl, url, imageUrl, category, commentCount } = params;\n  \n  const schema: BlogPostingSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'BlogPosting',\n    '@id': `${baseUrl}${url}#blogposting`,\n    headline: title.substring(0, 110),\n    description: sanitizeForSchema(description),\n    image: validateImageUrl(imageUrl, baseUrl),\n    datePublished: toISO8601(publishDate)!,\n    dateModified: toISO8601(modifiedDate) || toISO8601(publishDate)!,\n    author: {\n      '@type': 'Person',\n      '@id': `${baseUrl}/user/${author.username}#person`,\n      name: author.firstName && author.lastName ? `${author.firstName} ${author.lastName}` : author.username,\n      url: `${baseUrl}/user/${author.username}`,\n    },\n    publisher: {\n      '@type': 'Organization',\n      '@id': SITE_CONFIG.organizationId,\n      name: SITE_CONFIG.name,\n      logo: {\n        '@type': 'ImageObject',\n        url: SITE_CONFIG.logo,\n      },\n    },\n    articleBody: sanitizeForSchema(content),\n    wordCount: getWordCount(content),\n    inLanguage: getLanguage(content),\n    url: `${baseUrl}${url}`,\n    mainEntityOfPage: { '@id': `${baseUrl}${url}` },\n    ...(category && { articleSection: category }),\n  };\n  \n  // Conditional: Add commentCount only if comments exist\n  if (commentCount && commentCount > 0) {\n    (schema as any).commentCount = commentCount;\n  }\n  \n  // Validate required properties\n  if (!validateRequiredProperties(schema, ['headline', 'datePublished', 'author', 'publisher'])) {\n    throw new Error('Missing required BlogPosting schema properties');\n  }\n  \n  return schema;\n}\n\n// ============================================================================\n// COMBINED SCHEMA BUILDERS\n// ============================================================================\n\n/**\n * Generate complete homepage schema using @graph\n * Includes WebSite + Organization\n */\nexport function generateHomepageSchema(config: SiteConfig = SITE_CONFIG) {\n  return {\n    '@context': 'https://schema.org',\n    '@graph': [generateOrganizationSchema(config), generateWebSiteSchema(config)],\n  };\n}\n\n/**\n * Generate schema for inner pages with breadcrumbs\n */\nexport function generatePageWithBreadcrumbsSchema(\n  breadcrumbItems: Array<{ name: string; url: string }>,\n  config: SiteConfig = SITE_CONFIG\n) {\n  return {\n    '@context': 'https://schema.org',\n    '@graph': [\n      generateBreadcrumbSchema(breadcrumbItems),\n      {\n        '@type': 'Organization',\n        '@id': config.organizationId,\n        name: config.name,\n        url: config.url,\n        logo: config.logo,\n      },\n    ],\n  };\n}\n\n// ============================================================================\n// CONTENT TYPE DETECTION\n// ============================================================================\n\nexport type ContentType =\n  | 'homepage'\n  | 'article'\n  | 'product'\n  | 'category'\n  | 'profile'\n  | 'faq'\n  | 'video'\n  | 'generic';\n\n/**\n * Detect content type based on path and data\n */\nexport function detectContentType(pathname: string): ContentType {\n  if (pathname === '/') return 'homepage';\n  if (pathname.startsWith('/thread/') || pathname.startsWith('/discussions/'))\n    return 'article';\n  if (pathname.startsWith('/content/') || pathname.startsWith('/marketplace/'))\n    return 'product';\n  if (pathname.startsWith('/category/')) return 'category';\n  if (pathname.startsWith('/user/')) return 'profile';\n  if (pathname.startsWith('/faq')) return 'faq';\n\n  return 'generic';\n}\n\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n\n/**\n * Convert seconds to ISO 8601 duration format (e.g., PT2M30S)\n * Used for VideoObject duration property\n */\nexport function secondsToISO8601Duration(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = seconds % 60;\n  \n  let duration = 'PT';\n  if (hours > 0) duration += `${hours}H`;\n  if (minutes > 0) duration += `${minutes}M`;\n  if (secs > 0 || duration === 'PT') duration += `${secs}S`;\n  \n  return duration;\n}\n\n/**\n * Convert schema object to JSON-LD script tag\n */\nexport function schemaToScriptTag(schema: any): string {\n  return `<script type=\"application/ld+json\">${JSON.stringify(schema, null, 2)}</script>`;\n}\n\n/**\n * Validate schema structure (basic validation)\n * For production, use Google Rich Results Test API\n */\nexport function validateSchema(schema: BaseSchema): {\n  valid: boolean;\n  errors: string[];\n} {\n  const errors: string[] = [];\n\n  if (!schema['@context']) {\n    errors.push('Missing @context property');\n  }\n\n  if (!schema['@type']) {\n    errors.push('Missing @type property');\n  }\n\n  if (schema['@context'] !== 'https://schema.org') {\n    errors.push('Invalid @context - must be \"https://schema.org\"');\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors,\n  };\n}\n\n/**\n * Generate validation URL for Google Rich Results Test\n */\nexport function getRichResultsTestUrl(pageUrl: string): string {\n  return `https://search.google.com/test/rich-results?url=${encodeURIComponent(pageUrl)}`;\n}\n\n/**\n * Generate validation URL for Schema.org Validator\n */\nexport function getSchemaValidatorUrl(pageUrl: string): string {\n  return `https://validator.schema.org/#url=${encodeURIComponent(pageUrl)}`;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3582, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/schema-detector.ts"],"sourcesContent":["/**\n * Automated Content Type Detection for Dynamic Schema Generation\n * \n * Analyzes content metadata, structure, and context to determine\n * the most appropriate Schema.org type for SEO optimization.\n */\n\nimport { ForumThread, Content, User } from '@shared/schema';\n\nexport type SchemaType = \n  | 'DiscussionForumPosting'\n  | 'Product'\n  | 'Article'\n  | 'BlogPosting'\n  | 'NewsArticle'\n  | 'FAQPage'\n  | 'VideoObject'\n  | 'Person'\n  | 'Organization'\n  | 'WebSite';\n\nexport interface ContentAnalysis {\n  schemaType: SchemaType;\n  confidence: number; // 0-1 score\n  reasons: string[]; // Why this type was selected\n}\n\n/**\n * Detect appropriate schema type for forum threads\n */\nexport function detectThreadSchemaType(thread: ForumThread, category?: { slug: string; name: string }): ContentAnalysis {\n  const reasons: string[] = [];\n  \n  // Check if it's a FAQ-style thread (question in title)\n  if (thread.title.toLowerCase().match(/\\?(.*)?$/)) {\n    reasons.push('Title contains question mark - FAQ pattern detected');\n    return { schemaType: 'FAQPage', confidence: 0.8, reasons };\n  }\n  \n  // Check if it's a news article (time-sensitive, recent)\n  const publishedDate = new Date(thread.createdAt);\n  const daysSincePublished = (Date.now() - publishedDate.getTime()) / (1000 * 60 * 60 * 24);\n  \n  if (daysSincePublished <= 2 && (\n    thread.title.toLowerCase().includes('breaking') ||\n    thread.title.toLowerCase().includes('news') ||\n    thread.title.toLowerCase().includes('announcement')\n  )) {\n    reasons.push('Recent publication (< 2 days) with news keywords');\n    return { schemaType: 'NewsArticle', confidence: 0.9, reasons };\n  }\n  \n  // Check if it's a blog-style post (long-form, editorial)\n  if (category?.slug.includes('blog') || category?.slug.includes('editorial') || \n      thread.title.toLowerCase().includes('guide') || \n      thread.title.toLowerCase().includes('tutorial')) {\n    reasons.push('Category or title indicates blog/editorial content');\n    return { schemaType: 'BlogPosting', confidence: 0.85, reasons };\n  }\n  \n  // Check if it contains video (check in body content)\n  if (thread.body?.toLowerCase().includes('youtube.com') || \n      thread.body?.toLowerCase().includes('vimeo.com') ||\n      thread.body?.toLowerCase().includes('video')) {\n    reasons.push('Content contains video links');\n    return { schemaType: 'VideoObject', confidence: 0.75, reasons };\n  }\n  \n  // Default: Forum discussion\n  reasons.push('Standard forum discussion with replies');\n  return { schemaType: 'DiscussionForumPosting', confidence: 1.0, reasons };\n}\n\n/**\n * Detect appropriate schema type for marketplace content\n */\nexport function detectContentSchemaType(content: Content, category?: { slug: string; name: string }): ContentAnalysis {\n  const reasons: string[] = [];\n  \n  // Marketplace items (EAs, Indicators, source code with pricing)\n  if (content.type === 'ea' || content.type === 'indicator' || content.type === 'source_code' || \n      !content.isFree || (content.priceCoins !== undefined && content.priceCoins > 0)) {\n    reasons.push(`Content type: ${content.type}, has pricing`);\n    return { schemaType: 'Product', confidence: 1.0, reasons };\n  }\n  \n  // Educational content (articles can be tutorials/guides)\n  if (content.type === 'article' && (\n      category?.slug.includes('tutorial') || \n      category?.slug.includes('guide') ||\n      content.title?.toLowerCase().includes('tutorial') ||\n      content.title?.toLowerCase().includes('guide'))) {\n    reasons.push('Educational content type detected');\n    return { schemaType: 'BlogPosting', confidence: 0.9, reasons };\n  }\n  \n  // Video content (check description for video links)\n  if (content.description?.toLowerCase().includes('youtube.com') || \n      content.description?.toLowerCase().includes('vimeo.com') ||\n      content.description?.toLowerCase().includes('video')) {\n    reasons.push('Content has video URL or video type');\n    return { schemaType: 'VideoObject', confidence: 1.0, reasons };\n  }\n  \n  // Default: Article\n  reasons.push('General article content');\n  return { schemaType: 'Article', confidence: 0.8, reasons };\n}\n\n/**\n * Detect schema type for any page based on URL pattern\n */\nexport function detectPageSchemaType(pathname: string): ContentAnalysis {\n  const reasons: string[] = [];\n  \n  // User profiles\n  if (pathname.match(/^\\/user\\/[^/]+$/)) {\n    reasons.push('User profile page pattern');\n    return { schemaType: 'Person', confidence: 1.0, reasons };\n  }\n  \n  // Homepage\n  if (pathname === '/' || pathname === '/home') {\n    reasons.push('Homepage');\n    return { schemaType: 'WebSite', confidence: 1.0, reasons };\n  }\n  \n  // Thread pages\n  if (pathname.includes('/thread/') || pathname.match(/\\/category\\/.*\\/[^/]+$/)) {\n    reasons.push('Thread page pattern');\n    return { schemaType: 'DiscussionForumPosting', confidence: 0.9, reasons };\n  }\n  \n  // Marketplace\n  if (pathname.includes('/marketplace') || pathname.includes('/content/')) {\n    reasons.push('Marketplace/content page pattern');\n    return { schemaType: 'Product', confidence: 0.85, reasons };\n  }\n  \n  // FAQ pages\n  if (pathname.includes('/faq') || pathname.includes('/help')) {\n    reasons.push('FAQ/help page pattern');\n    return { schemaType: 'FAQPage', confidence: 0.9, reasons };\n  }\n  \n  // Default\n  reasons.push('Generic page');\n  return { schemaType: 'Article', confidence: 0.5, reasons };\n}\n\n/**\n * Main detection function - analyzes all available data\n */\nexport function detectSchemaType(params: {\n  thread?: ForumThread;\n  content?: Content;\n  user?: User;\n  pathname?: string;\n  category?: { slug: string; name: string };\n}): ContentAnalysis {\n  const { thread, content, user, pathname, category } = params;\n  \n  // Priority 1: User profile\n  if (user && pathname?.includes('/user/')) {\n    return { \n      schemaType: 'Person', \n      confidence: 1.0, \n      reasons: ['User profile page with user data'] \n    };\n  }\n  \n  // Priority 2: Marketplace content\n  if (content) {\n    return detectContentSchemaType(content, category);\n  }\n  \n  // Priority 3: Forum thread\n  if (thread) {\n    return detectThreadSchemaType(thread, category);\n  }\n  \n  // Priority 4: URL-based detection\n  if (pathname) {\n    return detectPageSchemaType(pathname);\n  }\n  \n  // Fallback\n  return { \n    schemaType: 'Article', \n    confidence: 0.3, \n    reasons: ['Insufficient data for accurate detection'] \n  };\n}\n\n/**\n * Helper: Check if content should use Product schema\n */\nexport function isProductContent(content: Content): boolean {\n  return content.type === 'ea' || \n         content.type === 'indicator' || \n         content.type === 'source_code' ||\n         !content.isFree ||\n         (content.priceCoins !== undefined && content.priceCoins > 0);\n}\n\n/**\n * Helper: Check if thread should use FAQ schema\n */\nexport function isFAQThread(thread: ForumThread): boolean {\n  return thread.title.toLowerCase().match(/\\?(.*)?$/) !== null;\n}\n\n/**\n * Helper: Check if content is news-worthy (< 2 days old)\n */\nexport function isNewsContent(publishDate: Date): boolean {\n  const daysSince = (Date.now() - publishDate.getTime()) / (1000 * 60 * 60 * 24);\n  return daysSince <= 2;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3790, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/shared/relations.ts"],"sourcesContent":["// Drizzle Relations for Relational Query API\n// This file defines relationships between tables for use with db.query API\n\nimport { relations } from 'drizzle-orm';\nimport {\n  users,\n  forumThreads,\n  forumReplies,\n  content,\n  contentReviews,\n  brokers,\n  brokerReviews,\n  contentPurchases,\n} from './schema';\n\n// Users Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  threads: many(forumThreads),\n  replies: many(forumReplies),\n  content: many(content),\n  reviews: many(contentReviews),\n  brokerReviews: many(brokerReviews),\n  purchases: many(contentPurchases, { relationName: 'buyer' }),\n  sales: many(contentPurchases, { relationName: 'seller' }),\n}));\n\n// Forum Threads Relations\nexport const forumThreadsRelations = relations(forumThreads, ({ one, many }) => ({\n  author: one(users, {\n    fields: [forumThreads.authorId],\n    references: [users.id],\n  }),\n  replies: many(forumReplies),\n}));\n\n// Forum Replies Relations\nexport const forumRepliesRelations = relations(forumReplies, ({ one }) => ({\n  thread: one(forumThreads, {\n    fields: [forumReplies.threadId],\n    references: [forumThreads.id],\n  }),\n  author: one(users, {\n    fields: [forumReplies.userId],\n    references: [users.id],\n  }),\n}));\n\n// Content Relations\nexport const contentRelations = relations(content, ({ one, many }) => ({\n  author: one(users, {\n    fields: [content.authorId],\n    references: [users.id],\n  }),\n  reviews: many(contentReviews),\n  purchases: many(contentPurchases),\n}));\n\n// Content Reviews Relations\nexport const contentReviewsRelations = relations(contentReviews, ({ one }) => ({\n  content: one(content, {\n    fields: [contentReviews.contentId],\n    references: [content.id],\n  }),\n  author: one(users, {\n    fields: [contentReviews.userId],\n    references: [users.id],\n  }),\n}));\n\n// Broker Relations\nexport const brokersRelations = relations(brokers, ({ many }) => ({\n  reviews: many(brokerReviews),\n}));\n\n// Broker Reviews Relations\nexport const brokerReviewsRelations = relations(brokerReviews, ({ one }) => ({\n  broker: one(brokers, {\n    fields: [brokerReviews.brokerId],\n    references: [brokers.id],\n  }),\n  author: one(users, {\n    fields: [brokerReviews.userId],\n    references: [users.id],\n  }),\n}));\n\n// Content Purchases Relations\nexport const contentPurchasesRelations = relations(contentPurchases, ({ one }) => ({\n  content: one(content, {\n    fields: [contentPurchases.contentId],\n    references: [content.id],\n  }),\n  buyer: one(users, {\n    fields: [contentPurchases.buyerId],\n    references: [users.id],\n    relationName: 'buyer',\n  }),\n  seller: one(users, {\n    fields: [contentPurchases.sellerId],\n    references: [users.id],\n    relationName: 'seller',\n  }),\n}));\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3939, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/db.ts"],"sourcesContent":["import { drizzle } from 'drizzle-orm/neon-serverless';\nimport { Pool } from '@neondatabase/serverless';\nimport * as schema from '../shared/schema';\nimport * as relations from '../shared/relations';\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL environment variable is not set');\n}\n\n// Create connection pool\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\n// Create Drizzle instance with schema and relations\nexport const db = drizzle(pool, { schema: { ...schema, ...relations } });\n\n// Helper function to get global stats (for homepage)\nexport async function getGlobalStats() {\n  const { count } = await import('drizzle-orm');\n  const { forumThreads, users, forumReplies, content } = schema;\n\n  const [threadCount, userCount, replyCount, contentCount] = await Promise.all([\n    db.select({ count: count() }).from(forumThreads),\n    db.select({ count: count() }).from(users),\n    db.select({ count: count() }).from(forumReplies),\n    db.select({ count: count() }).from(content),\n  ]);\n\n  return {\n    totalThreads: threadCount[0].count,\n    totalMembers: userCount[0].count,\n    totalPosts: replyCount[0].count,\n    totalContent: contentCount[0].count,\n    weeklyActivity: 0, // TODO: Calculate from database\n  };\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;IAC7B,MAAM,IAAI,MAAM;AAClB;AAEA,yBAAyB;AACzB,MAAM,OAAO,IAAI,8JAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;AAC5C;AAGO,MAAM,KAAK,IAAA,yKAAO,EAAC,MAAM;IAAE,QAAQ;QAAE,GAAG,gHAAM;QAAE,GAAG,mHAAS;IAAC;AAAE;AAG/D,eAAe;IACpB,MAAM,EAAE,KAAK,EAAE,GAAG;IAClB,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,GAAG;IAEvD,MAAM,CAAC,aAAa,WAAW,YAAY,aAAa,GAAG,MAAM,QAAQ,GAAG,CAAC;QAC3E,GAAG,MAAM,CAAC;YAAE,OAAO;QAAQ,GAAG,IAAI,CAAC;QACnC,GAAG,MAAM,CAAC;YAAE,OAAO;QAAQ,GAAG,IAAI,CAAC;QACnC,GAAG,MAAM,CAAC;YAAE,OAAO;QAAQ,GAAG,IAAI,CAAC;QACnC,GAAG,MAAM,CAAC;YAAE,OAAO;QAAQ,GAAG,IAAI,CAAC;KACpC;IAED,OAAO;QACL,cAAc,WAAW,CAAC,EAAE,CAAC,KAAK;QAClC,cAAc,SAAS,CAAC,EAAE,CAAC,KAAK;QAChC,YAAY,UAAU,CAAC,EAAE,CAAC,KAAK;QAC/B,cAAc,YAAY,CAAC,EAAE,CAAC,KAAK;QACnC,gBAAgB;IAClB;AACF","debugId":null}},
    {"offset": {"line": 3995, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/category/%5B...path%5D/page.tsx"],"sourcesContent":["/**\n * Hierarchical Category & Thread Page (Catch-all Route)\n * \n * Handles both:\n * 1. Category browsing: /category/trading-strategies/scalping-m1-m15\n * 2. Thread pages: /category/trading-strategies/scalping-m1-m15/thread-slug\n * \n * SEO-optimized with full hierarchical paths for better search engine discovery\n */\n\nimport { Metadata } from 'next';\nimport { notFound } from 'next/navigation';\nimport { getInternalApiUrl } from '@/lib/api-config';\nimport { getCategoryByPath } from '@/lib/category-path';\nimport BreadcrumbSchema from '@/components/BreadcrumbSchema';\nimport { SchemaScript } from '@/components/SchemaGenerator';\nimport { generateDiscussionForumPostingSchema, generateProductSchema, generateFAQPageSchema, generateNewsArticleSchema, generateBlogPostingSchema, generateVideoObjectSchema } from '@/lib/schema-generator';\nimport { detectSchemaType } from '@/lib/schema-detector';\nimport { db } from '@/lib/db';\nimport { forumCategories } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// Dynamic imports for components with dynamic route segments\nconst loadThreadClient = () => import('../../thread/[slug]/ThreadDetailClient');\nconst loadCategoryClient = () => import('../[slug]/CategoryDiscussionClient');\nconst loadContentClient = () => import('../../content/[slug]/ContentDetailClient');\n\ntype Props = {\n  params: { path: string[] };\n  searchParams: { [key: string]: string | string[] | undefined };\n};\n\nexport async function generateMetadata({ params }: Props): Promise<Metadata> {\n  const { path: pathSegments } = await params;\n  const lastSlug = pathSegments[pathSegments.length - 1];\n  const categoryPath = pathSegments.slice(0, -1).join('/');\n  \n  // Try to find a thread first (most specific)\n  try {\n    const apiUrl = getInternalApiUrl();\n    const response = await fetch(`${apiUrl}/api/threads/slug/${lastSlug}`);\n    if (response.ok) {\n      const thread = await response.json();\n      return {\n        title: thread.title,\n        description: thread.body?.substring(0, 160) || `Discussion about ${thread.title}`,\n        keywords: [\n          'forex forum',\n          'trading discussion',\n          thread.title,\n          ...categoryPath.split('/'),\n        ],\n        openGraph: {\n          title: thread.title,\n          description: thread.body?.substring(0, 160),\n          url: `/category/${pathSegments.join('/')}`,\n          type: 'article',\n        },\n      };\n    }\n  } catch (error) {\n    // Not a thread, continue to check if it's a category\n  }\n  \n  // Check if it's a marketplace content item\n  try {\n    const apiUrl = getInternalApiUrl();\n    const response = await fetch(`${apiUrl}/api/content/slug/${lastSlug}`);\n    if (response.ok) {\n      const content = await response.json();\n      return {\n        title: `${content.title} | YoForex Marketplace`,\n        description: content.description?.substring(0, 160) || `Download ${content.title}`,\n        keywords: ['forex EA', 'trading indicator', content.title],\n        openGraph: {\n          title: content.title,\n          description: content.description?.substring(0, 160),\n          url: `/category/${pathSegments.join('/')}`,\n          type: 'article',\n        },\n      };\n    }\n  } catch (error) {\n    // Not content either\n  }\n  \n  // It must be a category page\n  const fullPath = pathSegments.join('/');\n  const category = await getCategoryByPath(fullPath);\n  \n  if (!category) {\n    return {\n      title: 'Category Not Found | YoForex',\n    };\n  }\n  \n  return {\n    title: `${category.name} | YoForex Forum`,\n    description: category.description || `Browse ${category.name} discussions and content`,\n    keywords: ['forex forum', category.name, ...categoryPath.split('/')],\n    openGraph: {\n      title: category.name,\n      description: category.description || `Browse ${category.name} discussions`,\n      url: `/category/${fullPath}`,\n      type: 'website',\n    },\n  };\n}\n\nexport default async function HierarchicalCategoryPage({ params }: Props) {\n  const { path: pathSegments } = await params;\n  const lastSlug = pathSegments[pathSegments.length - 1];\n  const categoryPath = pathSegments.slice(0, -1).join('/');\n  \n  // Try to find a thread first (most specific content)\n  let thread = null;\n  let replies = [];\n  try {\n    const apiUrl = getInternalApiUrl();\n    const threadRes = await fetch(`${apiUrl}/api/threads/slug/${lastSlug}`);\n    \n    if (threadRes.ok) {\n      thread = await threadRes.json();\n      // Fetch replies using thread ID\n      try {\n        const repliesRes = await fetch(`${apiUrl}/api/threads/${thread.id}/replies`);\n        if (repliesRes.ok) {\n          replies = await repliesRes.json();\n        }\n      } catch (e) {\n        // Replies fetch failed, continue with empty replies\n        console.warn('Failed to fetch thread replies');\n      }\n    }\n  } catch (error) {\n    // Not a thread\n  }\n  \n  if (thread) {\n    // Detect schema type\n    const schemaAnalysis = detectSchemaType({ thread, pathname: `/category/${pathSegments.join('/')}` });\n    \n    // Fetch author data with graceful fallback\n    const apiUrl = getInternalApiUrl();\n    let author = null;\n    try {\n      const authorRes = await fetch(`${apiUrl}/api/users/${thread.authorId}`);\n      if (authorRes.ok) author = await authorRes.json();\n    } catch (e) {\n      // Fallback to anonymous author if fetch fails\n      console.warn('Author fetch failed, using anonymous author');\n    }\n    \n    // Always provide fallback author to prevent schema generation failure\n    if (!author) {\n      author = {\n        id: 'anonymous',\n        username: 'Anonymous',\n        profileImageUrl: null\n      };\n    }\n    \n    // Generate schema based on detected type with error handling\n    let schema = null;\n    const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com';\n    \n    try {\n      switch (schemaAnalysis.schemaType) {\n        case 'FAQPage':\n          // FAQ schema for Q&A threads\n          const faqQuestions = [{\n            question: thread.title,\n            answer: thread.body || 'See discussion for details',\n            id: thread.id\n          }];\n          // Add top replies as additional Q&A pairs\n          if (replies && replies.length > 0) {\n            replies.slice(0, 3).forEach((reply: any) => {\n              if (reply.body) {\n                faqQuestions.push({\n                  question: `Reply: ${thread.title}`,\n                  answer: reply.body,\n                  id: reply.id\n                });\n              }\n            });\n          }\n          schema = generateFAQPageSchema({\n            questions: faqQuestions,\n            baseUrl,\n            pageUrl: `/category/${pathSegments.join('/')}`\n          });\n          break;\n          \n        case 'NewsArticle':\n          // News article schema for recent news threads\n          schema = generateNewsArticleSchema({\n            headline: thread.title,\n            description: thread.body?.substring(0, 160),\n            content: thread.body || '',\n            author,\n            publishDate: new Date(thread.createdAt),\n            modifiedDate: thread.updatedAt ? new Date(thread.updatedAt) : undefined,\n            baseUrl,\n            url: `/category/${pathSegments.join('/')}`,\n            imageUrl: undefined,\n            location: undefined,\n            commentCount: replies?.length || 0,\n          });\n          break;\n          \n        case 'BlogPosting':\n          // Blog posting schema for tutorials/guides\n          schema = generateBlogPostingSchema({\n            title: thread.title,\n            description: thread.body?.substring(0, 160),\n            content: thread.body || '',\n            author,\n            publishDate: new Date(thread.createdAt),\n            modifiedDate: thread.updatedAt ? new Date(thread.updatedAt) : undefined,\n            baseUrl,\n            url: `/category/${pathSegments.join('/')}`,\n            imageUrl: undefined,\n            category: pathSegments[0],\n            commentCount: replies?.length || 0,\n          });\n          break;\n        \n        case 'VideoObject':\n          // Video object schema for threads with video links\n          // Extract video URL from thread body\n          const youtubeMatch = thread.body?.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([a-zA-Z0-9_-]+)/);\n          const videoId = youtubeMatch ? youtubeMatch[1] : null;\n          const embedUrl = videoId ? `https://www.youtube.com/embed/${videoId}` : undefined;\n          \n          schema = generateVideoObjectSchema({\n            title: thread.title,\n            description: thread.body?.substring(0, 160) || thread.title,\n            thumbnailUrl: videoId ? `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg` : `${baseUrl}/default-video-thumbnail.jpg`,\n            uploadDate: new Date(thread.createdAt),\n            videoUrl: undefined,\n            embedUrl,\n            durationSeconds: undefined,\n            viewCount: thread.viewCount || 0,\n            baseUrl,\n            author\n          });\n          break;\n          \n        case 'DiscussionForumPosting':\n        default:\n          // Standard forum discussion schema\n          schema = generateDiscussionForumPostingSchema({\n            thread,\n            author,\n            baseUrl,\n            viewCount: thread.viewCount || 0,\n            replyCount: replies?.length || 0,\n            upvoteCount: thread.upvoteCount || 0,\n            replies: replies?.slice(0, 10).map((r: any) => ({\n              id: r.id,\n              content: r.body,\n              author: r.author || { username: 'Anonymous' },\n              createdAt: new Date(r.createdAt),\n              upvotes: r.helpfulCount || 0\n            })) || []\n          });\n          break;\n      }\n    } catch (error) {\n      console.error('[Schema Error]', error);\n      // Omit schema entirely if generation fails\n      schema = null;\n    }\n    \n    // Render thread detail page with hierarchical breadcrumbs\n    const { default: ThreadDetailClient } = await loadThreadClient();\n    return (\n      <>\n        {schema && <SchemaScript schema={schema} />}\n        <ThreadDetailClient initialThread={thread} initialReplies={replies} />\n      </>\n    );\n  }\n  \n  // Try to find marketplace content\n  let content = null;\n  let author = null;\n  let reviews = [];\n  let similarContent = [];\n  let authorReleases = [];\n  \n  try {\n    const apiUrl = getInternalApiUrl();\n    const contentRes = await fetch(`${apiUrl}/api/content/slug/${lastSlug}`);\n    \n    if (contentRes.ok) {\n      content = await contentRes.json();\n      \n      // Fetch additional content data in parallel\n      const [authorRes, reviewsRes, similarRes, releasesRes] = await Promise.all([\n        fetch(`${apiUrl}/api/users/${content.authorId}`).catch(() => null),\n        fetch(`${apiUrl}/api/content/${content.id}/reviews`).catch(() => null),\n        fetch(`${apiUrl}/api/content/${content.id}/similar`).catch(() => null),\n        fetch(`${apiUrl}/api/users/${content.authorId}/content`).catch(() => null),\n      ]);\n      \n      if (authorRes && authorRes.ok) author = await authorRes.json();\n      if (reviewsRes && reviewsRes.ok) reviews = await reviewsRes.json();\n      if (similarRes && similarRes.ok) similarContent = await similarRes.json();\n      if (releasesRes && releasesRes.ok) authorReleases = await releasesRes.json();\n    }\n  } catch (error) {\n    // Not content either\n  }\n  \n  if (content) {\n    // Generate Product schema for marketplace items with error handling\n    let schema = null;\n    if (author) {\n      try {\n        const reviewCount = reviews?.length || 0;\n        schema = generateProductSchema({\n          product: content,\n          baseUrl: process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com',\n          author,\n          // Conditional: Only include averageRating when >= 5 reviews\n          averageRating: reviewCount >= 5 ? content.averageRating : undefined,\n          reviewCount: reviewCount,\n          reviews: reviews?.slice(0, 5).map((r: any) => ({\n            author: r.author || { username: 'Anonymous' },\n            rating: r.rating || 5,\n            comment: r.comment || '',\n            createdAt: new Date(r.createdAt)\n          })) || []\n        });\n      } catch (error) {\n        console.error('[Schema Error]', error);\n        // Omit schema entirely if generation fails\n        schema = null;\n      }\n    }\n    \n    // Render content detail page with all required data\n    const { default: ContentDetailClient } = await loadContentClient();\n    return (\n      <>\n        {schema && <SchemaScript schema={schema} />}\n        <ContentDetailClient \n          slug={lastSlug}\n          initialContent={content}\n          initialAuthor={author}\n          initialReviews={reviews}\n          initialSimilarContent={similarContent}\n          initialAuthorReleases={authorReleases}\n        />\n      </>\n    );\n  }\n  \n  // Must be a category browsing page\n  const fullPath = pathSegments.join('/');\n  const category = await getCategoryByPath(fullPath);\n  \n  if (!category) {\n    notFound();\n  }\n  \n  // Build breadcrumb path from category hierarchy\n  const breadcrumbPath: { name: string; url: string }[] = [\n    { name: 'Home', url: '/' },\n  ];\n  \n  // Walk up the category hierarchy to build breadcrumbs\n  const categorySegments = fullPath.split('/');\n  for (let i = 0; i < categorySegments.length; i++) {\n    const segmentPath = categorySegments.slice(0, i + 1).join('/');\n    const segmentSlug = categorySegments[i];\n    \n    // Fetch category name for this segment\n    const [segmentCategory] = await db\n      .select()\n      .from(forumCategories)\n      .where(eq(forumCategories.slug, segmentSlug))\n      .limit(1);\n    \n    if (segmentCategory) {\n      breadcrumbPath.push({\n        name: segmentCategory.name,\n        url: `/category/${segmentPath}`,\n      });\n    }\n  }\n  \n  // Fetch threads for this category\n  let threads = [];\n  try {\n    const apiUrl = getInternalApiUrl();\n    const threadsRes = await fetch(`${apiUrl}/api/categories/${category.slug}/threads`);\n    if (threadsRes.ok) {\n      threads = await threadsRes.json();\n    }\n  } catch (error) {\n    console.error('Error fetching category threads:', error);\n  }\n  \n  // Render category discussion page with breadcrumbs\n  const { default: CategoryDiscussionClient } = await loadCategoryClient();\n  return (\n    <>\n      <BreadcrumbSchema path={breadcrumbPath} />\n      <CategoryDiscussionClient \n        slug={category.slug} \n        initialCategory={category}\n        initialThreads={threads}\n      />\n    </>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}