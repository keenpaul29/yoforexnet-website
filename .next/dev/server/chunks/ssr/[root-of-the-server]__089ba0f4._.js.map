{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/user/%5Busername%5D/ProfileClient.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/user/[username]/ProfileClient.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/user/[username]/ProfileClient.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAyS,GACtU,uEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/user/%5Busername%5D/ProfileClient.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/user/[username]/ProfileClient.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/user/[username]/ProfileClient.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAqR,GAClT,mDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/components/SchemaGenerator.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const SchemaScript = registerClientReference(\n    function() { throw new Error(\"Attempted to call SchemaScript() from the server but SchemaScript is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/SchemaGenerator.tsx <module evaluation>\",\n    \"SchemaScript\",\n);\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/components/SchemaGenerator.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/SchemaGenerator.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;AACvE;;AACO,MAAM,eAAe,IAAA,wQAAuB,EAC/C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,oEACA;uCAEW,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/components/SchemaGenerator.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const SchemaScript = registerClientReference(\n    function() { throw new Error(\"Attempted to call SchemaScript() from the server but SchemaScript is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/SchemaGenerator.tsx\",\n    \"SchemaScript\",\n);\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/components/SchemaGenerator.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/SchemaGenerator.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;AACvE;;AACO,MAAM,eAAe,IAAA,wQAAuB,EAC/C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,gDACA;uCAEW,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/schema-generator.ts"],"sourcesContent":["/**\n * Dynamic Schema.org JSON-LD Generator\n * \n * Complies with:\n * - Schema.org v29.3 (Latest 2025 standard)\n * - Google Rich Results Guidelines 2025\n * - JSON-LD 1.0 specification\n * \n * Features:\n * - Automatic content type detection\n * - Dynamic schema generation based on page context\n * - Type-safe schema builders\n * - Validation-ready output\n */\n\nimport { ForumThread, Content, User, ForumCategory } from '@shared/schema';\n\n// ============================================================================\n// TYPE DEFINITIONS\n// ============================================================================\n\nexport type SchemaContext = 'https://schema.org';\n\nexport interface BaseSchema {\n  '@context': SchemaContext;\n  '@type': string;\n  '@id'?: string;\n}\n\nexport interface OrganizationSchema extends BaseSchema {\n  '@type': 'Organization';\n  name: string;\n  url: string;\n  logo?: string;\n  description?: string;\n  email?: string;\n  telephone?: string;\n  address?: PostalAddress;\n  sameAs?: string[];\n  foundingDate?: string;\n}\n\nexport interface PostalAddress {\n  '@type': 'PostalAddress';\n  streetAddress?: string;\n  addressLocality?: string;\n  addressRegion?: string;\n  postalCode?: string;\n  addressCountry?: string;\n}\n\nexport interface WebSiteSchema extends BaseSchema {\n  '@type': 'WebSite';\n  url: string;\n  name: string;\n  description?: string;\n  inLanguage?: string;\n  publisher?: { '@id': string };\n  potentialAction?: SearchAction;\n}\n\nexport interface SearchAction {\n  '@type': 'SearchAction';\n  target: string | EntryPoint;\n  'query-input'?: string;\n}\n\nexport interface EntryPoint {\n  '@type': 'EntryPoint';\n  urlTemplate: string;\n}\n\nexport interface BreadcrumbListSchema extends BaseSchema {\n  '@type': 'BreadcrumbList';\n  itemListElement: ListItem[];\n}\n\nexport interface ListItem {\n  '@type': 'ListItem';\n  position: number;\n  name: string;\n  item?: string | { '@id': string; name: string };\n}\n\nexport interface ArticleSchema extends BaseSchema {\n  '@type': 'Article' | 'BlogPosting' | 'NewsArticle';\n  headline: string;\n  description?: string;\n  image?: string | string[];\n  datePublished: string;\n  dateModified?: string;\n  author: Person | Organization;\n  publisher: Organization;\n  articleBody?: string;\n  wordCount?: number;\n  commentCount?: number;\n  interactionStatistic?: InteractionCounter;\n}\n\nexport interface Person {\n  '@type': 'Person';\n  '@id'?: string;\n  name: string;\n  url?: string;\n  image?: string;\n}\n\nexport interface Organization {\n  '@type': 'Organization';\n  '@id'?: string;\n  name: string;\n  url?: string;\n  logo?: ImageObject;\n}\n\nexport interface ImageObject {\n  '@type': 'ImageObject';\n  url: string;\n  width?: number;\n  height?: number;\n}\n\nexport interface InteractionCounter {\n  '@type': 'InteractionCounter';\n  interactionType: string;\n  userInteractionCount: number;\n}\n\nexport interface ProductSchema extends BaseSchema {\n  '@type': 'Product';\n  name: string;\n  description?: string;\n  image?: string | string[];\n  brand?: Brand;\n  offers?: Offer;\n  aggregateRating?: AggregateRating;\n  review?: Review[];\n  sku?: string;\n  gtin?: string;\n}\n\nexport interface Brand {\n  '@type': 'Brand';\n  name: string;\n}\n\nexport interface Offer {\n  '@type': 'Offer';\n  url?: string;\n  priceCurrency: string;\n  price: string | number;\n  priceValidUntil?: string;\n  availability?: string;\n  seller?: Organization;\n}\n\nexport interface AggregateRating {\n  '@type': 'AggregateRating';\n  ratingValue: number;\n  reviewCount: number;\n  bestRating?: number;\n  worstRating?: number;\n}\n\nexport interface Review {\n  '@type': 'Review';\n  reviewRating: Rating;\n  author: Person;\n  datePublished?: string;\n  reviewBody?: string;\n}\n\nexport interface Rating {\n  '@type': 'Rating';\n  ratingValue: number;\n  bestRating?: number;\n  worstRating?: number;\n}\n\nexport interface FAQPageSchema extends BaseSchema {\n  '@type': 'FAQPage';\n  mainEntity: Question[];\n}\n\nexport interface Question {\n  '@type': 'Question';\n  name: string;\n  acceptedAnswer: Answer;\n}\n\nexport interface Answer {\n  '@type': 'Answer';\n  text: string;\n}\n\nexport interface VideoObjectSchema extends BaseSchema {\n  '@type': 'VideoObject';\n  name: string;\n  description?: string;\n  thumbnailUrl?: string | string[];\n  uploadDate?: string;\n  duration?: string;\n  contentUrl?: string;\n  embedUrl?: string;\n  interactionStatistic?: InteractionCounter;\n}\n\nexport interface ProfilePageSchema extends BaseSchema {\n  '@type': 'ProfilePage';\n  mainEntity: Person;\n  dateCreated?: string;\n  dateModified?: string;\n}\n\nexport interface PersonSchema extends BaseSchema {\n  '@type': 'Person';\n  '@id': string;\n  name: string;\n  url: string;\n  image?: string;\n  jobTitle?: string;\n  description?: string;\n  alumniOf?: Organization;\n  affiliation?: Organization;\n  worksFor?: Organization;\n  sameAs?: string[];\n  knowsAbout?: string[];\n  interactionStatistic?: InteractionCounter[];\n}\n\n// ============================================================================\n// SITE CONFIGURATION\n// ============================================================================\n\nexport interface SiteConfig {\n  name: string;\n  url: string;\n  description: string;\n  logo: string;\n  organizationId: string;\n  foundingDate?: string;\n  email?: string;\n  telephone?: string;\n  socialProfiles?: string[];\n  searchEndpoint?: string;\n}\n\n// Default YoForex configuration\nexport const SITE_CONFIG: SiteConfig = {\n  name: 'YoForex',\n  url: process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com',\n  description: 'Global forex trading community platform featuring forum discussions, EA marketplace, broker reviews, and expert insights',\n  logo: `${process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com'}/logo.png`,\n  organizationId: `${process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com'}/#organization`,\n  foundingDate: '2024-01-01',\n  email: 'contact@yoforex.com',\n  socialProfiles: [\n    'https://twitter.com/yoforex',\n    'https://linkedin.com/company/yoforex',\n    'https://facebook.com/yoforex',\n  ],\n  searchEndpoint: '/search?q={search_term_string}',\n};\n\n// ============================================================================\n// SCHEMA GENERATORS\n// ============================================================================\n\n/**\n * Generate WebSite schema with SearchAction\n * Should be included on all pages (usually in root layout)\n */\nexport function generateWebSiteSchema(config: SiteConfig = SITE_CONFIG): WebSiteSchema {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'WebSite',\n    '@id': `${config.url}/#website`,\n    url: config.url,\n    name: config.name,\n    description: config.description,\n    inLanguage: 'en-US',\n    publisher: {\n      '@id': config.organizationId,\n    },\n    potentialAction: config.searchEndpoint\n      ? {\n          '@type': 'SearchAction',\n          target: {\n            '@type': 'EntryPoint',\n            urlTemplate: `${config.url}${config.searchEndpoint}`,\n          },\n          'query-input': 'required name=search_term_string',\n        }\n      : undefined,\n  };\n}\n\n/**\n * Generate Organization schema\n * Should be included on homepage and about page\n */\nexport function generateOrganizationSchema(\n  config: SiteConfig = SITE_CONFIG\n): OrganizationSchema {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Organization',\n    '@id': config.organizationId,\n    name: config.name,\n    url: config.url,\n    logo: config.logo,\n    description: config.description,\n    email: config.email,\n    telephone: config.telephone,\n    foundingDate: config.foundingDate,\n    sameAs: config.socialProfiles,\n  };\n}\n\n/**\n * Generate BreadcrumbList schema from path segments\n * @param items Array of breadcrumb items with name and url\n */\nexport function generateBreadcrumbSchema(\n  items: Array<{ name: string; url: string }>\n): BreadcrumbListSchema {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: items.map((item, index) => ({\n      '@type': 'ListItem',\n      position: index + 1,\n      name: item.name,\n      item: index < items.length - 1 ? item.url : undefined, // Last item shouldn't have URL\n    })),\n  };\n}\n\n/**\n * Generate Article schema for forum threads\n * Complies with Google Rich Results requirements\n */\nexport function generateArticleSchema(params: {\n  thread: ForumThread;\n  author?: User;\n  canonicalUrl: string;\n  category?: ForumCategory;\n}): ArticleSchema {\n  const { thread, author, canonicalUrl, category } = params;\n\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Article',\n    '@id': canonicalUrl,\n    headline: thread.title,\n    description: thread.metaDescription || thread.body?.substring(0, 160) || '',\n    image: `${SITE_CONFIG.logo}`, // Thread schema doesn't have featured image\n    datePublished: new Date(thread.createdAt).toISOString(),\n    dateModified: new Date(thread.updatedAt).toISOString(),\n    author: author\n      ? {\n          '@type': 'Person',\n          name: author.username,\n          url: `${SITE_CONFIG.url}/user/${author.username}`,\n        }\n      : {\n          '@type': 'Person',\n          name: 'YoForex Community',\n        },\n    publisher: {\n      '@type': 'Organization',\n      '@id': SITE_CONFIG.organizationId,\n      name: SITE_CONFIG.name,\n      logo: {\n        '@type': 'ImageObject',\n        url: SITE_CONFIG.logo,\n      },\n    },\n    wordCount: thread.body ? thread.body.split(/\\s+/).length : 0,\n    commentCount: thread.replyCount || 0,\n    interactionStatistic: {\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/ViewAction',\n      userInteractionCount: thread.views || 0,\n    },\n  };\n}\n\n/**\n * Generate Product schema for marketplace items\n * Includes offers and ratings if available\n */\nexport function generateProductSchema(params: {\n  content: Content;\n  author?: User;\n  canonicalUrl: string;\n  averageRating?: number;\n  reviewCount?: number;\n}): ProductSchema {\n  const { content, author, canonicalUrl, averageRating, reviewCount } = params;\n\n  const images = content.images || [];\n  const coverImage = images.find((img) => img.isCover) || images[0];\n\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Product',\n    '@id': canonicalUrl,\n    name: content.title,\n    description: content.description || '',\n    image: coverImage?.url || SITE_CONFIG.logo,\n    brand: {\n      '@type': 'Brand',\n      name: SITE_CONFIG.name,\n    },\n    offers: {\n      '@type': 'Offer',\n      url: canonicalUrl,\n      priceCurrency: 'USD',\n      price: (content as any).price?.toString() || (content as any).coins?.toString() || '0', // Price or coins\n      availability: content.status === 'approved' \n        ? 'https://schema.org/InStock' \n        : 'https://schema.org/OutOfStock',\n      seller: {\n        '@type': 'Organization',\n        '@id': SITE_CONFIG.organizationId,\n        name: SITE_CONFIG.name,\n      },\n    },\n    aggregateRating:\n      averageRating && reviewCount\n        ? {\n            '@type': 'AggregateRating',\n            ratingValue: averageRating,\n            reviewCount: reviewCount,\n            bestRating: 5,\n            worstRating: 1,\n          }\n        : undefined,\n  };\n}\n\n/**\n * Generate comprehensive Person schema for user profiles\n * Follows Schema.org 2025 Person specification\n */\nexport function generatePersonSchema(params: {\n  user: User;\n  baseUrl: string;\n  reputationScore?: number;\n  threadCount?: number;\n  replyCount?: number;\n  badges?: string[];\n}): PersonSchema {\n  const { user, baseUrl, reputationScore, threadCount, replyCount, badges } = params;\n  \n  // Build name from firstName/lastName or fallback to username\n  const name = user.firstName && user.lastName \n    ? `${user.firstName} ${user.lastName}`\n    : user.username;\n  \n  // Build sameAs array from social profiles\n  const sameAs: string[] = [];\n  if (user.youtubeUrl) sameAs.push(user.youtubeUrl);\n  if (user.instagramHandle) {\n    // Handle both full URLs and handles\n    const instaUrl = user.instagramHandle.startsWith('http') \n      ? user.instagramHandle \n      : `https://instagram.com/${user.instagramHandle}`;\n    sameAs.push(instaUrl);\n  }\n  if (user.telegramHandle) {\n    // Handle both full URLs and handles\n    const telegramUrl = user.telegramHandle.startsWith('http') || user.telegramHandle.startsWith('https://t.me/')\n      ? user.telegramHandle\n      : `https://t.me/${user.telegramHandle}`;\n    sameAs.push(telegramUrl);\n  }\n  if (user.myfxbookLink) sameAs.push(user.myfxbookLink);\n  \n  // Build knowsAbout from badges (expertise areas)\n  const knowsAbout: string[] = [];\n  if (badges && badges.length > 0) {\n    // Map badge types to expertise areas\n    const badgeToExpertise: Record<string, string> = {\n      'EA_EXPERT': 'Expert Advisor Development',\n      'TRADER_PRO': 'Forex Trading',\n      'HELPFUL_MEMBER': 'Community Support',\n      'TOP_CONTRIBUTOR': 'Technical Analysis',\n      'VERIFIED_TRADER': 'Live Trading',\n      'EARLY_ADOPTER': 'Trading Systems',\n      'CONTENT_CREATOR': 'Trading Education'\n    };\n    badges.forEach(badge => {\n      if (badgeToExpertise[badge]) {\n        knowsAbout.push(badgeToExpertise[badge]);\n      }\n    });\n  }\n  \n  // Add default expertise based on user level\n  if (!knowsAbout.length) {\n    knowsAbout.push('Forex Trading', 'Expert Advisors');\n  }\n  \n  // Build interaction statistics\n  const interactionStatistic: InteractionCounter[] = [];\n  if (threadCount) {\n    interactionStatistic.push({\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/CreateAction',\n      userInteractionCount: threadCount,\n    });\n  }\n  if (replyCount) {\n    interactionStatistic.push({\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/CommentAction',\n      userInteractionCount: replyCount,\n    });\n  }\n  \n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Person',\n    '@id': `${baseUrl}/user/${user.username}#person`,\n    name,\n    url: `${baseUrl}/user/${user.username}`,\n    image: user.profileImageUrl || `${baseUrl}/default-avatar.png`,\n    description: `Forex trader and community member on YoForex with ${reputationScore || 0} reputation points`,\n    jobTitle: 'Forex Trader',\n    worksFor: {\n      '@type': 'Organization',\n      '@id': `${baseUrl}#organization`,\n      name: 'YoForex Community',\n      url: baseUrl,\n    },\n    ...(sameAs.length > 0 && { sameAs }),\n    ...(knowsAbout.length > 0 && { knowsAbout }),\n    ...(interactionStatistic.length > 0 && { interactionStatistic }),\n  };\n}\n\n/**\n * Generate ProfilePage schema for user profiles (legacy)\n * Use generatePersonSchema for comprehensive Person schema\n */\nexport function generateProfilePageSchema(params: {\n  user: User;\n  canonicalUrl: string;\n}): ProfilePageSchema {\n  const { user, canonicalUrl } = params;\n\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'ProfilePage',\n    '@id': canonicalUrl,\n    mainEntity: {\n      '@type': 'Person',\n      '@id': `${canonicalUrl}#person`,\n      name: user.username,\n      url: canonicalUrl,\n      image: user.profileImageUrl || undefined,\n    },\n    dateCreated: user.createdAt ? new Date(user.createdAt).toISOString() : undefined,\n  };\n}\n\n/**\n * Generate FAQPage schema from Q&A content\n */\nexport function generateFAQSchema(\n  questions: Array<{ question: string; answer: string }>\n): FAQPageSchema {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'FAQPage',\n    mainEntity: questions.map((q) => ({\n      '@type': 'Question',\n      name: q.question,\n      acceptedAnswer: {\n        '@type': 'Answer',\n        text: q.answer,\n      },\n    })),\n  };\n}\n\n/**\n * Generate VideoObject schema\n */\nexport function generateVideoSchema(params: {\n  title: string;\n  description?: string;\n  thumbnailUrl?: string;\n  uploadDate?: string;\n  duration?: string;\n  embedUrl?: string;\n  views?: number;\n}): VideoObjectSchema {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'VideoObject',\n    name: params.title,\n    description: params.description,\n    thumbnailUrl: params.thumbnailUrl,\n    uploadDate: params.uploadDate,\n    duration: params.duration, // Format: PT#M#S (e.g., PT2M30S)\n    embedUrl: params.embedUrl,\n    interactionStatistic: params.views\n      ? {\n          '@type': 'InteractionCounter',\n          interactionType: 'https://schema.org/WatchAction',\n          userInteractionCount: params.views,\n        }\n      : undefined,\n  };\n}\n\n// ============================================================================\n// COMBINED SCHEMA BUILDERS\n// ============================================================================\n\n/**\n * Generate complete homepage schema using @graph\n * Includes WebSite + Organization\n */\nexport function generateHomepageSchema(config: SiteConfig = SITE_CONFIG) {\n  return {\n    '@context': 'https://schema.org',\n    '@graph': [generateOrganizationSchema(config), generateWebSiteSchema(config)],\n  };\n}\n\n/**\n * Generate schema for inner pages with breadcrumbs\n */\nexport function generatePageWithBreadcrumbsSchema(\n  breadcrumbItems: Array<{ name: string; url: string }>,\n  config: SiteConfig = SITE_CONFIG\n) {\n  return {\n    '@context': 'https://schema.org',\n    '@graph': [\n      generateBreadcrumbSchema(breadcrumbItems),\n      {\n        '@type': 'Organization',\n        '@id': config.organizationId,\n        name: config.name,\n        url: config.url,\n        logo: config.logo,\n      },\n    ],\n  };\n}\n\n// ============================================================================\n// CONTENT TYPE DETECTION\n// ============================================================================\n\nexport type ContentType =\n  | 'homepage'\n  | 'article'\n  | 'product'\n  | 'category'\n  | 'profile'\n  | 'faq'\n  | 'video'\n  | 'generic';\n\n/**\n * Detect content type based on path and data\n */\nexport function detectContentType(pathname: string): ContentType {\n  if (pathname === '/') return 'homepage';\n  if (pathname.startsWith('/thread/') || pathname.startsWith('/discussions/'))\n    return 'article';\n  if (pathname.startsWith('/content/') || pathname.startsWith('/marketplace/'))\n    return 'product';\n  if (pathname.startsWith('/category/')) return 'category';\n  if (pathname.startsWith('/user/')) return 'profile';\n  if (pathname.startsWith('/faq')) return 'faq';\n\n  return 'generic';\n}\n\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n\n/**\n * Convert schema object to JSON-LD script tag\n */\nexport function schemaToScriptTag(schema: any): string {\n  return `<script type=\"application/ld+json\">${JSON.stringify(schema, null, 2)}</script>`;\n}\n\n/**\n * Validate schema structure (basic validation)\n * For production, use Google Rich Results Test API\n */\nexport function validateSchema(schema: BaseSchema): {\n  valid: boolean;\n  errors: string[];\n} {\n  const errors: string[] = [];\n\n  if (!schema['@context']) {\n    errors.push('Missing @context property');\n  }\n\n  if (!schema['@type']) {\n    errors.push('Missing @type property');\n  }\n\n  if (schema['@context'] !== 'https://schema.org') {\n    errors.push('Invalid @context - must be \"https://schema.org\"');\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors,\n  };\n}\n\n/**\n * Generate validation URL for Google Rich Results Test\n */\nexport function getRichResultsTestUrl(pageUrl: string): string {\n  return `https://search.google.com/test/rich-results?url=${encodeURIComponent(pageUrl)}`;\n}\n\n/**\n * Generate validation URL for Schema.org Validator\n */\nexport function getSchemaValidatorUrl(pageUrl: string): string {\n  return `https://validator.schema.org/#url=${encodeURIComponent(pageUrl)}`;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2OM,MAAM,cAA0B;IACrC,MAAM;IACN,KAAK,6DAAoC;IACzC,aAAa;IACb,MAAM,GAAG,6DAAoC,sBAAsB,SAAS,CAAC;IAC7E,gBAAgB,GAAG,6DAAoC,sBAAsB,cAAc,CAAC;IAC5F,cAAc;IACd,OAAO;IACP,gBAAgB;QACd;QACA;QACA;KACD;IACD,gBAAgB;AAClB;AAUO,SAAS,sBAAsB,SAAqB,WAAW;IACpE,OAAO;QACL,YAAY;QACZ,SAAS;QACT,OAAO,GAAG,OAAO,GAAG,CAAC,SAAS,CAAC;QAC/B,KAAK,OAAO,GAAG;QACf,MAAM,OAAO,IAAI;QACjB,aAAa,OAAO,WAAW;QAC/B,YAAY;QACZ,WAAW;YACT,OAAO,OAAO,cAAc;QAC9B;QACA,iBAAiB,OAAO,cAAc,GAClC;YACE,SAAS;YACT,QAAQ;gBACN,SAAS;gBACT,aAAa,GAAG,OAAO,GAAG,GAAG,OAAO,cAAc,EAAE;YACtD;YACA,eAAe;QACjB,IACA;IACN;AACF;AAMO,SAAS,2BACd,SAAqB,WAAW;IAEhC,OAAO;QACL,YAAY;QACZ,SAAS;QACT,OAAO,OAAO,cAAc;QAC5B,MAAM,OAAO,IAAI;QACjB,KAAK,OAAO,GAAG;QACf,MAAM,OAAO,IAAI;QACjB,aAAa,OAAO,WAAW;QAC/B,OAAO,OAAO,KAAK;QACnB,WAAW,OAAO,SAAS;QAC3B,cAAc,OAAO,YAAY;QACjC,QAAQ,OAAO,cAAc;IAC/B;AACF;AAMO,SAAS,yBACd,KAA2C;IAE3C,OAAO;QACL,YAAY;QACZ,SAAS;QACT,iBAAiB,MAAM,GAAG,CAAC,CAAC,MAAM,QAAU,CAAC;gBAC3C,SAAS;gBACT,UAAU,QAAQ;gBAClB,MAAM,KAAK,IAAI;gBACf,MAAM,QAAQ,MAAM,MAAM,GAAG,IAAI,KAAK,GAAG,GAAG;YAC9C,CAAC;IACH;AACF;AAMO,SAAS,sBAAsB,MAKrC;IACC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG;IAEnD,OAAO;QACL,YAAY;QACZ,SAAS;QACT,OAAO;QACP,UAAU,OAAO,KAAK;QACtB,aAAa,OAAO,eAAe,IAAI,OAAO,IAAI,EAAE,UAAU,GAAG,QAAQ;QACzE,OAAO,GAAG,YAAY,IAAI,EAAE;QAC5B,eAAe,IAAI,KAAK,OAAO,SAAS,EAAE,WAAW;QACrD,cAAc,IAAI,KAAK,OAAO,SAAS,EAAE,WAAW;QACpD,QAAQ,SACJ;YACE,SAAS;YACT,MAAM,OAAO,QAAQ;YACrB,KAAK,GAAG,YAAY,GAAG,CAAC,MAAM,EAAE,OAAO,QAAQ,EAAE;QACnD,IACA;YACE,SAAS;YACT,MAAM;QACR;QACJ,WAAW;YACT,SAAS;YACT,OAAO,YAAY,cAAc;YACjC,MAAM,YAAY,IAAI;YACtB,MAAM;gBACJ,SAAS;gBACT,KAAK,YAAY,IAAI;YACvB;QACF;QACA,WAAW,OAAO,IAAI,GAAG,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,MAAM,GAAG;QAC3D,cAAc,OAAO,UAAU,IAAI;QACnC,sBAAsB;YACpB,SAAS;YACT,iBAAiB;YACjB,sBAAsB,OAAO,KAAK,IAAI;QACxC;IACF;AACF;AAMO,SAAS,sBAAsB,MAMrC;IACC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG;IAEtE,MAAM,SAAS,QAAQ,MAAM,IAAI,EAAE;IACnC,MAAM,aAAa,OAAO,IAAI,CAAC,CAAC,MAAQ,IAAI,OAAO,KAAK,MAAM,CAAC,EAAE;IAEjE,OAAO;QACL,YAAY;QACZ,SAAS;QACT,OAAO;QACP,MAAM,QAAQ,KAAK;QACnB,aAAa,QAAQ,WAAW,IAAI;QACpC,OAAO,YAAY,OAAO,YAAY,IAAI;QAC1C,OAAO;YACL,SAAS;YACT,MAAM,YAAY,IAAI;QACxB;QACA,QAAQ;YACN,SAAS;YACT,KAAK;YACL,eAAe;YACf,OAAO,AAAC,QAAgB,KAAK,EAAE,cAAc,AAAC,QAAgB,KAAK,EAAE,cAAc;YACnF,cAAc,QAAQ,MAAM,KAAK,aAC7B,+BACA;YACJ,QAAQ;gBACN,SAAS;gBACT,OAAO,YAAY,cAAc;gBACjC,MAAM,YAAY,IAAI;YACxB;QACF;QACA,iBACE,iBAAiB,cACb;YACE,SAAS;YACT,aAAa;YACb,aAAa;YACb,YAAY;YACZ,aAAa;QACf,IACA;IACR;AACF;AAMO,SAAS,qBAAqB,MAOpC;IACC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG;IAE5E,6DAA6D;IAC7D,MAAM,OAAO,KAAK,SAAS,IAAI,KAAK,QAAQ,GACxC,GAAG,KAAK,SAAS,CAAC,CAAC,EAAE,KAAK,QAAQ,EAAE,GACpC,KAAK,QAAQ;IAEjB,0CAA0C;IAC1C,MAAM,SAAmB,EAAE;IAC3B,IAAI,KAAK,UAAU,EAAE,OAAO,IAAI,CAAC,KAAK,UAAU;IAChD,IAAI,KAAK,eAAe,EAAE;QACxB,oCAAoC;QACpC,MAAM,WAAW,KAAK,eAAe,CAAC,UAAU,CAAC,UAC7C,KAAK,eAAe,GACpB,CAAC,sBAAsB,EAAE,KAAK,eAAe,EAAE;QACnD,OAAO,IAAI,CAAC;IACd;IACA,IAAI,KAAK,cAAc,EAAE;QACvB,oCAAoC;QACpC,MAAM,cAAc,KAAK,cAAc,CAAC,UAAU,CAAC,WAAW,KAAK,cAAc,CAAC,UAAU,CAAC,mBACzF,KAAK,cAAc,GACnB,CAAC,aAAa,EAAE,KAAK,cAAc,EAAE;QACzC,OAAO,IAAI,CAAC;IACd;IACA,IAAI,KAAK,YAAY,EAAE,OAAO,IAAI,CAAC,KAAK,YAAY;IAEpD,iDAAiD;IACjD,MAAM,aAAuB,EAAE;IAC/B,IAAI,UAAU,OAAO,MAAM,GAAG,GAAG;QAC/B,qCAAqC;QACrC,MAAM,mBAA2C;YAC/C,aAAa;YACb,cAAc;YACd,kBAAkB;YAClB,mBAAmB;YACnB,mBAAmB;YACnB,iBAAiB;YACjB,mBAAmB;QACrB;QACA,OAAO,OAAO,CAAC,CAAA;YACb,IAAI,gBAAgB,CAAC,MAAM,EAAE;gBAC3B,WAAW,IAAI,CAAC,gBAAgB,CAAC,MAAM;YACzC;QACF;IACF;IAEA,4CAA4C;IAC5C,IAAI,CAAC,WAAW,MAAM,EAAE;QACtB,WAAW,IAAI,CAAC,iBAAiB;IACnC;IAEA,+BAA+B;IAC/B,MAAM,uBAA6C,EAAE;IACrD,IAAI,aAAa;QACf,qBAAqB,IAAI,CAAC;YACxB,SAAS;YACT,iBAAiB;YACjB,sBAAsB;QACxB;IACF;IACA,IAAI,YAAY;QACd,qBAAqB,IAAI,CAAC;YACxB,SAAS;YACT,iBAAiB;YACjB,sBAAsB;QACxB;IACF;IAEA,OAAO;QACL,YAAY;QACZ,SAAS;QACT,OAAO,GAAG,QAAQ,MAAM,EAAE,KAAK,QAAQ,CAAC,OAAO,CAAC;QAChD;QACA,KAAK,GAAG,QAAQ,MAAM,EAAE,KAAK,QAAQ,EAAE;QACvC,OAAO,KAAK,eAAe,IAAI,GAAG,QAAQ,mBAAmB,CAAC;QAC9D,aAAa,CAAC,kDAAkD,EAAE,mBAAmB,EAAE,kBAAkB,CAAC;QAC1G,UAAU;QACV,UAAU;YACR,SAAS;YACT,OAAO,GAAG,QAAQ,aAAa,CAAC;YAChC,MAAM;YACN,KAAK;QACP;QACA,GAAI,OAAO,MAAM,GAAG,KAAK;YAAE;QAAO,CAAC;QACnC,GAAI,WAAW,MAAM,GAAG,KAAK;YAAE;QAAW,CAAC;QAC3C,GAAI,qBAAqB,MAAM,GAAG,KAAK;YAAE;QAAqB,CAAC;IACjE;AACF;AAMO,SAAS,0BAA0B,MAGzC;IACC,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG;IAE/B,OAAO;QACL,YAAY;QACZ,SAAS;QACT,OAAO;QACP,YAAY;YACV,SAAS;YACT,OAAO,GAAG,aAAa,OAAO,CAAC;YAC/B,MAAM,KAAK,QAAQ;YACnB,KAAK;YACL,OAAO,KAAK,eAAe,IAAI;QACjC;QACA,aAAa,KAAK,SAAS,GAAG,IAAI,KAAK,KAAK,SAAS,EAAE,WAAW,KAAK;IACzE;AACF;AAKO,SAAS,kBACd,SAAsD;IAEtD,OAAO;QACL,YAAY;QACZ,SAAS;QACT,YAAY,UAAU,GAAG,CAAC,CAAC,IAAM,CAAC;gBAChC,SAAS;gBACT,MAAM,EAAE,QAAQ;gBAChB,gBAAgB;oBACd,SAAS;oBACT,MAAM,EAAE,MAAM;gBAChB;YACF,CAAC;IACH;AACF;AAKO,SAAS,oBAAoB,MAQnC;IACC,OAAO;QACL,YAAY;QACZ,SAAS;QACT,MAAM,OAAO,KAAK;QAClB,aAAa,OAAO,WAAW;QAC/B,cAAc,OAAO,YAAY;QACjC,YAAY,OAAO,UAAU;QAC7B,UAAU,OAAO,QAAQ;QACzB,UAAU,OAAO,QAAQ;QACzB,sBAAsB,OAAO,KAAK,GAC9B;YACE,SAAS;YACT,iBAAiB;YACjB,sBAAsB,OAAO,KAAK;QACpC,IACA;IACN;AACF;AAUO,SAAS,uBAAuB,SAAqB,WAAW;IACrE,OAAO;QACL,YAAY;QACZ,UAAU;YAAC,2BAA2B;YAAS,sBAAsB;SAAQ;IAC/E;AACF;AAKO,SAAS,kCACd,eAAqD,EACrD,SAAqB,WAAW;IAEhC,OAAO;QACL,YAAY;QACZ,UAAU;YACR,yBAAyB;YACzB;gBACE,SAAS;gBACT,OAAO,OAAO,cAAc;gBAC5B,MAAM,OAAO,IAAI;gBACjB,KAAK,OAAO,GAAG;gBACf,MAAM,OAAO,IAAI;YACnB;SACD;IACH;AACF;AAmBO,SAAS,kBAAkB,QAAgB;IAChD,IAAI,aAAa,KAAK,OAAO;IAC7B,IAAI,SAAS,UAAU,CAAC,eAAe,SAAS,UAAU,CAAC,kBACzD,OAAO;IACT,IAAI,SAAS,UAAU,CAAC,gBAAgB,SAAS,UAAU,CAAC,kBAC1D,OAAO;IACT,IAAI,SAAS,UAAU,CAAC,eAAe,OAAO;IAC9C,IAAI,SAAS,UAAU,CAAC,WAAW,OAAO;IAC1C,IAAI,SAAS,UAAU,CAAC,SAAS,OAAO;IAExC,OAAO;AACT;AASO,SAAS,kBAAkB,MAAW;IAC3C,OAAO,CAAC,mCAAmC,EAAE,KAAK,SAAS,CAAC,QAAQ,MAAM,GAAG,SAAS,CAAC;AACzF;AAMO,SAAS,eAAe,MAAkB;IAI/C,MAAM,SAAmB,EAAE;IAE3B,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;QACvB,OAAO,IAAI,CAAC;IACd;IAEA,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;QACpB,OAAO,IAAI,CAAC;IACd;IAEA,IAAI,MAAM,CAAC,WAAW,KAAK,sBAAsB;QAC/C,OAAO,IAAI,CAAC;IACd;IAEA,OAAO;QACL,OAAO,OAAO,MAAM,KAAK;QACzB;IACF;AACF;AAKO,SAAS,sBAAsB,OAAe;IACnD,OAAO,CAAC,gDAAgD,EAAE,mBAAmB,UAAU;AACzF;AAKO,SAAS,sBAAsB,OAAe;IACnD,OAAO,CAAC,kCAAkC,EAAE,mBAAmB,UAAU;AAC3E","debugId":null}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/user/%5Busername%5D/page.tsx"],"sourcesContent":["import { Metadata } from 'next';\nimport ProfileClient from './ProfileClient';\nimport { SchemaScript } from '@/components/SchemaGenerator';\nimport { generatePersonSchema } from '@/lib/schema-generator';\n\n// Express API base URL\nconst EXPRESS_URL = process.env.NEXT_PUBLIC_EXPRESS_URL || 'http://localhost:5000';\nconst BASE_URL = process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com';\n\n// Generate metadata for SEO\nexport async function generateMetadata({ params }: { params: Promise<{ username: string }> }): Promise<Metadata> {\n  const { username } = await params;\n  try {\n    const res = await fetch(`${EXPRESS_URL}/api/user/${username}/profile`, { cache: 'no-store' });\n    if (!res.ok) {\n      return {\n        title: 'User Not Found | YoForex Community',\n      };\n    }\n\n    const profileData = await res.json();\n    const user = profileData?.user;\n    \n    if (!user) {\n      return {\n        title: 'User Not Found | YoForex Community',\n      };\n    }\n    \n    return {\n      title: `${user.username}'s Profile | YoForex Community`,\n      description: `View ${user.username}'s profile, badges, contributions, and reputation on YoForex`,\n      keywords: `forex trader, ${user.username}, MT4, MT5, expert advisor`,\n      openGraph: {\n        title: `${user.username}'s Profile`,\n        description: `View ${user.username}'s profile, badges, contributions, and reputation on YoForex`,\n        type: 'profile',\n      },\n      twitter: {\n        card: 'summary',\n        title: `${user.username}'s Profile`,\n        description: `View ${user.username}'s profile, badges, contributions, and reputation on YoForex`,\n      },\n    };\n  } catch (error) {\n    return {\n      title: 'User Not Found | YoForex Community',\n    };\n  }\n}\n\n// Main page component (Server Component)\nexport default async function UserProfilePage({ params }: { params: Promise<{ username: string }> }) {\n  const { username } = await params;\n  \n  // Fetch profile data from the comprehensive profile endpoint\n  let profileData = undefined;\n  try {\n    const profileRes = await fetch(`${EXPRESS_URL}/api/user/${username}/profile`, { \n      cache: 'no-store',\n    });\n    if (profileRes.ok) {\n      profileData = await profileRes.json();\n    }\n  } catch (error) {\n    // Swallow error - ProfileClient will show custom error card\n    profileData = undefined;\n  }\n\n  // Generate Person schema if we have profile data\n  let personSchema = null;\n  if (profileData?.user) {\n    personSchema = generatePersonSchema({\n      user: profileData.user,\n      baseUrl: BASE_URL,\n      reputationScore: profileData.user.reputationScore,\n      threadCount: profileData.stats?.threads || 0,\n      replyCount: profileData.stats?.replies || 0,\n      badges: profileData.user.badges?.map((badge: any) => badge.slug || badge) || []\n    });\n  }\n\n  // Pass profile data to Client Component\n  return (\n    <>\n      {personSchema && <SchemaScript schema={personSchema} />}\n      <ProfileClient\n        username={username}\n        initialData={profileData}\n      />\n    </>\n  );\n}\n\n// Enable dynamic rendering with no caching\nexport const dynamic = 'force-dynamic';\nexport const revalidate = 0;\n"],"names":[],"mappings":";;;;;;;;;;;AACA;AACA;AACA;;;;;AAEA,uBAAuB;AACvB,MAAM,cAAc,6DAAuC;AAC3D,MAAM,WAAW,6DAAoC;AAG9C,eAAe,iBAAiB,EAAE,MAAM,EAA6C;IAC1F,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM;IAC3B,IAAI;QACF,MAAM,MAAM,MAAM,MAAM,GAAG,YAAY,UAAU,EAAE,SAAS,QAAQ,CAAC,EAAE;YAAE,OAAO;QAAW;QAC3F,IAAI,CAAC,IAAI,EAAE,EAAE;YACX,OAAO;gBACL,OAAO;YACT;QACF;QAEA,MAAM,cAAc,MAAM,IAAI,IAAI;QAClC,MAAM,OAAO,aAAa;QAE1B,IAAI,CAAC,MAAM;YACT,OAAO;gBACL,OAAO;YACT;QACF;QAEA,OAAO;YACL,OAAO,GAAG,KAAK,QAAQ,CAAC,8BAA8B,CAAC;YACvD,aAAa,CAAC,KAAK,EAAE,KAAK,QAAQ,CAAC,4DAA4D,CAAC;YAChG,UAAU,CAAC,cAAc,EAAE,KAAK,QAAQ,CAAC,0BAA0B,CAAC;YACpE,WAAW;gBACT,OAAO,GAAG,KAAK,QAAQ,CAAC,UAAU,CAAC;gBACnC,aAAa,CAAC,KAAK,EAAE,KAAK,QAAQ,CAAC,4DAA4D,CAAC;gBAChG,MAAM;YACR;YACA,SAAS;gBACP,MAAM;gBACN,OAAO,GAAG,KAAK,QAAQ,CAAC,UAAU,CAAC;gBACnC,aAAa,CAAC,KAAK,EAAE,KAAK,QAAQ,CAAC,4DAA4D,CAAC;YAClG;QACF;IACF,EAAE,OAAO,OAAO;QACd,OAAO;YACL,OAAO;QACT;IACF;AACF;AAGe,eAAe,gBAAgB,EAAE,MAAM,EAA6C;IACjG,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM;IAE3B,6DAA6D;IAC7D,IAAI,cAAc;IAClB,IAAI;QACF,MAAM,aAAa,MAAM,MAAM,GAAG,YAAY,UAAU,EAAE,SAAS,QAAQ,CAAC,EAAE;YAC5E,OAAO;QACT;QACA,IAAI,WAAW,EAAE,EAAE;YACjB,cAAc,MAAM,WAAW,IAAI;QACrC;IACF,EAAE,OAAO,OAAO;QACd,4DAA4D;QAC5D,cAAc;IAChB;IAEA,iDAAiD;IACjD,IAAI,eAAe;IACnB,IAAI,aAAa,MAAM;QACrB,eAAe,IAAA,kJAAoB,EAAC;YAClC,MAAM,YAAY,IAAI;YACtB,SAAS;YACT,iBAAiB,YAAY,IAAI,CAAC,eAAe;YACjD,aAAa,YAAY,KAAK,EAAE,WAAW;YAC3C,YAAY,YAAY,KAAK,EAAE,WAAW;YAC1C,QAAQ,YAAY,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAe,MAAM,IAAI,IAAI,UAAU,EAAE;QACjF;IACF;IAEA,wCAAwC;IACxC,qBACE;;YACG,8BAAgB,8OAAC,qJAAY;gBAAC,QAAQ;;;;;;0BACvC,8OAAC,wJAAa;gBACZ,UAAU;gBACV,aAAa;;;;;;;;AAIrB;AAGO,MAAM,UAAU;AAChB,MAAM,aAAa","debugId":null}}]
}