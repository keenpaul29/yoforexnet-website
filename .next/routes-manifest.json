{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "priority": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [
      {
        "source": "/api/:path*",
        "destination": "http://127.0.0.1:3001/api/:path*",
        "regex": "^/api(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
      }
    ],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/brokers/[slug]",
      "regex": "^/brokers/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPslug": "nxtPslug"
      },
      "namedRegex": "^/brokers/(?<nxtPslug>[^/]+?)(?:/)?$"
    },
    {
      "page": "/category/[slug]",
      "regex": "^/category/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPslug": "nxtPslug"
      },
      "namedRegex": "^/category/(?<nxtPslug>[^/]+?)(?:/)?$"
    },
    {
      "page": "/content/[slug]",
      "regex": "^/content/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPslug": "nxtPslug"
      },
      "namedRegex": "^/content/(?<nxtPslug>[^/]+?)(?:/)?$"
    },
    {
      "page": "/guides/[slug]",
      "regex": "^/guides/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPslug": "nxtPslug"
      },
      "namedRegex": "^/guides/(?<nxtPslug>[^/]+?)(?:/)?$"
    },
    {
      "page": "/thread/[slug]",
      "regex": "^/thread/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPslug": "nxtPslug"
      },
      "namedRegex": "^/thread/(?<nxtPslug>[^/]+?)(?:/)?$"
    },
    {
      "page": "/user/[username]",
      "regex": "^/user/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPusername": "nxtPusername"
      },
      "namedRegex": "^/user/(?<nxtPusername>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_global-error",
      "regex": "^/_global\\-error(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_global\\-error(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/admin",
      "regex": "^/admin(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin(?:/)?$"
    },
    {
      "page": "/api-docs",
      "regex": "^/api\\-docs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/api\\-docs(?:/)?$"
    },
    {
      "page": "/brokers",
      "regex": "^/brokers(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/brokers(?:/)?$"
    },
    {
      "page": "/brokers/submit-review",
      "regex": "^/brokers/submit\\-review(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/brokers/submit\\-review(?:/)?$"
    },
    {
      "page": "/careers",
      "regex": "^/careers(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/careers(?:/)?$"
    },
    {
      "page": "/categories",
      "regex": "^/categories(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/categories(?:/)?$"
    },
    {
      "page": "/dashboard",
      "regex": "^/dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard(?:/)?$"
    },
    {
      "page": "/dashboard/settings",
      "regex": "^/dashboard/settings(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard/settings(?:/)?$"
    },
    {
      "page": "/discussions",
      "regex": "^/discussions(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/discussions(?:/)?$"
    },
    {
      "page": "/discussions/new",
      "regex": "^/discussions/new(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/discussions/new(?:/)?$"
    },
    {
      "page": "/earn",
      "regex": "^/earn(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/earn(?:/)?$"
    },
    {
      "page": "/earn-coins",
      "regex": "^/earn\\-coins(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/earn\\-coins(?:/)?$"
    },
    {
      "page": "/feedback",
      "regex": "^/feedback(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/feedback(?:/)?$"
    },
    {
      "page": "/hot",
      "regex": "^/hot(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/hot(?:/)?$"
    },
    {
      "page": "/leaderboard",
      "regex": "^/leaderboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/leaderboard(?:/)?$"
    },
    {
      "page": "/marketplace",
      "regex": "^/marketplace(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/marketplace(?:/)?$"
    },
    {
      "page": "/members",
      "regex": "^/members(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/members(?:/)?$"
    },
    {
      "page": "/messages",
      "regex": "^/messages(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/messages(?:/)?$"
    },
    {
      "page": "/notifications",
      "regex": "^/notifications(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/notifications(?:/)?$"
    },
    {
      "page": "/partnerships",
      "regex": "^/partnerships(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/partnerships(?:/)?$"
    },
    {
      "page": "/privacy",
      "regex": "^/privacy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/privacy(?:/)?$"
    },
    {
      "page": "/publish",
      "regex": "^/publish(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/publish(?:/)?$"
    },
    {
      "page": "/recharge",
      "regex": "^/recharge(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/recharge(?:/)?$"
    },
    {
      "page": "/refund-policy",
      "regex": "^/refund\\-policy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/refund\\-policy(?:/)?$"
    },
    {
      "page": "/robots.txt",
      "regex": "^/robots\\.txt(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/robots\\.txt(?:/)?$"
    },
    {
      "page": "/settings",
      "regex": "^/settings(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings(?:/)?$"
    },
    {
      "page": "/sitemap.xml",
      "regex": "^/sitemap\\.xml(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/sitemap\\.xml(?:/)?$"
    },
    {
      "page": "/support",
      "regex": "^/support(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/support(?:/)?$"
    },
    {
      "page": "/terms",
      "regex": "^/terms(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/terms(?:/)?$"
    },
    {
      "page": "/transactions",
      "regex": "^/transactions(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/transactions(?:/)?$"
    },
    {
      "page": "/withdrawals",
      "regex": "^/withdrawals(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/withdrawals(?:/)?$"
    },
    {
      "page": "/withdrawals/history",
      "regex": "^/withdrawals/history(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/withdrawals/history(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments",
    "clientParamParsing": false,
    "dynamicRSCPrerender": false
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}