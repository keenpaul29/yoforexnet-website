{"version":3,"sources":["turbopack:///[project]/app/thread/[slug]/ThreadDetailClient.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/app/thread/[slug]/page.tsx"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/thread/[slug]/ThreadDetailClient.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/thread/[slug]/ThreadDetailClient.tsx\",\n    \"default\",\n);\n","import type { Metadata } from 'next';\nimport { notFound } from 'next/navigation';\nimport type { ForumThread, ForumReply } from '@shared/schema';\nimport ThreadDetailClient from './ThreadDetailClient';\n\ninterface PageProps {\n  params: Promise<{ slug: string }>;\n}\n\nasync function fetchData(url: string) {\n  try {\n    const expressUrl = process.env.NEXT_PUBLIC_EXPRESS_URL || 'http://localhost:5000';\n    const res = await fetch(`${expressUrl}${url}`, {\n      cache: 'no-store',\n      headers: {\n        'Accept': 'application/json',\n      },\n    });\n    \n    if (!res.ok) {\n      console.error(`Failed to fetch ${url}:`, res.status, res.statusText);\n      return null;\n    }\n    \n    return await res.json();\n  } catch (error) {\n    console.error(`Error fetching ${url}:`, error);\n    return null;\n  }\n}\n\nfunction stripHtml(html: string): string {\n  return html.replace(/<[^>]*>/g, '').replace(/&nbsp;/g, ' ').trim();\n}\n\nfunction createExcerpt(html: string, maxLength: number = 155): string {\n  const text = stripHtml(html);\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trim() + '...';\n}\n\nexport async function generateMetadata({ params }: PageProps): Promise<Metadata> {\n  const { slug } = await params;\n  const thread: ForumThread | null = await fetchData(`/api/threads/slug/${slug}`);\n\n  if (!thread) {\n    return {\n      title: 'Thread Not Found - YoForex',\n      description: 'The thread you are looking for does not exist.',\n    };\n  }\n\n  const description = thread.metaDescription || createExcerpt(thread.body || '');\n  const title = `${thread.title} - YoForex Forum`;\n\n  return {\n    title,\n    description,\n    keywords: [\n      thread.categorySlug || 'forum',\n      'EA discussion',\n      'forex forum',\n      'expert advisor',\n      'trading discussion',\n      'MT4',\n      'MT5',\n    ],\n    openGraph: {\n      title,\n      description,\n      type: 'article',\n      url: `https://yoforex.com/thread/${slug}`,\n      siteName: 'YoForex',\n      images: thread.thumbnailUrl ? [\n        {\n          url: thread.thumbnailUrl,\n          width: 1200,\n          height: 630,\n          alt: thread.title,\n        },\n      ] : undefined,\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title,\n      description,\n      images: thread.thumbnailUrl ? [thread.thumbnailUrl] : undefined,\n    },\n  };\n}\n\nexport default async function ThreadDetailPage({ params }: PageProps) {\n  const { slug } = await params;\n  \n  // Fetch thread data from Express API\n  const thread: ForumThread | null = await fetchData(`/api/threads/slug/${slug}`);\n  \n  // Return 404 if thread doesn't exist\n  if (!thread) {\n    notFound();\n  }\n  \n  // Fetch replies if thread exists\n  let replies: ForumReply[] = [];\n  if (thread?.id) {\n    const repliesData = await fetchData(`/api/threads/${thread.id}/replies`);\n    replies = repliesData || [];\n  }\n\n  return (\n    <ThreadDetailClient \n      initialThread={thread}\n      initialReplies={replies}\n    />\n  );\n}\n"],"names":[],"mappings":"2UAEe,CAAA,EAAA,AADf,EAAA,CAAA,CAAA,OACe,uBAAA,AAAuB,EAClC,WAAa,MAAM,AAAI,MAAM,0SAA4S,EACzU,yEACA,8DAHW,CAAA,EADf,AACe,EADf,CAAA,CAAA,OACe,uBAAA,AAAuB,EAClC,WAAa,MAAM,AAAI,MAAM,sRAAwR,EACrT,qDACA,mICJJ,EAAA,CAAA,CAAA,OAAA,IAAA,EAAA,EAAA,CAAA,CAAA,OAEA,EAAA,EAAA,CAAA,CAAA,OAMA,eAAe,EAAU,CAAW,EAClC,GAAI,CAEF,IAAM,EAAM,MAAM,MAAM,GAAG,qBAAa,GAAK,CAAE,CAC7C,MAAO,WACP,QAAS,CACP,OAAU,kBACZ,CACF,GAEA,GAAI,CAAC,EAAI,EAAE,CAET,CAFW,MACX,QAAQ,KAAK,CAAC,CAAC,gBAAgB,EAAE,EAAI,CAAC,CAAC,CAAE,EAAI,MAAM,CAAE,EAAI,UAAU,EAC5D,KAGT,OAAO,MAAM,EAAI,IAAI,EACvB,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,CAAC,eAAe,EAAE,EAAI,CAAC,CAAC,CAAE,GACjC,IACT,CACF,CAYO,eAAe,EAAiB,CAAE,QAAM,CAAa,EAC1D,GAAM,MAAE,CAAI,CAAE,CAAG,MAAM,EACjB,EAA6B,MAAM,EAAU,CAAC,kBAAkB,EAAE,EAAA,CAAM,EAE9E,GAAI,CAAC,EACH,MADW,AACJ,CACL,MAAO,6BACP,YAAa,gDACf,EAGF,IAAM,EAAc,EAAO,eAAe,EAAI,AAjBhD,SAAS,AAAc,CAAY,CAAE,EAAoB,GAAG,EAC1D,IAAM,EAJC,AAIgB,EAJX,GAIC,IAJM,CAAC,WAAY,IAAI,OAAO,CAAC,UAAW,KAAK,IAAI,UAKhE,AAAI,EAAK,MAAM,EAAI,EAAkB,EAC9B,EAAK,KADkB,IACT,CAAC,EAAG,GAAW,IAAI,GAAK,KAC/C,EAa8D,EAAO,IAAI,EAAI,IACrE,EAAQ,CAAA,EAAG,EAAO,KAAK,CAAC,gBAAgB,CAAC,CAE/C,MAAO,OACL,cACA,EACA,SAAU,CACR,EAAO,YAAY,EAAI,QACvB,gBACA,cACA,iBACA,qBACA,MACA,MACD,CACD,UAAW,OACT,cACA,EACA,KAAM,UACN,IAAK,CAAC,2BAA2B,EAAE,EAAA,CAAM,CACzC,SAAU,UACV,OAAQ,EAAO,YAAY,CAAG,CAC5B,CACE,IAAK,EAAO,YAAY,CACxB,MAAO,KACP,OAAQ,IACR,IAAK,EAAO,KAAK,AACnB,EACD,MAAG,CACN,EACA,QAAS,CACP,KAAM,4BACN,cACA,EACA,OAAQ,EAAO,YAAY,CAAG,CAAC,EAAO,YAAY,CAAC,MAAG,CACxD,CACF,CACF,CAEe,eAAe,EAAiB,QAAE,CAAM,CAAa,EAClE,GAAM,MAAE,CAAI,CAAE,CAAG,MAAM,EAGjB,EAA6B,MAAM,EAAU,CAAC,kBAAkB,EAAE,EAAA,CAAM,CAG1E,CAAC,GACH,CAAA,EAAA,EAAA,AADW,QACX,AAAQ,IAIV,IAAI,EAAwB,EAAE,CAM9B,OALI,GAAQ,IAAI,AAEd,GADoB,AACV,MADgB,EAAU,CAAC,aAAa,EAAE,EAAO,EAAE,CAAC,QAAQ,CAAC,GAC9C,EAAA,AAAE,EAI3B,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAkB,CAAA,CACjB,cAAe,EACf,eAAgB,GAGtB","ignoreList":[0]}