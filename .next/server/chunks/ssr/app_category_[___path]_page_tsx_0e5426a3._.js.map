{"version":3,"sources":["turbopack:///[project]/app/category/[...path]/page.tsx","turbopack:///[project]/app/components/BreadcrumbSchema.tsx","turbopack:///[project]/lib/schema-detector.ts","turbopack:///[project]/lib/db.ts","turbopack:///[project]/shared/relations.ts"],"sourcesContent":["/**\n * Hierarchical Category & Thread Page (Catch-all Route)\n * \n * Handles both:\n * 1. Category browsing: /category/trading-strategies/scalping-m1-m15\n * 2. Thread pages: /category/trading-strategies/scalping-m1-m15/thread-slug\n * \n * SEO-optimized with full hierarchical paths for better search engine discovery\n */\n\nimport { Metadata } from 'next';\nimport { notFound } from 'next/navigation';\nimport { getInternalApiUrl } from '@/lib/api-config';\nimport { getCategoryByPath } from '@/lib/category-path';\nimport BreadcrumbSchema from '@/components/BreadcrumbSchema';\nimport { SchemaScript } from '@/components/SchemaGenerator';\nimport { generateDiscussionForumPostingSchema, generateProductSchema, generateFAQPageSchema, generateNewsArticleSchema, generateBlogPostingSchema, generateVideoObjectSchema } from '@/lib/schema-generator';\nimport { detectSchemaType } from '@/lib/schema-detector';\nimport { db } from '@/lib/db';\nimport { forumCategories } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// Dynamic imports for components with dynamic route segments\nconst loadThreadClient = () => import('../../thread/[slug]/ThreadDetailClient');\nconst loadCategoryClient = () => import('../[slug]/CategoryDiscussionClient');\nconst loadContentClient = () => import('../../content/[slug]/ContentDetailClient');\n\ntype Props = {\n  params: { path: string[] };\n  searchParams: { [key: string]: string | string[] | undefined };\n};\n\nexport async function generateMetadata({ params }: Props): Promise<Metadata> {\n  const { path: pathSegments } = await params;\n  const lastSlug = pathSegments[pathSegments.length - 1];\n  const categoryPath = pathSegments.slice(0, -1).join('/');\n  \n  // Try to find a thread first (most specific)\n  try {\n    const apiUrl = getInternalApiUrl();\n    const response = await fetch(`${apiUrl}/api/threads/slug/${lastSlug}`);\n    if (response.ok) {\n      const thread = await response.json();\n      return {\n        title: thread.title,\n        description: thread.body?.substring(0, 160) || `Discussion about ${thread.title}`,\n        keywords: [\n          'forex forum',\n          'trading discussion',\n          thread.title,\n          ...categoryPath.split('/'),\n        ],\n        openGraph: {\n          title: thread.title,\n          description: thread.body?.substring(0, 160),\n          url: `/category/${pathSegments.join('/')}`,\n          type: 'article',\n        },\n      };\n    }\n  } catch (error) {\n    // Not a thread, continue to check if it's a category\n  }\n  \n  // Check if it's a marketplace content item\n  try {\n    const apiUrl = getInternalApiUrl();\n    const response = await fetch(`${apiUrl}/api/content/slug/${lastSlug}`);\n    if (response.ok) {\n      const content = await response.json();\n      return {\n        title: `${content.title} | YoForex Marketplace`,\n        description: content.description?.substring(0, 160) || `Download ${content.title}`,\n        keywords: ['forex EA', 'trading indicator', content.title],\n        openGraph: {\n          title: content.title,\n          description: content.description?.substring(0, 160),\n          url: `/category/${pathSegments.join('/')}`,\n          type: 'article',\n        },\n      };\n    }\n  } catch (error) {\n    // Not content either\n  }\n  \n  // It must be a category page\n  const fullPath = pathSegments.join('/');\n  const category = await getCategoryByPath(fullPath);\n  \n  if (!category) {\n    return {\n      title: 'Category Not Found | YoForex',\n    };\n  }\n  \n  return {\n    title: `${category.name} | YoForex Forum`,\n    description: category.description || `Browse ${category.name} discussions and content`,\n    keywords: ['forex forum', category.name, ...categoryPath.split('/')],\n    openGraph: {\n      title: category.name,\n      description: category.description || `Browse ${category.name} discussions`,\n      url: `/category/${fullPath}`,\n      type: 'website',\n    },\n  };\n}\n\nexport default async function HierarchicalCategoryPage({ params }: Props) {\n  const { path: pathSegments } = await params;\n  const lastSlug = pathSegments[pathSegments.length - 1];\n  const categoryPath = pathSegments.slice(0, -1).join('/');\n  \n  // Try to find a thread first (most specific content)\n  let thread = null;\n  let replies = [];\n  try {\n    const apiUrl = getInternalApiUrl();\n    const threadRes = await fetch(`${apiUrl}/api/threads/slug/${lastSlug}`);\n    \n    if (threadRes.ok) {\n      thread = await threadRes.json();\n      // Fetch replies using thread ID\n      try {\n        const repliesRes = await fetch(`${apiUrl}/api/threads/${thread.id}/replies`);\n        if (repliesRes.ok) {\n          replies = await repliesRes.json();\n        }\n      } catch (e) {\n        // Replies fetch failed, continue with empty replies\n        console.warn('Failed to fetch thread replies');\n      }\n    }\n  } catch (error) {\n    // Not a thread\n  }\n  \n  if (thread) {\n    // Detect schema type\n    const schemaAnalysis = detectSchemaType({ thread, pathname: `/category/${pathSegments.join('/')}` });\n    \n    // Fetch author data with graceful fallback\n    const apiUrl = getInternalApiUrl();\n    let author = null;\n    try {\n      const authorRes = await fetch(`${apiUrl}/api/users/${thread.authorId}`);\n      if (authorRes.ok) author = await authorRes.json();\n    } catch (e) {\n      // Fallback to anonymous author if fetch fails\n      console.warn('Author fetch failed, using anonymous author');\n    }\n    \n    // Always provide fallback author to prevent schema generation failure\n    if (!author) {\n      author = {\n        id: 'anonymous',\n        username: 'Anonymous',\n        profileImageUrl: null\n      };\n    }\n    \n    // Generate schema based on detected type with error handling\n    let schema = null;\n    const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com';\n    \n    try {\n      switch (schemaAnalysis.schemaType) {\n        case 'FAQPage':\n          // FAQ schema for Q&A threads\n          const faqQuestions = [{\n            question: thread.title,\n            answer: thread.body || 'See discussion for details',\n            id: thread.id\n          }];\n          // Add top replies as additional Q&A pairs\n          if (replies && replies.length > 0) {\n            replies.slice(0, 3).forEach((reply: any) => {\n              if (reply.body) {\n                faqQuestions.push({\n                  question: `Reply: ${thread.title}`,\n                  answer: reply.body,\n                  id: reply.id\n                });\n              }\n            });\n          }\n          schema = generateFAQPageSchema({\n            questions: faqQuestions,\n            baseUrl,\n            pageUrl: `/category/${pathSegments.join('/')}`\n          });\n          break;\n          \n        case 'NewsArticle':\n          // News article schema for recent news threads\n          schema = generateNewsArticleSchema({\n            headline: thread.title,\n            description: thread.body?.substring(0, 160),\n            content: thread.body || '',\n            author,\n            publishDate: new Date(thread.createdAt),\n            modifiedDate: thread.updatedAt ? new Date(thread.updatedAt) : undefined,\n            baseUrl,\n            url: `/category/${pathSegments.join('/')}`,\n            imageUrl: undefined,\n            location: undefined,\n            commentCount: replies?.length || 0,\n          });\n          break;\n          \n        case 'BlogPosting':\n          // Blog posting schema for tutorials/guides\n          schema = generateBlogPostingSchema({\n            title: thread.title,\n            description: thread.body?.substring(0, 160),\n            content: thread.body || '',\n            author,\n            publishDate: new Date(thread.createdAt),\n            modifiedDate: thread.updatedAt ? new Date(thread.updatedAt) : undefined,\n            baseUrl,\n            url: `/category/${pathSegments.join('/')}`,\n            imageUrl: undefined,\n            category: pathSegments[0],\n            commentCount: replies?.length || 0,\n          });\n          break;\n        \n        case 'VideoObject':\n          // Video object schema for threads with video links\n          // Extract video URL from thread body\n          const youtubeMatch = thread.body?.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([a-zA-Z0-9_-]+)/);\n          const videoId = youtubeMatch ? youtubeMatch[1] : null;\n          const embedUrl = videoId ? `https://www.youtube.com/embed/${videoId}` : undefined;\n          \n          schema = generateVideoObjectSchema({\n            title: thread.title,\n            description: thread.body?.substring(0, 160) || thread.title,\n            thumbnailUrl: videoId ? `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg` : `${baseUrl}/default-video-thumbnail.jpg`,\n            uploadDate: new Date(thread.createdAt),\n            videoUrl: undefined,\n            embedUrl,\n            durationSeconds: undefined,\n            viewCount: thread.viewCount || 0,\n            baseUrl,\n            author\n          });\n          break;\n          \n        case 'DiscussionForumPosting':\n        default:\n          // Standard forum discussion schema\n          schema = generateDiscussionForumPostingSchema({\n            thread,\n            author,\n            baseUrl,\n            viewCount: thread.viewCount || 0,\n            replyCount: replies?.length || 0,\n            upvoteCount: thread.upvoteCount || 0,\n            replies: replies?.slice(0, 10).map((r: any) => ({\n              id: r.id,\n              content: r.body,\n              author: r.author || { username: 'Anonymous' },\n              createdAt: new Date(r.createdAt),\n              upvotes: r.helpfulCount || 0\n            })) || []\n          });\n          break;\n      }\n    } catch (error) {\n      console.error('[Schema Error]', error);\n      // Omit schema entirely if generation fails\n      schema = null;\n    }\n    \n    // Render thread detail page with hierarchical breadcrumbs\n    const { default: ThreadDetailClient } = await loadThreadClient();\n    return (\n      <>\n        {schema && <SchemaScript schema={schema} />}\n        <ThreadDetailClient initialThread={thread} initialReplies={replies} />\n      </>\n    );\n  }\n  \n  // Try to find marketplace content\n  let content = null;\n  let author = null;\n  let reviews = [];\n  let similarContent = [];\n  let authorReleases = [];\n  \n  try {\n    const apiUrl = getInternalApiUrl();\n    const contentRes = await fetch(`${apiUrl}/api/content/slug/${lastSlug}`);\n    \n    if (contentRes.ok) {\n      content = await contentRes.json();\n      \n      // Fetch additional content data in parallel\n      const [authorRes, reviewsRes, similarRes, releasesRes] = await Promise.all([\n        fetch(`${apiUrl}/api/users/${content.authorId}`).catch(() => null),\n        fetch(`${apiUrl}/api/content/${content.id}/reviews`).catch(() => null),\n        fetch(`${apiUrl}/api/content/${content.id}/similar`).catch(() => null),\n        fetch(`${apiUrl}/api/users/${content.authorId}/content`).catch(() => null),\n      ]);\n      \n      if (authorRes && authorRes.ok) author = await authorRes.json();\n      if (reviewsRes && reviewsRes.ok) reviews = await reviewsRes.json();\n      if (similarRes && similarRes.ok) similarContent = await similarRes.json();\n      if (releasesRes && releasesRes.ok) authorReleases = await releasesRes.json();\n    }\n  } catch (error) {\n    // Not content either\n  }\n  \n  if (content) {\n    // Generate Product schema for marketplace items with error handling\n    let schema = null;\n    if (author) {\n      try {\n        const reviewCount = reviews?.length || 0;\n        schema = generateProductSchema({\n          product: content,\n          baseUrl: process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com',\n          author,\n          // Conditional: Only include averageRating when >= 5 reviews\n          averageRating: reviewCount >= 5 ? content.averageRating : undefined,\n          reviewCount: reviewCount,\n          reviews: reviews?.slice(0, 5).map((r: any) => ({\n            author: r.author || { username: 'Anonymous' },\n            rating: r.rating || 5,\n            comment: r.comment || '',\n            createdAt: new Date(r.createdAt)\n          })) || []\n        });\n      } catch (error) {\n        console.error('[Schema Error]', error);\n        // Omit schema entirely if generation fails\n        schema = null;\n      }\n    }\n    \n    // Render content detail page with all required data\n    const { default: ContentDetailClient } = await loadContentClient();\n    return (\n      <>\n        {schema && <SchemaScript schema={schema} />}\n        <ContentDetailClient \n          slug={lastSlug}\n          initialContent={content}\n          initialAuthor={author}\n          initialReviews={reviews}\n          initialSimilarContent={similarContent}\n          initialAuthorReleases={authorReleases}\n        />\n      </>\n    );\n  }\n  \n  // Must be a category browsing page\n  const fullPath = pathSegments.join('/');\n  const category = await getCategoryByPath(fullPath);\n  \n  if (!category) {\n    notFound();\n  }\n  \n  // Build breadcrumb path from category hierarchy\n  const breadcrumbPath: { name: string; url: string }[] = [\n    { name: 'Home', url: '/' },\n  ];\n  \n  // Walk up the category hierarchy to build breadcrumbs\n  const categorySegments = fullPath.split('/');\n  for (let i = 0; i < categorySegments.length; i++) {\n    const segmentPath = categorySegments.slice(0, i + 1).join('/');\n    const segmentSlug = categorySegments[i];\n    \n    // Fetch category name for this segment\n    const [segmentCategory] = await db\n      .select()\n      .from(forumCategories)\n      .where(eq(forumCategories.slug, segmentSlug))\n      .limit(1);\n    \n    if (segmentCategory) {\n      breadcrumbPath.push({\n        name: segmentCategory.name,\n        url: `/category/${segmentPath}`,\n      });\n    }\n  }\n  \n  // Fetch threads for this category\n  let threads = [];\n  try {\n    const apiUrl = getInternalApiUrl();\n    const threadsRes = await fetch(`${apiUrl}/api/categories/${category.slug}/threads`);\n    if (threadsRes.ok) {\n      threads = await threadsRes.json();\n    }\n  } catch (error) {\n    console.error('Error fetching category threads:', error);\n  }\n  \n  // Render category discussion page with breadcrumbs\n  const { default: CategoryDiscussionClient } = await loadCategoryClient();\n  return (\n    <>\n      <BreadcrumbSchema path={breadcrumbPath} />\n      <CategoryDiscussionClient \n        slug={category.slug} \n        initialCategory={category}\n        initialThreads={threads}\n      />\n    </>\n  );\n}\n","interface BreadcrumbItem {\n  name: string;\n  url: string;\n}\n\ninterface BreadcrumbSchemaProps {\n  path: BreadcrumbItem[];\n}\n\nexport default function BreadcrumbSchema({ path }: BreadcrumbSchemaProps) {\n  const breadcrumbList = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": path.map((item, index) => ({\n      \"@type\": \"ListItem\",\n      \"position\": index + 1,\n      \"name\": item.name,\n      \"item\": item.url\n    }))\n  };\n\n  return (\n    <script\n      type=\"application/ld+json\"\n      dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbList) }}\n    />\n  );\n}\n","/**\n * Automated Content Type Detection for Dynamic Schema Generation\n * \n * Analyzes content metadata, structure, and context to determine\n * the most appropriate Schema.org type for SEO optimization.\n */\n\nimport { ForumThread, Content, User } from '@shared/schema';\n\nexport type SchemaType = \n  | 'DiscussionForumPosting'\n  | 'Product'\n  | 'Article'\n  | 'BlogPosting'\n  | 'NewsArticle'\n  | 'FAQPage'\n  | 'VideoObject'\n  | 'Person'\n  | 'Organization'\n  | 'WebSite';\n\nexport interface ContentAnalysis {\n  schemaType: SchemaType;\n  confidence: number; // 0-1 score\n  reasons: string[]; // Why this type was selected\n}\n\n/**\n * Detect appropriate schema type for forum threads\n */\nexport function detectThreadSchemaType(thread: ForumThread, category?: { slug: string; name: string }): ContentAnalysis {\n  const reasons: string[] = [];\n  \n  // Check if it's a FAQ-style thread (question in title)\n  if (thread.title.toLowerCase().match(/\\?(.*)?$/)) {\n    reasons.push('Title contains question mark - FAQ pattern detected');\n    return { schemaType: 'FAQPage', confidence: 0.8, reasons };\n  }\n  \n  // Check if it's a news article (time-sensitive, recent)\n  const publishedDate = new Date(thread.createdAt);\n  const daysSincePublished = (Date.now() - publishedDate.getTime()) / (1000 * 60 * 60 * 24);\n  \n  if (daysSincePublished <= 2 && (\n    thread.title.toLowerCase().includes('breaking') ||\n    thread.title.toLowerCase().includes('news') ||\n    thread.title.toLowerCase().includes('announcement')\n  )) {\n    reasons.push('Recent publication (< 2 days) with news keywords');\n    return { schemaType: 'NewsArticle', confidence: 0.9, reasons };\n  }\n  \n  // Check if it's a blog-style post (long-form, editorial)\n  if (category?.slug.includes('blog') || category?.slug.includes('editorial') || \n      thread.title.toLowerCase().includes('guide') || \n      thread.title.toLowerCase().includes('tutorial')) {\n    reasons.push('Category or title indicates blog/editorial content');\n    return { schemaType: 'BlogPosting', confidence: 0.85, reasons };\n  }\n  \n  // Check if it contains video (check in body content)\n  if (thread.body?.toLowerCase().includes('youtube.com') || \n      thread.body?.toLowerCase().includes('vimeo.com') ||\n      thread.body?.toLowerCase().includes('video')) {\n    reasons.push('Content contains video links');\n    return { schemaType: 'VideoObject', confidence: 0.75, reasons };\n  }\n  \n  // Default: Forum discussion\n  reasons.push('Standard forum discussion with replies');\n  return { schemaType: 'DiscussionForumPosting', confidence: 1.0, reasons };\n}\n\n/**\n * Detect appropriate schema type for marketplace content\n */\nexport function detectContentSchemaType(content: Content, category?: { slug: string; name: string }): ContentAnalysis {\n  const reasons: string[] = [];\n  \n  // Marketplace items (EAs, Indicators, source code with pricing)\n  if (content.type === 'ea' || content.type === 'indicator' || content.type === 'source_code' || \n      !content.isFree || (content.priceCoins !== undefined && content.priceCoins > 0)) {\n    reasons.push(`Content type: ${content.type}, has pricing`);\n    return { schemaType: 'Product', confidence: 1.0, reasons };\n  }\n  \n  // Educational content (articles can be tutorials/guides)\n  if (content.type === 'article' && (\n      category?.slug.includes('tutorial') || \n      category?.slug.includes('guide') ||\n      content.title?.toLowerCase().includes('tutorial') ||\n      content.title?.toLowerCase().includes('guide'))) {\n    reasons.push('Educational content type detected');\n    return { schemaType: 'BlogPosting', confidence: 0.9, reasons };\n  }\n  \n  // Video content (check description for video links)\n  if (content.description?.toLowerCase().includes('youtube.com') || \n      content.description?.toLowerCase().includes('vimeo.com') ||\n      content.description?.toLowerCase().includes('video')) {\n    reasons.push('Content has video URL or video type');\n    return { schemaType: 'VideoObject', confidence: 1.0, reasons };\n  }\n  \n  // Default: Article\n  reasons.push('General article content');\n  return { schemaType: 'Article', confidence: 0.8, reasons };\n}\n\n/**\n * Detect schema type for any page based on URL pattern\n */\nexport function detectPageSchemaType(pathname: string): ContentAnalysis {\n  const reasons: string[] = [];\n  \n  // User profiles\n  if (pathname.match(/^\\/user\\/[^/]+$/)) {\n    reasons.push('User profile page pattern');\n    return { schemaType: 'Person', confidence: 1.0, reasons };\n  }\n  \n  // Homepage\n  if (pathname === '/' || pathname === '/home') {\n    reasons.push('Homepage');\n    return { schemaType: 'WebSite', confidence: 1.0, reasons };\n  }\n  \n  // Thread pages\n  if (pathname.includes('/thread/') || pathname.match(/\\/category\\/.*\\/[^/]+$/)) {\n    reasons.push('Thread page pattern');\n    return { schemaType: 'DiscussionForumPosting', confidence: 0.9, reasons };\n  }\n  \n  // Marketplace\n  if (pathname.includes('/marketplace') || pathname.includes('/content/')) {\n    reasons.push('Marketplace/content page pattern');\n    return { schemaType: 'Product', confidence: 0.85, reasons };\n  }\n  \n  // FAQ pages\n  if (pathname.includes('/faq') || pathname.includes('/help')) {\n    reasons.push('FAQ/help page pattern');\n    return { schemaType: 'FAQPage', confidence: 0.9, reasons };\n  }\n  \n  // Default\n  reasons.push('Generic page');\n  return { schemaType: 'Article', confidence: 0.5, reasons };\n}\n\n/**\n * Main detection function - analyzes all available data\n */\nexport function detectSchemaType(params: {\n  thread?: ForumThread;\n  content?: Content;\n  user?: User;\n  pathname?: string;\n  category?: { slug: string; name: string };\n}): ContentAnalysis {\n  const { thread, content, user, pathname, category } = params;\n  \n  // Priority 1: User profile\n  if (user && pathname?.includes('/user/')) {\n    return { \n      schemaType: 'Person', \n      confidence: 1.0, \n      reasons: ['User profile page with user data'] \n    };\n  }\n  \n  // Priority 2: Marketplace content\n  if (content) {\n    return detectContentSchemaType(content, category);\n  }\n  \n  // Priority 3: Forum thread\n  if (thread) {\n    return detectThreadSchemaType(thread, category);\n  }\n  \n  // Priority 4: URL-based detection\n  if (pathname) {\n    return detectPageSchemaType(pathname);\n  }\n  \n  // Fallback\n  return { \n    schemaType: 'Article', \n    confidence: 0.3, \n    reasons: ['Insufficient data for accurate detection'] \n  };\n}\n\n/**\n * Helper: Check if content should use Product schema\n */\nexport function isProductContent(content: Content): boolean {\n  return content.type === 'ea' || \n         content.type === 'indicator' || \n         content.type === 'source_code' ||\n         !content.isFree ||\n         (content.priceCoins !== undefined && content.priceCoins > 0);\n}\n\n/**\n * Helper: Check if thread should use FAQ schema\n */\nexport function isFAQThread(thread: ForumThread): boolean {\n  return thread.title.toLowerCase().match(/\\?(.*)?$/) !== null;\n}\n\n/**\n * Helper: Check if content is news-worthy (< 2 days old)\n */\nexport function isNewsContent(publishDate: Date): boolean {\n  const daysSince = (Date.now() - publishDate.getTime()) / (1000 * 60 * 60 * 24);\n  return daysSince <= 2;\n}\n","import { drizzle } from 'drizzle-orm/neon-serverless';\nimport { Pool } from '@neondatabase/serverless';\nimport * as schema from '../shared/schema';\nimport * as relations from '../shared/relations';\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL environment variable is not set');\n}\n\n// Create connection pool\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\n// Create Drizzle instance with schema and relations\nexport const db = drizzle(pool, { schema: { ...schema, ...relations } });\n\n// Helper function to get global stats (for homepage)\nexport async function getGlobalStats() {\n  const { count } = await import('drizzle-orm');\n  const { forumThreads, users, forumReplies, content } = schema;\n\n  const [threadCount, userCount, replyCount, contentCount] = await Promise.all([\n    db.select({ count: count() }).from(forumThreads),\n    db.select({ count: count() }).from(users),\n    db.select({ count: count() }).from(forumReplies),\n    db.select({ count: count() }).from(content),\n  ]);\n\n  return {\n    totalThreads: threadCount[0].count,\n    totalMembers: userCount[0].count,\n    totalPosts: replyCount[0].count,\n    totalContent: contentCount[0].count,\n    weeklyActivity: 0, // TODO: Calculate from database\n  };\n}\n","// Drizzle Relations for Relational Query API\n// This file defines relationships between tables for use with db.query API\n\nimport { relations } from 'drizzle-orm';\nimport {\n  users,\n  forumThreads,\n  forumReplies,\n  content,\n  contentReviews,\n  brokers,\n  brokerReviews,\n  contentPurchases,\n} from './schema';\n\n// Users Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  threads: many(forumThreads),\n  replies: many(forumReplies),\n  content: many(content),\n  reviews: many(contentReviews),\n  brokerReviews: many(brokerReviews),\n  purchases: many(contentPurchases, { relationName: 'buyer' }),\n  sales: many(contentPurchases, { relationName: 'seller' }),\n}));\n\n// Forum Threads Relations\nexport const forumThreadsRelations = relations(forumThreads, ({ one, many }) => ({\n  author: one(users, {\n    fields: [forumThreads.authorId],\n    references: [users.id],\n  }),\n  replies: many(forumReplies),\n}));\n\n// Forum Replies Relations\nexport const forumRepliesRelations = relations(forumReplies, ({ one }) => ({\n  thread: one(forumThreads, {\n    fields: [forumReplies.threadId],\n    references: [forumThreads.id],\n  }),\n  author: one(users, {\n    fields: [forumReplies.userId],\n    references: [users.id],\n  }),\n}));\n\n// Content Relations\nexport const contentRelations = relations(content, ({ one, many }) => ({\n  author: one(users, {\n    fields: [content.authorId],\n    references: [users.id],\n  }),\n  reviews: many(contentReviews),\n  purchases: many(contentPurchases),\n}));\n\n// Content Reviews Relations\nexport const contentReviewsRelations = relations(contentReviews, ({ one }) => ({\n  content: one(content, {\n    fields: [contentReviews.contentId],\n    references: [content.id],\n  }),\n  author: one(users, {\n    fields: [contentReviews.userId],\n    references: [users.id],\n  }),\n}));\n\n// Broker Relations\nexport const brokersRelations = relations(brokers, ({ many }) => ({\n  reviews: many(brokerReviews),\n}));\n\n// Broker Reviews Relations\nexport const brokerReviewsRelations = relations(brokerReviews, ({ one }) => ({\n  broker: one(brokers, {\n    fields: [brokerReviews.brokerId],\n    references: [brokers.id],\n  }),\n  author: one(users, {\n    fields: [brokerReviews.userId],\n    references: [users.id],\n  }),\n}));\n\n// Content Purchases Relations\nexport const contentPurchasesRelations = relations(contentPurchases, ({ one }) => ({\n  content: one(content, {\n    fields: [contentPurchases.contentId],\n    references: [content.id],\n  }),\n  buyer: one(users, {\n    fields: [contentPurchases.buyerId],\n    references: [users.id],\n    relationName: 'buyer',\n  }),\n  seller: one(users, {\n    fields: [contentPurchases.sellerId],\n    references: [users.id],\n    relationName: 'seller',\n  }),\n}));\n"],"names":[],"mappings":"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"}