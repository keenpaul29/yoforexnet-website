{"version":3,"sources":["turbopack:///[project]/app/lib/api-config.ts","turbopack:///[project]/app/marketplace/MarketplaceClient.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/app/marketplace/page.tsx"],"sourcesContent":["/**\n * Centralized API Configuration\n * \n * This module provides runtime URL resolution for API calls across the application.\n * It eliminates hardcoded localhost URLs and uses environment variables for flexibility.\n * \n * Architecture:\n * - Development: Next.js (3000) + Express (3001)\n * - Production VPS: NGINX proxy (80/443) ‚Üí Next.js (3000) + Express (3001)\n * - Production Replit: Single Next.js server (5000) with API routes\n */\n\n/**\n * Environment variable validation\n * Ensures required configuration is present at runtime\n * \n * PRODUCTION SAFETY: Throws errors for missing critical variables\n * DEVELOPMENT: Allows fallbacks with warnings\n */\nfunction validateEnv() {\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  if (typeof window === 'undefined') {\n    // Server-side: require EXPRESS_URL in production\n    if (!process.env.EXPRESS_URL) {\n      if (isProduction) {\n        throw new Error(\n          'üö® CRITICAL: EXPRESS_URL environment variable is required in production.\\n' +\n          'Please set it in your .env.production file.\\n' +\n          'Example: EXPRESS_URL=http://127.0.0.1:3001\\n' +\n          'For VPS deployment, see: VPS_DEPLOYMENT_GUIDE.md'\n        );\n      } else {\n        console.warn(\n          '‚ö†Ô∏è  EXPRESS_URL not set, using development fallback: http://127.0.0.1:3001'\n        );\n      }\n    }\n  }\n\n  // NEXT_PUBLIC_SITE_URL is required in production for SEO, OG tags, canonical URLs\n  if (!process.env.NEXT_PUBLIC_SITE_URL) {\n    if (isProduction) {\n      throw new Error(\n        'üö® CRITICAL: NEXT_PUBLIC_SITE_URL environment variable is required in production.\\n' +\n        'Please set it in your .env.production file.\\n' +\n        'Example: NEXT_PUBLIC_SITE_URL=https://yourdomain.com\\n' +\n        'This is used for SEO metadata, Open Graph tags, and canonical URLs.'\n      );\n    } else {\n      console.warn(\n        '‚ö†Ô∏è  NEXT_PUBLIC_SITE_URL not set, using development fallback: http://localhost:3000'\n      );\n    }\n  }\n}\n\n// Run validation on module load\nvalidateEnv();\n\n/**\n * Get the API base URL for client-side requests\n * \n * @returns API base URL accessible from the browser\n * \n * Client-side behavior:\n * - Always returns empty string '' (uses relative URLs)\n * - Next.js rewrites handle /api/* ‚Üí Express server routing\n * - No need for absolute URLs on client-side\n * \n * Server-side behavior:\n * - Returns internal API URL (e.g., http://127.0.0.1:3001)\n * - Used for server-to-server communication\n * \n * Usage in client components:\n * ```typescript\n * const apiUrl = getApiBaseUrl();\n * fetch(`${apiUrl}/api/stats`);  // Becomes: fetch('/api/stats')\n * ```\n */\nexport function getApiBaseUrl(): string {\n  // Client-side: use relative URLs (NGINX/Next.js rewrites handle routing)\n  if (typeof window !== 'undefined') {\n    return '';\n  }\n\n  // Server-side: Use getInternalApiUrl which has production safety checks\n  return getInternalApiUrl();\n}\n\n/**\n * Get the internal API URL for server-side requests\n * \n * @returns Internal API URL for server-to-server communication\n * \n * Usage in server components:\n * ```typescript\n * const apiUrl = getInternalApiUrl();\n * const response = await fetch(`${apiUrl}/api/stats`);\n * ```\n */\nexport function getInternalApiUrl(): string {\n  // Server-side only\n  if (typeof window !== 'undefined') {\n    throw new Error('getInternalApiUrl() can only be called server-side');\n  }\n\n  const isProduction = process.env.NODE_ENV === 'production';\n  const url = process.env.EXPRESS_URL;\n  \n  if (!url) {\n    if (isProduction) {\n      throw new Error(\n        'EXPRESS_URL must be set in production. ' +\n        'This is a critical configuration error that will prevent server-side API calls from working.'\n      );\n    }\n    // Development fallback only\n    const fallback = 'http://127.0.0.1:3001';\n    console.log(`[API Config] Using development fallback: ${fallback}`);\n    return fallback;\n  }\n  \n  console.log(`[API Config] Internal API URL: ${url}`);\n  return url;\n}\n\n/**\n * Get the public site URL\n * \n * @returns Public-facing site URL (for SEO, OG tags, etc.)\n * \n * Usage:\n * ```typescript\n * const siteUrl = getSiteUrl();\n * const canonical = `${siteUrl}/thread/${slug}`;\n * ```\n */\nexport function getSiteUrl(): string {\n  const isProduction = process.env.NODE_ENV === 'production';\n  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || process.env.VERCEL_URL;\n  \n  if (!siteUrl) {\n    if (isProduction) {\n      throw new Error(\n        'NEXT_PUBLIC_SITE_URL must be set in production. ' +\n        'This is required for SEO, canonical URLs, and Open Graph tags.'\n      );\n    }\n    // Development fallback\n    return 'http://localhost:3000';\n  }\n  \n  return siteUrl;\n}\n\n/**\n * Build a full API URL with path\n * \n * @param path - API endpoint path (e.g., '/api/stats')\n * @returns Full API URL\n * \n * Usage:\n * ```typescript\n * const url = buildApiUrl('/api/stats');\n * const response = await fetch(url);\n * ```\n */\nexport function buildApiUrl(path: string): string {\n  const base = getApiBaseUrl();\n  const cleanPath = path.startsWith('/') ? path : `/${path}`;\n  return base ? `${base}${cleanPath}` : cleanPath;\n}\n\n/**\n * Configuration object for easy access\n */\nexport const apiConfig = {\n  /**\n   * API base URL (client or server appropriate)\n   */\n  baseUrl: getApiBaseUrl(),\n\n  /**\n   * Public site URL\n   */\n  siteUrl: getSiteUrl(),\n\n  /**\n   * Whether we're in production mode\n   */\n  isProduction: process.env.NODE_ENV === 'production',\n\n  /**\n   * Whether we're in development mode\n   */\n  isDevelopment: process.env.NODE_ENV === 'development',\n\n  /**\n   * Express API URL (server-side only)\n   */\n  get expressUrl(): string {\n    if (typeof window !== 'undefined') {\n      throw new Error('expressUrl is only available server-side');\n    }\n    return getInternalApiUrl();\n  },\n} as const;\n\n/**\n * Type-safe environment variable access\n * \n * Note: NEXT_PUBLIC_EXPRESS_URL is not included as client-side code\n * uses relative URLs (/api/*) which are handled by Next.js rewrites.\n */\nexport const env = {\n  // Server-side only\n  EXPRESS_URL: process.env.EXPRESS_URL,\n  DATABASE_URL: process.env.DATABASE_URL,\n  SESSION_SECRET: process.env.SESSION_SECRET,\n\n  // Public (client-accessible)\n  NEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL,\n\n  // Node environment\n  NODE_ENV: process.env.NODE_ENV,\n} as const;\n\n// Export helper for debugging\nexport function debugConfig() {\n  if (typeof window === 'undefined') {\n    console.log('üîß API Configuration (Server-side):');\n    console.log('  - Express URL:', env.EXPRESS_URL || 'NOT SET (using fallback)');\n    console.log('  - Site URL:', getSiteUrl());\n    console.log('  - API Base:', getApiBaseUrl());\n  } else {\n    console.log('üîß API Configuration (Client-side):');\n    console.log('  - Site URL:', env.NEXT_PUBLIC_SITE_URL || 'NOT SET');\n    console.log('  - API Base:', getApiBaseUrl());\n  }\n}\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/marketplace/MarketplaceClient.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/marketplace/MarketplaceClient.tsx\",\n    \"default\",\n);\n","import type { Metadata } from 'next';\nimport MarketplaceClient from './MarketplaceClient';\nimport { getInternalApiUrl } from '../lib/api-config';\n\n// Enable ISR with 60-second revalidation\nexport const revalidate = 60;\n\n// Generate SEO metadata\nexport const metadata: Metadata = {\n  title: 'EA & Indicator Marketplace | YoForex',\n  description: 'Browse and download expert advisors (EAs) and indicators for MT4/MT5. Find free and premium trading tools from expert developers.',\n  keywords: ['forex EA', 'MT4 indicators', 'MT5 expert advisor', 'trading tools', 'forex marketplace'],\n  openGraph: {\n    title: 'EA & Indicator Marketplace | YoForex',\n    description: 'Browse and download expert advisors (EAs) and indicators for MT4/MT5. Find free and premium trading tools from expert developers.',\n    type: 'website',\n  },\n  twitter: {\n    card: 'summary_large_image',\n    title: 'EA & Indicator Marketplace | YoForex',\n    description: 'Browse and download expert advisors (EAs) and indicators for MT4/MT5. Find free and premium trading tools from expert developers.',\n  },\n};\n\n// Fetch marketplace content from Express API\nasync function getMarketplaceContent() {\n  try {\n    // Use centralized API config for SSR\n    const apiUrl = getInternalApiUrl();\n    const res = await fetch(`${apiUrl}/api/content?status=approved`, {\n      next: { revalidate: 60 },\n    });\n    \n    if (!res.ok) {\n      console.error('Failed to fetch marketplace content:', res.status, res.statusText);\n      return [];\n    }\n    \n    return await res.json();\n  } catch (error) {\n    console.error('Error fetching marketplace content:', error);\n    return [];\n  }\n}\n\nexport default async function MarketplacePage() {\n  const initialContent = await getMarketplaceContent();\n\n  return <MarketplaceClient initialContent={initialContent} />;\n}\n"],"names":[],"mappings":"qUAqGO,SAAS,IAOd,IAAM,EAAA,wBAgBN,OADA,QAAQ,GAAG,CAAC,CAAC,+BAA+B,EAAE,EAAA,CAAK,EAC5C,CACT,CAtCS,IAmIO,QAAQ,GAAG,CAAC,YAAY,CACtB,QAAQ,GAAG,CAAC,cAAc,gECzN7B,CAAA,EADf,AACe,EADf,CAAA,CAAA,OACe,uBAAA,AAAuB,EAClC,WAAa,MAAM,AAAI,MAAM,uSAAyS,EACtU,sEACA,8DAHW,CAAA,EAAA,AADf,EAAA,CAAA,CAAA,OACe,uBAAA,AAAuB,EAClC,WAAa,MAAM,AAAI,MAAM,mRAAqR,EAClT,kDACA,mICJJ,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OAuBA,eAAe,IACb,GAAI,CAEF,IAAM,EAAS,CAAA,EAAA,EAAA,iBAAA,AAAiB,IAC1B,EAAM,MAAM,MAAM,CAAA,EAAG,EAAO,4BAA4B,CAAC,CAAE,CAC/D,KAAM,CAAE,WAAY,EAAG,CACzB,GAEA,GAAI,CAAC,EAAI,EAAE,CAET,CAFW,MACX,QAAQ,KAAK,CAAC,uCAAwC,EAAI,MAAM,CAAE,EAAI,UAAU,EACzE,EAAE,CAGX,OAAO,MAAM,EAAI,IAAI,EACvB,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,sCAAuC,GAC9C,EAAE,AACX,CACF,CAEe,eAAe,IAC5B,IAAM,EAAiB,MAAM,IAE7B,MAAO,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAiB,CAAA,CAAC,eAAgB,GAC5C,mCAzCkC,CAChC,MAAO,uCACP,YAAa,oIACb,SAAU,CAAC,WAAY,iBAAkB,qBAAsB,gBAAiB,oBAAoB,CACpG,UAAW,CACT,MAAO,uCACP,YAAa,oIACb,KAAM,SACR,EACA,QAAS,CACP,KAAM,sBACN,MAAO,uCACP,YAAa,mIACf,CACF,iBAjB0B","ignoreList":[1]}