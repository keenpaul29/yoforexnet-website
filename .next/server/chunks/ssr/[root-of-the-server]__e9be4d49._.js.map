{"version":3,"sources":["turbopack:///[project]/app/recharge/RechargeClient.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/app/recharge/page.tsx","turbopack:///[project]/shared/coinUtils.ts"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/recharge/RechargeClient.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/recharge/RechargeClient.tsx\",\n    \"default\",\n);\n","import { Metadata } from \"next\";\nimport { redirect } from \"next/navigation\";\nimport { cookies } from \"next/headers\";\nimport RechargeClient from \"./RechargeClient\";\nimport { RECHARGE_PACKAGES } from \"../../shared/coinUtils\";\n\nexport const metadata: Metadata = {\n  title: \"Recharge Coins | YoForex\",\n  description: \"Purchase gold coins to unlock premium content, support creators, and access exclusive features on YoForex.\",\n  keywords: \"recharge, buy coins, gold coins, premium content, stripe payment, cryptocurrency, USDT, trading platform\",\n  openGraph: {\n    title: \"Recharge Coins | YoForex\",\n    description: \"Purchase gold coins to unlock premium content, support creators, and access exclusive features on YoForex.\",\n    type: \"website\",\n    siteName: \"YoForex\",\n  },\n  twitter: {\n    card: \"summary_large_image\",\n    title: \"Recharge Coins | YoForex\",\n    description: \"Purchase gold coins to unlock premium content, support creators, and access exclusive features on YoForex.\",\n  },\n};\n\nasync function getUser() {\n  const EXPRESS_URL = process.env.NEXT_PUBLIC_EXPRESS_URL || 'http://localhost:5000';\n  const cookieStore = await cookies();\n  const cookieHeader = cookieStore.getAll()\n    .map(cookie => `${cookie.name}=${cookie.value}`)\n    .join('; ');\n\n  try {\n    const res = await fetch(`${EXPRESS_URL}/api/me`, {\n      headers: {\n        Cookie: cookieHeader,\n      },\n      credentials: 'include',\n      cache: 'no-store',\n    });\n\n    if (res.status === 401) {\n      return null;\n    }\n\n    if (!res.ok) {\n      throw new Error('Failed to fetch user');\n    }\n\n    return await res.json();\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    return null;\n  }\n}\n\nexport default async function RechargePage() {\n  const user = await getUser();\n\n  if (!user) {\n    redirect('/');\n  }\n\n  return <RechargeClient initialPackages={RECHARGE_PACKAGES} />;\n}\n","// Coin System Utilities\n// Exchange Rate: 100 coins = $5.50 USD (each coin = $0.055)\n\nexport const COIN_TO_USD_RATE = 0.055; // $0.055 per coin\nexport const USD_TO_COIN_RATE = 100 / 5.5; // ~18.18 coins per dollar\n\n// Recharge Packages - NEW PRICING\nexport interface CoinPackage {\n  id: string;\n  name: string;\n  baseCoins: number;\n  bonusCoins: number;\n  totalCoins: number;\n  priceUSD: number;\n  popular?: boolean;\n  bestValue?: boolean;\n  savingsPercent: number;\n}\n\nexport const RECHARGE_PACKAGES: CoinPackage[] = [\n  {\n    id: 'mini',\n    name: 'Mini',\n    baseCoins: 100,\n    bonusCoins: 10,\n    totalCoins: 110,\n    priceUSD: 5.50,\n    savingsPercent: 10\n  },\n  {\n    id: 'starter',\n    name: 'Starter',\n    baseCoins: 300,\n    bonusCoins: 40,\n    totalCoins: 340,\n    priceUSD: 16.50,\n    savingsPercent: 13\n  },\n  {\n    id: 'basic',\n    name: 'Basic',\n    baseCoins: 500,\n    bonusCoins: 75,\n    totalCoins: 575,\n    priceUSD: 27.50,\n    savingsPercent: 15\n  },\n  {\n    id: 'popular',\n    name: 'Popular',\n    baseCoins: 1000,\n    bonusCoins: 200,\n    totalCoins: 1200,\n    priceUSD: 55.00,\n    popular: true,\n    savingsPercent: 20\n  },\n  {\n    id: 'pro',\n    name: 'Pro',\n    baseCoins: 2000,\n    bonusCoins: 450,\n    totalCoins: 2450,\n    priceUSD: 110.00,\n    savingsPercent: 23\n  },\n  {\n    id: 'business',\n    name: 'Business',\n    baseCoins: 5000,\n    bonusCoins: 1250,\n    totalCoins: 6250,\n    priceUSD: 275.00,\n    savingsPercent: 25\n  },\n  {\n    id: 'enterprise',\n    name: 'Enterprise',\n    baseCoins: 10000,\n    bonusCoins: 3000,\n    totalCoins: 13000,\n    priceUSD: 550.00,\n    bestValue: true,\n    savingsPercent: 30\n  }\n];\n\n// Earning Rewards - NEW REDUCED AMOUNTS\nexport const EARNING_REWARDS = {\n  // Publishing Bonuses (one-time)\n  PUBLISH_EA_INDICATOR: 10,\n  PUBLISH_SET_FILE: 5,\n  PUBLISH_ARTICLE: 10,\n  \n  // Quality Bonuses\n  EA_QUALITY_BONUS: 25, // 10+ sales AND 4+ star rating\n  ARTICLE_FEATURED: 50,\n  \n  // Community Help\n  REPLY: 1, // per reply, max 20/day\n  BEST_ANSWER: 10,\n  \n  // Backtest Reports\n  BACKTEST_BASIC: 10,\n  BACKTEST_QUALITY: 10, // 12+ months data\n  BACKTEST_FEATURED: 25,\n  \n  // Violation Reports\n  SPAM_REPORT: 5,\n  SCAM_REPORT: 25,\n  MALICIOUS_EA: 50,\n  FALSE_REPORT_PENALTY: -10,\n  \n  // Daily Activity\n  DAILY_LOGIN: 2,\n  DAILY_CHECKIN: 1,\n  WEEKLY_STREAK: 10, // every 7 days\n  MONTHLY_PERFECT: 50, // all 30 days\n  \n  // Referral Rewards\n  REFERRAL_SIGNUP: 10,\n  REFERRAL_FIRST_POST: 10,\n  REFERRAL_FIRST_PURCHASE_PERCENT: 0.05, // 5% of purchase, max 50 coins\n  REFERRAL_LIFETIME_COMMISSION: 0.03, // 3% of all content sales\n};\n\n// Daily Limits\nexport const DAILY_LIMITS = {\n  MAX_REPLIES: 20,\n  MAX_REPORTS: 5,\n  MAX_BACKTESTS: 3,\n};\n\n// Commission Splits\nexport const COMMISSION_RATES = {\n  EA_INDICATOR: {\n    seller: 0.80,\n    platform: 0.20\n  },\n  SET_FILE: {\n    seller: 0.75,\n    platform: 0.25\n  },\n  ARTICLE: {\n    seller: 0.80,\n    platform: 0.20\n  },\n  SOURCE_CODE: {\n    seller: 0.80,\n    platform: 0.20\n  }\n};\n\n// Withdrawal Settings\nexport const WITHDRAWAL_CONFIG = {\n  MIN_AMOUNT: 1000, // coins\n  FEE_PERCENT: 0.05, // 5%\n  SUPPORTED_CRYPTO: ['BTC', 'ETH', 'USDT'] as const,\n};\n\n// Minimum Content Prices\nexport const MIN_CONTENT_PRICES = {\n  ea: 20,\n  indicator: 10,\n  set_file: 5,\n  article: 10,\n  source_code: 50,\n};\n\n/**\n * Convert coins to USD\n */\nexport function coinsToUSD(coins: number): number {\n  return parseFloat((coins * COIN_TO_USD_RATE).toFixed(2));\n}\n\n/**\n * Convert USD to coins\n */\nexport function usdToCoins(usd: number): number {\n  return Math.floor(usd * USD_TO_COIN_RATE);\n}\n\n/**\n * Format coin amount with USD equivalent\n * Example: \"500 coins ($27.50 USD)\"\n */\nexport function formatCoinPrice(coins: number): string {\n  const usd = coinsToUSD(coins);\n  return `${coins.toLocaleString()} coins ($${usd.toFixed(2)} USD)`;\n}\n\n/**\n * Calculate commission split for content sale\n */\nexport function calculateCommission(\n  priceCoins: number,\n  contentType: keyof typeof MIN_CONTENT_PRICES\n): {\n  sellerAmount: number;\n  platformAmount: number;\n} {\n  const rateKey = contentType === 'set_file' ? 'SET_FILE' \n    : contentType === 'source_code' ? 'SOURCE_CODE'\n    : contentType === 'article' ? 'ARTICLE'\n    : 'EA_INDICATOR';\n  \n  const rates = COMMISSION_RATES[rateKey];\n  const sellerAmount = Math.floor(priceCoins * rates.seller);\n  const platformAmount = priceCoins - sellerAmount;\n  \n  return { sellerAmount, platformAmount };\n}\n\n/**\n * Calculate withdrawal amount after fee\n */\nexport function calculateWithdrawal(amount: number): {\n  grossAmount: number;\n  fee: number;\n  netAmount: number;\n  netUSD: number;\n} {\n  const fee = Math.floor(amount * WITHDRAWAL_CONFIG.FEE_PERCENT);\n  const netAmount = amount - fee;\n  const netUSD = coinsToUSD(netAmount);\n  \n  return {\n    grossAmount: amount,\n    fee,\n    netAmount,\n    netUSD,\n  };\n}\n\n/**\n * Calculate referral commission\n */\nexport function calculateReferralCommission(\n  amount: number,\n  type: 'purchase' | 'sale'\n): number {\n  if (type === 'purchase') {\n    // 5% of purchase, max 50 coins\n    return Math.min(Math.floor(amount * EARNING_REWARDS.REFERRAL_FIRST_PURCHASE_PERCENT), 50);\n  } else {\n    // 3% of sale\n    return Math.floor(amount * EARNING_REWARDS.REFERRAL_LIFETIME_COMMISSION);\n  }\n}\n\n/**\n * Get minimum price for content type\n */\nexport function getMinPrice(contentType: string): number {\n  return MIN_CONTENT_PRICES[contentType as keyof typeof MIN_CONTENT_PRICES] || 0;\n}\n\n/**\n * Validate if price meets minimum requirement\n */\nexport function validateContentPrice(contentType: string, price: number): boolean {\n  const minPrice = getMinPrice(contentType);\n  return price >= minPrice;\n}\n\n/**\n * Calculate monthly earning potential\n */\nexport function calculateMonthlyPotential(activityLevel: 'passive' | 'moderate' | 'active' | 'creator'): {\n  coinsPerMonth: number;\n  usdValue: number;\n  breakdown: Record<string, number>;\n} {\n  const breakdown: Record<string, number> = {};\n  \n  switch (activityLevel) {\n    case 'passive':\n      // Daily login only\n      breakdown['Daily Login'] = 60; // 2 × 30\n      breakdown['Check-in'] = 30; // 1 × 30\n      breakdown['Weekly Streaks'] = 40; // 10 × 4\n      breakdown['Monthly Bonus'] = 50;\n      break;\n    \n    case 'moderate':\n      // Login + 10 replies daily\n      breakdown['Daily Login'] = 60;\n      breakdown['Check-in'] = 30;\n      breakdown['Replies'] = 300; // 10 × 30\n      breakdown['Weekly Streaks'] = 40;\n      breakdown['Monthly Bonus'] = 50;\n      break;\n    \n    case 'active':\n      // Full participation\n      breakdown['Daily Login'] = 60;\n      breakdown['Check-in'] = 30;\n      breakdown['Replies'] = 600; // 20 × 30\n      breakdown['Best Answers'] = 100; // ~3-4 per month\n      breakdown['Reports'] = 150; // ~5 per month\n      breakdown['Weekly Streaks'] = 40;\n      breakdown['Monthly Bonus'] = 50;\n      break;\n    \n    case 'creator':\n      // Content creator\n      breakdown['Daily Login'] = 60;\n      breakdown['Check-in'] = 30;\n      breakdown['Content Sales'] = 1000; // Varies widely\n      breakdown['Weekly Streaks'] = 40;\n      breakdown['Monthly Bonus'] = 50;\n      break;\n  }\n  \n  const coinsPerMonth = Object.values(breakdown).reduce((sum, val) => sum + val, 0);\n  const usdValue = coinsToUSD(coinsPerMonth);\n  \n  return { coinsPerMonth, usdValue, breakdown };\n}\n"],"names":[],"mappings":"oVAEe,CAAA,EAAA,AADf,EAAA,CAAA,CAAA,QACe,uBAAA,AAAuB,EAClC,WAAa,MAAM,AAAI,MAAM,iSAAmS,EAChU,gEACA,+DAHW,CAAA,EAAA,AADf,EAAA,CAAA,CAAA,QACe,uBAAA,AAAuB,EAClC,WAAa,MAAM,AAAI,MAAM,6QAA+Q,EAC5S,4CACA,yICJJ,EAAA,CAAA,CAAA,QAAA,IAAA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QCgBO,IAAM,EAAmC,CAC9C,CACE,GAAI,OACJ,KAAM,OACN,UAAW,IACX,WAAY,GACZ,WAAY,IACZ,SAAU,IACV,eAAgB,EAClB,EACA,CACE,GAAI,UACJ,KAAM,UACN,UAAW,IACX,WAAY,GACZ,WAAY,IACZ,SAAU,KACV,eAAgB,EAClB,EACA,CACE,GAAI,QACJ,KAAM,QACN,UAAW,IACX,WAAY,GACZ,WAAY,IACZ,SAAU,KACV,eAAgB,EAClB,EACA,CACE,GAAI,UACJ,KAAM,UACN,UAAW,IACX,WAAY,IACZ,WAAY,KACZ,SAAU,GACV,SAAS,EACT,eAAgB,EAClB,EACA,CACE,GAAI,MACJ,KAAM,MACN,UAAW,IACX,WAAY,IACZ,WAAY,KACZ,SAAU,IACV,eAAgB,EAClB,EACA,CACE,GAAI,WACJ,KAAM,WACN,UAAW,IACX,WAAY,KACZ,WAAY,KACZ,SAAU,IACV,eAAgB,EAClB,EACA,CACE,GAAI,aACJ,KAAM,aACN,UAAW,IACX,WAAY,IACZ,WAAY,KACZ,SAAU,IACV,WAAW,EACX,eAAgB,EAClB,EACD,CD9DD,eAAe,IAGb,IAAM,EAAe,CADD,MAAM,CAAA,EAAA,EAAA,OAAA,AAAO,GAAA,EACA,MAAM,GACpC,GAAG,CAAC,GAAU,CAAA,EAAG,EAAO,IAAI,CAAC,CAAC,EAAE,EAAO,KAAK,CAAA,CAAE,EAC9C,IAAI,CAAC,MAER,GAAI,CACF,IAAM,EAAM,MAAM,MAAM,GAAG,YAAY,OAAO,CAAC,QAAE,CAC/C,QAAS,CACP,OAAQ,CACV,EACA,YAAa,UACb,MAAO,UACT,GAEA,GAAI,AAAe,KAAK,GAAhB,MAAM,CACZ,OAAO,KAGT,GAAI,CAAC,EAAI,EAAE,CACT,CADW,KACL,AAAI,MAAM,wBAGlB,OAAO,MAAM,EAAI,IAAI,EACvB,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,uBAAwB,GAC/B,IACT,CACF,CAEe,eAAe,IAO5B,OANa,AAET,CAAC,KAFc,CAER,IACT,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAC,KAGJ,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAc,CAAA,CAAC,gBAAiB,GAC1C,mCAxDkC,CAChC,MAAO,2BACP,YAAa,6GACb,SAAU,2GACV,UAAW,CACT,MAAO,2BACP,YAAa,6GACb,KAAM,UACN,SAAU,SACZ,EACA,QAAS,CACP,KAAM,sBACN,MAAO,2BACP,YAAa,4GACf,CACF","ignoreList":[0]}