{"version":3,"sources":["turbopack:///[project]/app/discussions/DiscussionsClient.tsx"],"sourcesContent":["\"use client\";\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  MessageSquare, \n  Eye, \n  CheckCircle, \n  TrendingUp, \n  Plus, \n  Search,\n  Flame,\n  Clock,\n  Users,\n  Activity,\n  Sparkles,\n  MessagesSquare,\n  Filter\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport Link from \"next/link\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useState, useMemo } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ntype Thread = {\n  id: string;\n  title: string;\n  body: string;\n  slug: string;\n  fullUrl?: string;\n  categorySlug: string;\n  authorId: string;\n  views: number;\n  replyCount: number;\n  isPinned: boolean;\n  isLocked?: boolean;\n  hasAcceptedAnswer?: boolean;\n  engagementScore?: number;\n  createdAt: string;\n  lastActivityAt: string;\n  author?: {\n    username: string;\n    firstName?: string;\n    lastName?: string;\n    profileImageUrl?: string;\n    rank?: number;\n  };\n};\n\ntype TrendingThread = {\n  threadId: string;\n  title: string;\n  slug: string;\n  categorySlug: string;\n  engagementScore: number;\n  replyCount: number;\n  views: number;\n  velocity: number;\n  lastActivityAt: string;\n};\n\ntype ActivityFeedItem = {\n  type: string;\n  threadId: string;\n  threadTitle: string;\n  userId: string;\n  username: string;\n  profileImageUrl?: string;\n  action: string;\n  timestamp: string;\n};\n\ninterface DiscussionsClientProps {\n  initialThreads: Thread[];\n}\n\n// Stats fetcher\nfunction useDiscussionStats() {\n  return useQuery<{\n    totalThreads: number;\n    totalPosts: number;\n    activeUsers: number;\n    trendingThreads: number;\n  }>({\n    queryKey: ['/api/stats'],\n    queryFn: async () => {\n      const res = await fetch('/api/stats', {\n        credentials: 'include',\n      });\n      if (!res.ok) throw new Error('Failed to fetch stats');\n      const data = await res.json();\n      return {\n        totalThreads: data.totalThreads || 0,\n        totalPosts: data.totalPosts || 0,\n        activeUsers: data.totalMembers || 0,\n        trendingThreads: 0, // Will be calculated from trending data\n      };\n    },\n    refetchInterval: 30000,\n  });\n}\n\n// Trending threads fetcher\nfunction useTrendingThreads() {\n  return useQuery<TrendingThread[]>({\n    queryKey: ['/api/discussions/trending'],\n    queryFn: async () => {\n      const res = await fetch('/api/discussions/trending?period=24h&limit=5', {\n        credentials: 'include',\n      });\n      if (!res.ok) throw new Error('Failed to fetch trending');\n      return res.json();\n    },\n    refetchInterval: 30000,\n  });\n}\n\n// Activity feed fetcher\nfunction useActivityFeed() {\n  return useQuery<ActivityFeedItem[]>({\n    queryKey: ['/api/discussions/activity'],\n    queryFn: async () => {\n      const res = await fetch('/api/discussions/activity?limit=10', {\n        credentials: 'include',\n      });\n      if (!res.ok) throw new Error('Failed to fetch activity');\n      return res.json();\n    },\n    refetchInterval: 30000,\n  });\n}\n\nexport default function DiscussionsClient({ initialThreads }: DiscussionsClientProps) {\n  const { isAuthenticated, login } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"all\");\n  const [sortBy, setSortBy] = useState<string>(\"latest\");\n  const [filterChip, setFilterChip] = useState<string>(\"all\");\n  const [expandedCards, setExpandedCards] = useState<Set<string>>(new Set());\n\n  const toggleCardExpansion = (threadId: string) => {\n    setExpandedCards(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(threadId)) {\n        newSet.delete(threadId);\n      } else {\n        newSet.add(threadId);\n      }\n      return newSet;\n    });\n  };\n\n  // Fetch data with React Query\n  const { data: threads, isLoading: threadsLoading } = useQuery<Thread[]>({\n    queryKey: ['/api/threads'],\n    initialData: initialThreads,\n    queryFn: async () => {\n      const res = await fetch('/api/threads?sortBy=newest&limit=100', {\n        credentials: 'include',\n      });\n      if (!res.ok) throw new Error('Failed to fetch threads');\n      return res.json();\n    },\n    refetchInterval: 30000,\n  });\n\n  const { data: stats, isLoading: statsLoading } = useDiscussionStats();\n  const { data: trendingThreads, isLoading: trendingLoading } = useTrendingThreads();\n  const { data: activityFeed, isLoading: activityLoading } = useActivityFeed();\n\n  // Combine stats with real trending data\n  const combinedStats = useMemo(() => {\n    if (!stats) return null;\n    return {\n      ...stats,\n      trendingThreads: trendingThreads?.length || 0,\n    };\n  }, [stats, trendingThreads]);\n\n  // Extract unique categories from threads\n  const categories = useMemo(() => {\n    if (!threads) return [];\n    const uniqueCategories = new Set(threads.map(t => t.categorySlug));\n    return Array.from(uniqueCategories);\n  }, [threads]);\n\n  // Filter and sort threads\n  const filteredThreads = useMemo(() => {\n    if (!threads) return [];\n\n    let filtered = [...threads];\n\n    // Apply search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(thread => \n        thread.title.toLowerCase().includes(query) || \n        thread.body.toLowerCase().includes(query)\n      );\n    }\n\n    // Apply category filter\n    if (categoryFilter !== \"all\") {\n      filtered = filtered.filter(thread => thread.categorySlug === categoryFilter);\n    }\n\n    // Apply chip filters\n    if (filterChip === 'hot') {\n      filtered = filtered.filter(thread => (thread.engagementScore || 0) > 50);\n    } else if (filterChip === 'trending') {\n      filtered = filtered.filter(thread => {\n        const recentDate = new Date();\n        recentDate.setHours(recentDate.getHours() - 24);\n        return new Date(thread.lastActivityAt) > recentDate && thread.replyCount > 0;\n      });\n    } else if (filterChip === 'unanswered') {\n      filtered = filtered.filter(thread => thread.replyCount === 0);\n    } else if (filterChip === 'solved') {\n      filtered = filtered.filter(thread => thread.hasAcceptedAnswer);\n    }\n\n    // Apply sorting\n    switch (sortBy) {\n      case 'popular':\n      case 'views':\n        filtered.sort((a, b) => b.views - a.views);\n        break;\n      case 'replies':\n        filtered.sort((a, b) => b.replyCount - a.replyCount);\n        break;\n      case 'latest':\n      default:\n        filtered.sort((a, b) => \n          new Date(b.lastActivityAt).getTime() - new Date(a.lastActivityAt).getTime()\n        );\n        break;\n    }\n\n    // Pinned threads always at top\n    const pinned = filtered.filter(t => t.isPinned);\n    const regular = filtered.filter(t => !t.isPinned);\n    return [...pinned, ...regular];\n  }, [threads, searchQuery, categoryFilter, sortBy, filterChip]);\n\n  const getCategoryStyles = (categorySlug: string) => {\n    const categoryLower = categorySlug.toLowerCase();\n    \n    if (categoryLower.includes('strategy') || categoryLower.includes('discussion')) {\n      return {\n        bg: 'bg-blue-100 dark:bg-blue-950',\n        text: 'text-blue-700 dark:text-blue-300',\n        border: 'border-blue-200 dark:border-blue-800'\n      };\n    }\n    \n    if (categoryLower.includes('performance') || categoryLower.includes('report')) {\n      return {\n        bg: 'bg-green-100 dark:bg-green-950',\n        text: 'text-green-700 dark:text-green-300',\n        border: 'border-green-200 dark:border-green-800'\n      };\n    }\n    \n    if (categoryLower.includes('ea') || categoryLower.includes('library')) {\n      return {\n        bg: 'bg-purple-100 dark:bg-purple-950',\n        text: 'text-purple-700 dark:text-purple-300',\n        border: 'border-purple-200 dark:border-purple-800'\n      };\n    }\n    \n    if (categoryLower.includes('beginner') || categoryLower.includes('question')) {\n      return {\n        bg: 'bg-orange-100 dark:bg-orange-950',\n        text: 'text-orange-700 dark:text-orange-300',\n        border: 'border-orange-200 dark:border-orange-800'\n      };\n    }\n    \n    if (categoryLower.includes('support') || categoryLower.includes('technical')) {\n      return {\n        bg: 'bg-red-100 dark:bg-red-950',\n        text: 'text-red-700 dark:text-red-300',\n        border: 'border-red-200 dark:border-red-800'\n      };\n    }\n    \n    return {\n      bg: 'bg-gray-100 dark:bg-gray-800',\n      text: 'text-gray-700 dark:text-gray-300',\n      border: 'border-gray-200 dark:border-gray-700'\n    };\n  };\n\n  const formatCategoryName = (slug: string) => {\n    return slug.split('-').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  const handleNewThread = () => {\n    if (!isAuthenticated) {\n      login();\n    } else {\n      window.location.href = '/discussions/new';\n    }\n  };\n\n  if (threadsLoading) {\n    return (\n      <main className=\"container max-w-7xl mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <Skeleton className=\"h-10 w-64 mb-2\" />\n          <Skeleton className=\"h-4 w-96\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[1, 2, 3, 4, 5, 6].map(i => (\n            <Skeleton key={i} className=\"h-48\" />\n          ))}\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"container max-w-7xl mx-auto px-4 py-6\">\n      {/* Enhanced Header with Stats */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-start justify-between gap-4 flex-wrap mb-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2 flex items-center gap-3\" data-testid=\"heading-discussions\">\n              <MessagesSquare className=\"w-8 h-8 text-primary\" />\n              Recent Discussions\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Join the conversation. Browse active threads and share your insights.\n            </p>\n          </div>\n          <Button onClick={handleNewThread} data-testid=\"button-new-thread\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Thread\n          </Button>\n        </div>\n\n        {/* Platform Stats Row */}\n        {!statsLoading && combinedStats && (\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 mb-4\">\n            <Card className=\"bg-card/50 backdrop-blur-sm\">\n              <CardContent className=\"p-3\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 rounded-lg bg-blue-500/10\">\n                    <MessageSquare className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-total-threads\">\n                      {combinedStats.totalThreads}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Total Threads</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-card/50 backdrop-blur-sm\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 rounded-lg bg-green-500/10\">\n                    <Activity className=\"w-5 h-5 text-green-600 dark:text-green-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-active-today\">\n                      {filteredThreads.filter(t => {\n                        const today = new Date();\n                        today.setHours(0, 0, 0, 0);\n                        return new Date(t.lastActivityAt) > today;\n                      }).length}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Active Today</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-card/50 backdrop-blur-sm\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 rounded-lg bg-purple-500/10\">\n                    <MessagesSquare className=\"w-5 h-5 text-purple-600 dark:text-purple-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-replies-24h\">\n                      {combinedStats.totalPosts}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Total Replies</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-card/50 backdrop-blur-sm\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 rounded-lg bg-orange-500/10\">\n                    <TrendingUp className=\"w-5 h-5 text-orange-600 dark:text-orange-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-trending-now\">\n                      {combinedStats.trendingThreads}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Trending Now</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n\n      {/* 3-Column Layout: Main Content (60%) + Sidebar (40%) */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n        {/* Main Content Area */}\n        <div className=\"lg:col-span-2 space-y-4\">\n          {/* Search and Filters */}\n          <Card>\n            <CardContent className=\"p-4 space-y-3\">\n              {/* Search Bar */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  type=\"search\"\n                  placeholder=\"Search discussions...\"\n                  className=\"pl-9\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  data-testid=\"input-search-discussions\"\n                />\n              </div>\n\n              {/* Filters Row */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                  <SelectTrigger data-testid=\"select-category\">\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {categories.map((cat) => (\n                      <SelectItem key={cat} value={cat}>\n                        {formatCategoryName(cat)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger data-testid=\"select-sort\">\n                    <SelectValue placeholder=\"Sort by\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"latest\">Latest Activity</SelectItem>\n                    <SelectItem value=\"popular\">Most Popular</SelectItem>\n                    <SelectItem value=\"replies\">Most Replies</SelectItem>\n                    <SelectItem value=\"views\">Most Views</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Filter Chips */}\n              <div className=\"flex flex-wrap gap-2\">\n                <Button\n                  variant={filterChip === 'all' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setFilterChip('all')}\n                  data-testid=\"chip-all\"\n                >\n                  All\n                </Button>\n                <Button\n                  variant={filterChip === 'hot' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setFilterChip('hot')}\n                  data-testid=\"chip-hot\"\n                >\n                  <Flame className=\"w-3 h-3 mr-1\" />\n                  Hot\n                </Button>\n                <Button\n                  variant={filterChip === 'trending' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setFilterChip('trending')}\n                  data-testid=\"chip-trending\"\n                >\n                  <TrendingUp className=\"w-3 h-3 mr-1\" />\n                  Trending\n                </Button>\n                <Button\n                  variant={filterChip === 'unanswered' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setFilterChip('unanswered')}\n                  data-testid=\"chip-unanswered\"\n                >\n                  Unanswered\n                </Button>\n                <Button\n                  variant={filterChip === 'solved' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setFilterChip('solved')}\n                  data-testid=\"chip-solved\"\n                >\n                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                  Solved\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Thread Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-3\">\n            {filteredThreads && filteredThreads.length > 0 ? (\n              filteredThreads.map(thread => {\n                const categoryStyles = getCategoryStyles(thread.categorySlug);\n                const isHot = (thread.engagementScore || 0) > 50;\n                const isTrending = (() => {\n                  const recentDate = new Date();\n                  recentDate.setHours(recentDate.getHours() - 24);\n                  return new Date(thread.lastActivityAt) > recentDate && thread.replyCount > 2;\n                })();\n\n                const isExpanded = expandedCards.has(thread.id);\n\n                return (\n                  <Link key={thread.id} href={thread.fullUrl || `/thread/${thread.slug}`}>\n                    <Card \n                      className=\"h-full hover:border-primary/30 hover-elevate active-elevate-2 cursor-pointer transition-all duration-200\"\n                      data-testid={`card-thread-${thread.slug}`}\n                    >\n                      <CardContent className=\"p-3 space-y-2\">\n                        {/* Category Badge + Status Badges */}\n                        <div className=\"flex items-center justify-between gap-2 flex-wrap\">\n                          <Badge \n                            variant=\"outline\" \n                            className={`text-[10px] px-2 py-0.5 ${categoryStyles.bg} ${categoryStyles.text} ${categoryStyles.border}`}\n                            data-testid={`badge-category-${thread.slug}`}\n                          >\n                            {formatCategoryName(thread.categorySlug)}\n                          </Badge>\n                          <div className=\"flex gap-1\">\n                            {thread.isPinned && (\n                              <Badge variant=\"secondary\" className=\"text-[10px] px-1.5 py-0\" data-testid={`badge-pinned-${thread.slug}`}>\n                                Pinned\n                              </Badge>\n                            )}\n                            {isTrending && (\n                              <Badge variant=\"outline\" className=\"text-[10px] px-1.5 py-0 bg-orange-500/10 text-orange-700 dark:text-orange-400 border-orange-500/30\">\n                                <TrendingUp className=\"w-2.5 h-2.5 mr-0.5\" />\n                                Trending\n                              </Badge>\n                            )}\n                            {isHot && (\n                              <Badge variant=\"outline\" className=\"text-[10px] px-1.5 py-0 bg-red-500/10 text-red-700 dark:text-red-400 border-red-500/30\">\n                                <Flame className=\"w-2.5 h-2.5 mr-0.5\" />\n                                Hot\n                              </Badge>\n                            )}\n                            {thread.hasAcceptedAnswer && (\n                              <Badge variant=\"outline\" className=\"text-[10px] px-1.5 py-0 bg-green-500/10 text-green-700 dark:text-green-400 border-green-500/30\">\n                                <CheckCircle className=\"w-2.5 h-2.5\" />\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Thread Title */}\n                        <h3 className=\"font-semibold text-sm line-clamp-2 leading-tight\" data-testid={`title-${thread.slug}`}>\n                          {thread.title}\n                        </h3>\n\n                        {/* Thread Body Preview */}\n                        {thread.body && (\n                          <div>\n                            <p \n                              className={`text-xs text-muted-foreground leading-relaxed ${isExpanded ? '' : 'line-clamp-3'}`} \n                              data-testid={`body-preview-${thread.slug}`}\n                            >\n                              {thread.body.replace(/<[^>]*>/g, '')}\n                            </p>\n                            {thread.body.length > 150 && (\n                              <button\n                                onClick={(e) => {\n                                  e.preventDefault();\n                                  e.stopPropagation();\n                                  toggleCardExpansion(thread.id);\n                                }}\n                                className=\"text-xs text-primary hover:underline mt-1 font-medium\"\n                                data-testid={`button-toggle-${thread.slug}`}\n                              >\n                                {isExpanded ? 'Show less' : 'Show more'}\n                              </button>\n                            )}\n                          </div>\n                        )}\n\n                        {/* Author Info */}\n                        <div className=\"flex items-center gap-2\">\n                          <Avatar className=\"h-6 w-6 shrink-0\">\n                            <AvatarImage src={thread.author?.profileImageUrl} />\n                            <AvatarFallback className=\"text-[10px]\">\n                              {thread.author?.username?.[0]?.toUpperCase() || 'U'}\n                            </AvatarFallback>\n                          </Avatar>\n                          <span className=\"text-xs text-muted-foreground truncate\" data-testid={`author-${thread.slug}`}>\n                            {thread.author?.username || 'Unknown'}\n                          </span>\n                        </div>\n\n                        {/* Stats Row */}\n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-2 border-t\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"flex items-center gap-1\">\n                              <MessageSquare className=\"w-3 h-3\" />\n                              <span data-testid={`replies-${thread.slug}`}>{thread.replyCount}</span>\n                            </div>\n                            <div className=\"flex items-center gap-1\">\n                              <Eye className=\"w-3 h-3\" />\n                              <span data-testid={`views-${thread.slug}`}>{thread.views}</span>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"w-3 h-3\" />\n                            <span suppressHydrationWarning className=\"text-[10px]\" data-testid={`activity-${thread.slug}`}>\n                              {formatDistanceToNow(new Date(thread.lastActivityAt), { addSuffix: true })}\n                            </span>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </Link>\n                );\n              })\n            ) : (\n              <div className=\"col-span-full text-center py-12\">\n                <p className=\"text-muted-foreground\">No discussions found matching your filters.</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Sidebar Widgets */}\n        <div className=\"lg:col-span-1 space-y-6\">\n          {/* Trending Now Widget */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <TrendingUp className=\"w-4 h-4 text-orange-600 dark:text-orange-400\" />\n                Trending Now\n              </CardTitle>\n              <CardDescription className=\"text-xs\">\n                Hot discussions in the last 24 hours\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\" data-testid=\"widget-trending\">\n              {trendingLoading ? (\n                Array(5).fill(0).map((_, i) => (\n                  <Skeleton key={i} className=\"h-16\" />\n                ))\n              ) : trendingThreads && trendingThreads.length > 0 ? (\n                trendingThreads.map((thread, idx) => (\n                  <Link key={thread.threadId} href={`/thread/${thread.slug}`}>\n                    <div className=\"p-3 rounded-lg hover:bg-muted/50 transition-colors cursor-pointer\" data-testid={`trending-item-${idx}`}>\n                      <div className=\"flex items-start gap-2\">\n                        <Badge variant=\"outline\" className=\"shrink-0 text-[10px] px-1.5 py-0.5\">\n                          #{idx + 1}\n                        </Badge>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium line-clamp-2 mb-1\">{thread.title}</p>\n                          <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                            <div className=\"flex items-center gap-1\">\n                              <MessageSquare className=\"w-3 h-3\" />\n                              <span>{thread.replyCount}</span>\n                            </div>\n                            <div className=\"flex items-center gap-1\">\n                              <Eye className=\"w-3 h-3\" />\n                              <span>{thread.views}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </Link>\n                ))\n              ) : (\n                <p className=\"text-xs text-muted-foreground text-center py-4\">\n                  No trending discussions right now\n                </p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Recent Activity Widget */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Activity className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\n                Recent Activity\n              </CardTitle>\n              <CardDescription className=\"text-xs\">\n                Live community updates\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2\" data-testid=\"widget-activity\">\n              {activityLoading ? (\n                Array(5).fill(0).map((_, i) => (\n                  <Skeleton key={i} className=\"h-12\" />\n                ))\n              ) : activityFeed && activityFeed.length > 0 ? (\n                activityFeed.slice(0, 10).map((activity, idx) => (\n                  <Link key={idx} href={`/thread/${activity.threadId}`}>\n                    <div className=\"p-2 rounded-lg hover:bg-muted/50 transition-colors cursor-pointer text-xs\" data-testid={`activity-item-${idx}`}>\n                      <div className=\"flex items-start gap-2\">\n                        <Avatar className=\"h-6 w-6 shrink-0\">\n                          <AvatarImage src={activity.profileImageUrl} />\n                          <AvatarFallback className=\"text-[10px]\">\n                            {activity.username[0]?.toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"line-clamp-2\">\n                            <span className=\"font-medium\">{activity.username}</span>\n                            {' '}\n                            <span className=\"text-muted-foreground\">{activity.action}</span>\n                            {' '}\n                            <span className=\"font-medium line-clamp-1\">{activity.threadTitle}</span>\n                          </p>\n                          <p suppressHydrationWarning className=\"text-[10px] text-muted-foreground mt-0.5\">\n                            {formatDistanceToNow(new Date(activity.timestamp), { addSuffix: true })}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </Link>\n                ))\n              ) : (\n                <p className=\"text-xs text-muted-foreground text-center py-4\">\n                  No recent activity\n                </p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Quick Stats Widget */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Sparkles className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n                Quick Stats\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\" data-testid=\"widget-stats\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Active Discussions</span>\n                <span className=\"text-sm font-bold\">\n                  {filteredThreads.filter(t => {\n                    const today = new Date();\n                    today.setHours(0, 0, 0, 0);\n                    return new Date(t.lastActivityAt) > today;\n                  }).length}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Unanswered</span>\n                <span className=\"text-sm font-bold\">\n                  {filteredThreads.filter(t => t.replyCount === 0).length}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Solved</span>\n                <span className=\"text-sm font-bold\">\n                  {filteredThreads.filter(t => t.hasAcceptedAnswer).length}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Categories</span>\n                <span className=\"text-sm font-bold\">{categories.length}</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </main>\n  );\n}\n"],"names":[],"mappings":"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"}