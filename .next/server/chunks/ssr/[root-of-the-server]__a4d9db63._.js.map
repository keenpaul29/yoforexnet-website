{"version":3,"sources":["turbopack:///[project]/app/lib/api-config.ts","turbopack:///[project]/app/components/SchemaGenerator.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/lib/schema-utils.ts","turbopack:///[project]/lib/schema-generator.ts"],"sourcesContent":["/**\n * Centralized API Configuration\n * \n * This module provides runtime URL resolution for API calls across the application.\n * It eliminates hardcoded localhost URLs and uses environment variables for flexibility.\n * \n * Architecture:\n * - Development: Next.js (3000) + Express (3001)\n * - Production VPS: NGINX proxy (80/443) ‚Üí Next.js (3000) + Express (3001)\n * - Production Replit: Single Next.js server (5000) with API routes\n */\n\n/**\n * Environment variable validation\n * Ensures required configuration is present at runtime\n * \n * PRODUCTION SAFETY: Throws errors for missing critical variables\n * DEVELOPMENT: Allows fallbacks with warnings\n */\nfunction validateEnv() {\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  if (typeof window === 'undefined') {\n    // Server-side: require EXPRESS_URL in production\n    if (!process.env.EXPRESS_URL) {\n      if (isProduction) {\n        throw new Error(\n          'üö® CRITICAL: EXPRESS_URL environment variable is required in production.\\n' +\n          'Please set it in your .env.production file.\\n' +\n          'Example: EXPRESS_URL=http://127.0.0.1:3001\\n' +\n          'For VPS deployment, see: VPS_DEPLOYMENT_GUIDE.md'\n        );\n      } else {\n        console.warn(\n          '‚ö†Ô∏è  EXPRESS_URL not set, using development fallback: http://127.0.0.1:3001'\n        );\n      }\n    }\n  }\n\n  // NEXT_PUBLIC_SITE_URL is required in production for SEO, OG tags, canonical URLs\n  if (!process.env.NEXT_PUBLIC_SITE_URL) {\n    if (isProduction) {\n      throw new Error(\n        'üö® CRITICAL: NEXT_PUBLIC_SITE_URL environment variable is required in production.\\n' +\n        'Please set it in your .env.production file.\\n' +\n        'Example: NEXT_PUBLIC_SITE_URL=https://yourdomain.com\\n' +\n        'This is used for SEO metadata, Open Graph tags, and canonical URLs.'\n      );\n    } else {\n      console.warn(\n        '‚ö†Ô∏è  NEXT_PUBLIC_SITE_URL not set, using development fallback: http://localhost:3000'\n      );\n    }\n  }\n}\n\n// Run validation on module load\nvalidateEnv();\n\n/**\n * Get the API base URL for client-side requests\n * \n * @returns API base URL accessible from the browser\n * \n * Client-side behavior:\n * - Always returns empty string '' (uses relative URLs)\n * - Next.js rewrites handle /api/* ‚Üí Express server routing\n * - No need for absolute URLs on client-side\n * \n * Server-side behavior:\n * - Returns internal API URL (e.g., http://127.0.0.1:3001)\n * - Used for server-to-server communication\n * \n * Usage in client components:\n * ```typescript\n * const apiUrl = getApiBaseUrl();\n * fetch(`${apiUrl}/api/stats`);  // Becomes: fetch('/api/stats')\n * ```\n */\nexport function getApiBaseUrl(): string {\n  // Client-side: use relative URLs (NGINX/Next.js rewrites handle routing)\n  if (typeof window !== 'undefined') {\n    return '';\n  }\n\n  // Server-side: Use getInternalApiUrl which has production safety checks\n  return getInternalApiUrl();\n}\n\n/**\n * Get the internal API URL for server-side requests\n * \n * @returns Internal API URL for server-to-server communication\n * \n * Usage in server components:\n * ```typescript\n * const apiUrl = getInternalApiUrl();\n * const response = await fetch(`${apiUrl}/api/stats`);\n * ```\n */\nexport function getInternalApiUrl(): string {\n  // Server-side only\n  if (typeof window !== 'undefined') {\n    throw new Error('getInternalApiUrl() can only be called server-side');\n  }\n\n  const isProduction = process.env.NODE_ENV === 'production';\n  const url = process.env.EXPRESS_URL;\n  \n  if (!url) {\n    if (isProduction) {\n      throw new Error(\n        'EXPRESS_URL must be set in production. ' +\n        'This is a critical configuration error that will prevent server-side API calls from working.'\n      );\n    }\n    // Development fallback only\n    const fallback = 'http://127.0.0.1:3001';\n    console.log(`[API Config] Using development fallback: ${fallback}`);\n    return fallback;\n  }\n  \n  console.log(`[API Config] Internal API URL: ${url}`);\n  return url;\n}\n\n/**\n * Get the public site URL\n * \n * @returns Public-facing site URL (for SEO, OG tags, etc.)\n * \n * Usage:\n * ```typescript\n * const siteUrl = getSiteUrl();\n * const canonical = `${siteUrl}/thread/${slug}`;\n * ```\n */\nexport function getSiteUrl(): string {\n  const isProduction = process.env.NODE_ENV === 'production';\n  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || process.env.VERCEL_URL;\n  \n  if (!siteUrl) {\n    if (isProduction) {\n      throw new Error(\n        'NEXT_PUBLIC_SITE_URL must be set in production. ' +\n        'This is required for SEO, canonical URLs, and Open Graph tags.'\n      );\n    }\n    // Development fallback\n    return 'http://localhost:3000';\n  }\n  \n  return siteUrl;\n}\n\n/**\n * Build a full API URL with path\n * \n * @param path - API endpoint path (e.g., '/api/stats')\n * @returns Full API URL\n * \n * Usage:\n * ```typescript\n * const url = buildApiUrl('/api/stats');\n * const response = await fetch(url);\n * ```\n */\nexport function buildApiUrl(path: string): string {\n  const base = getApiBaseUrl();\n  const cleanPath = path.startsWith('/') ? path : `/${path}`;\n  return base ? `${base}${cleanPath}` : cleanPath;\n}\n\n/**\n * Configuration object for easy access\n */\nexport const apiConfig = {\n  /**\n   * API base URL (client or server appropriate)\n   */\n  baseUrl: getApiBaseUrl(),\n\n  /**\n   * Public site URL\n   */\n  siteUrl: getSiteUrl(),\n\n  /**\n   * Whether we're in production mode\n   */\n  isProduction: process.env.NODE_ENV === 'production',\n\n  /**\n   * Whether we're in development mode\n   */\n  isDevelopment: process.env.NODE_ENV === 'development',\n\n  /**\n   * Express API URL (server-side only)\n   */\n  get expressUrl(): string {\n    if (typeof window !== 'undefined') {\n      throw new Error('expressUrl is only available server-side');\n    }\n    return getInternalApiUrl();\n  },\n} as const;\n\n/**\n * Type-safe environment variable access\n * \n * Note: NEXT_PUBLIC_EXPRESS_URL is not included as client-side code\n * uses relative URLs (/api/*) which are handled by Next.js rewrites.\n */\nexport const env = {\n  // Server-side only\n  EXPRESS_URL: process.env.EXPRESS_URL,\n  DATABASE_URL: process.env.DATABASE_URL,\n  SESSION_SECRET: process.env.SESSION_SECRET,\n\n  // Public (client-accessible)\n  NEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL,\n\n  // Node environment\n  NODE_ENV: process.env.NODE_ENV,\n} as const;\n\n// Export helper for debugging\nexport function debugConfig() {\n  if (typeof window === 'undefined') {\n    console.log('üîß API Configuration (Server-side):');\n    console.log('  - Express URL:', env.EXPRESS_URL || 'NOT SET (using fallback)');\n    console.log('  - Site URL:', getSiteUrl());\n    console.log('  - API Base:', getApiBaseUrl());\n  } else {\n    console.log('üîß API Configuration (Client-side):');\n    console.log('  - Site URL:', env.NEXT_PUBLIC_SITE_URL || 'NOT SET');\n    console.log('  - API Base:', getApiBaseUrl());\n  }\n}\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const SchemaScript = registerClientReference(\n    function() { throw new Error(\"Attempted to call SchemaScript() from the server but SchemaScript is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/SchemaGenerator.tsx\",\n    \"SchemaScript\",\n);\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/components/SchemaGenerator.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/SchemaGenerator.tsx\",\n    \"default\",\n);\n","/**\n * Schema Utilities - Validation, Sanitization, and Field Mapping\n * \n * Provides helper functions for Schema.org JSON-LD generation:\n * - URL normalization and validation\n * - HTML sanitization for schema fields\n * - Date formatting to ISO 8601\n * - Conditional property validation\n * - Schema quality checks\n */\n\n/**\n * Convert relative URL to absolute URL\n * Handles http, https, protocol-relative (//), data, and mailto URLs\n * \n * @param url - URL to convert (can be relative or absolute)\n * @param baseUrl - Base URL of the site\n * @returns Absolute URL or undefined if input is null/undefined\n */\nexport function toAbsoluteUrl(url: string | undefined | null, baseUrl: string): string | undefined {\n  if (!url) return undefined;\n  \n  // Trim whitespace\n  url = url.trim();\n  \n  // Already absolute (http or https)\n  if (url.startsWith('http://') || url.startsWith('https://')) {\n    return url;\n  }\n  \n  // Protocol-relative URL (//cdn.example.com/image.jpg)\n  if (url.startsWith('//')) {\n    return `https:${url}`; // Add https: protocol\n  }\n  \n  // Data URLs (data:image/png;base64,...)\n  if (url.startsWith('data:')) {\n    return url;\n  }\n  \n  // Mailto URLs\n  if (url.startsWith('mailto:')) {\n    return url;\n  }\n  \n  // Telephone URLs\n  if (url.startsWith('tel:')) {\n    return url;\n  }\n  \n  // Relative URL starting with /\n  if (url.startsWith('/')) {\n    return `${baseUrl}${url}`;\n  }\n  \n  // Relative URL without leading slash\n  return `${baseUrl}/${url}`;\n}\n\n/**\n * Validate and ensure image URL is absolute with proper formatting\n * Google recommends images be at least 1200px wide for optimal rich results\n * \n * @param url - Image URL to validate\n * @param baseUrl - Base URL of the site\n * @returns Absolute image URL or undefined if input is null/undefined\n */\nexport function validateImageUrl(url: string | undefined | null, baseUrl: string): string | undefined {\n  const absoluteUrl = toAbsoluteUrl(url, baseUrl);\n  \n  // Add size parameter for recommended 1200px width if it's from YoForex domain\n  if (absoluteUrl && absoluteUrl.includes(baseUrl)) {\n    // Add image optimization parameters if supported\n    // This can be extended to add query params like ?w=1200 if image service supports it\n    return absoluteUrl;\n  }\n  \n  return absoluteUrl;\n}\n\n/**\n * Sanitize HTML content for schema articleBody\n * Removes HTML tags and normalizes whitespace\n * Relies on JSON.stringify for proper escaping\n * \n * @param html - HTML content to sanitize\n * @returns Clean text suitable for schema.org or undefined if input is null/undefined\n */\nexport function sanitizeForSchema(html: string | undefined | null): string | undefined {\n  if (!html) return undefined;\n  \n  // Strip HTML tags\n  let text = html.replace(/<[^>]*>/g, '');\n  \n  // Decode HTML entities\n  text = text.replace(/&nbsp;/g, ' ')\n            .replace(/&quot;/g, '\"')\n            .replace(/&apos;/g, \"'\")\n            .replace(/&lt;/g, '<')\n            .replace(/&gt;/g, '>')\n            .replace(/&amp;/g, '&');\n  \n  // Normalize whitespace (but don't escape quotes - JSON.stringify handles that)\n  text = text.replace(/\\n/g, ' ')\n            .replace(/\\r/g, '')\n            .replace(/\\t/g, ' ')\n            .replace(/\\s+/g, ' '); // Collapse multiple spaces\n  \n  // Trim whitespace\n  return text.trim();\n}\n\n/**\n * Convert database timestamp to ISO 8601 format\n * Schema.org requires ISO 8601 date format for all date fields\n * \n * @param date - Date object or string to convert\n * @returns ISO 8601 formatted date string or undefined if invalid\n */\nexport function toISO8601(date: Date | string | undefined | null): string | undefined {\n  if (!date) return undefined;\n  \n  try {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    \n    // Check if date is valid\n    if (isNaN(dateObj.getTime())) {\n      return undefined;\n    }\n    \n    return dateObj.toISOString();\n  } catch (e) {\n    console.warn('[Schema Utils] Invalid date conversion:', date);\n    return undefined;\n  }\n}\n\n/**\n * Check if aggregateRating should be included\n * Google requires minimum 5 reviews for aggregateRating to be valid\n * \n * @param reviewCount - Number of reviews\n * @returns True if rating should be included (>= 5 reviews)\n */\nexport function shouldIncludeRating(reviewCount: number): boolean {\n  return reviewCount >= 5;\n}\n\n/**\n * Validate schema has all required properties before generation\n * Prevents generating invalid schemas that won't pass Google validation\n * \n * @param schema - Schema object to validate\n * @param requiredProps - Array of required property names\n * @returns True if all required properties exist and are non-empty\n */\nexport function validateRequiredProperties(schema: any, requiredProps: string[]): boolean {\n  return requiredProps.every(prop => {\n    const value = schema[prop];\n    \n    // Check for nested properties (e.g., 'author.name')\n    if (prop.includes('.')) {\n      const parts = prop.split('.');\n      let current = schema;\n      for (const part of parts) {\n        if (!current || current[part] === undefined || current[part] === null) {\n          return false;\n        }\n        current = current[part];\n      }\n      return current !== '';\n    }\n    \n    // Direct property check\n    return value !== undefined && value !== null && value !== '';\n  });\n}\n\n/**\n * Get inLanguage property for schema.org\n * Currently defaults to 'en' but can be extended with language detection\n * \n * @param content - Content to analyze (for future language detection)\n * @returns Language code (BCP 47 format)\n */\nexport function getLanguage(content?: string): string {\n  // Future enhancement: Implement language detection\n  // For now, default to English as primary platform language\n  return 'en';\n}\n\n/**\n * Truncate text to specified length while preserving word boundaries\n * Useful for meta descriptions and schema descriptions\n * \n * @param text - Text to truncate\n * @param maxLength - Maximum length\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string | undefined | null, maxLength: number): string | undefined {\n  if (!text) return undefined;\n  \n  if (text.length <= maxLength) {\n    return text;\n  }\n  \n  // Truncate at last space before maxLength\n  const truncated = text.substring(0, maxLength);\n  const lastSpace = truncated.lastIndexOf(' ');\n  \n  if (lastSpace > 0) {\n    return truncated.substring(0, lastSpace) + '...';\n  }\n  \n  return truncated + '...';\n}\n\n/**\n * Calculate word count for articleBody\n * Used in Article and BlogPosting schemas\n * \n * @param text - Text to count words in\n * @returns Number of words\n */\nexport function getWordCount(text: string | undefined | null): number {\n  if (!text) return 0;\n  \n  // Remove extra whitespace and split on word boundaries\n  return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n}\n","/**\n * Dynamic Schema.org JSON-LD Generator\n * \n * Complies with:\n * - Schema.org v29.3 (Latest 2025 standard)\n * - Google Rich Results Guidelines 2025\n * - JSON-LD 1.0 specification\n * \n * Features:\n * - Automatic content type detection\n * - Dynamic schema generation based on page context\n * - Type-safe schema builders\n * - Validation-ready output\n */\n\nimport { ForumThread, Content, User, ForumCategory } from '@shared/schema';\nimport { \n  toAbsoluteUrl, \n  validateImageUrl, \n  sanitizeForSchema, \n  toISO8601, \n  shouldIncludeRating,\n  validateRequiredProperties,\n  getLanguage,\n  getWordCount\n} from './schema-utils';\n\n// ============================================================================\n// TYPE DEFINITIONS\n// ============================================================================\n\nexport type SchemaContext = 'https://schema.org';\n\nexport interface BaseSchema {\n  '@context': SchemaContext;\n  '@type': string;\n  '@id'?: string;\n}\n\nexport interface OrganizationSchema extends BaseSchema {\n  '@type': 'Organization';\n  name: string;\n  url: string;\n  logo?: string;\n  description?: string;\n  email?: string;\n  telephone?: string;\n  address?: PostalAddress;\n  sameAs?: string[];\n  foundingDate?: string;\n}\n\nexport interface PostalAddress {\n  '@type': 'PostalAddress';\n  streetAddress?: string;\n  addressLocality?: string;\n  addressRegion?: string;\n  postalCode?: string;\n  addressCountry?: string;\n}\n\nexport interface WebSiteSchema extends BaseSchema {\n  '@type': 'WebSite';\n  url: string;\n  name: string;\n  description?: string;\n  inLanguage?: string;\n  publisher?: { '@id': string };\n  potentialAction?: SearchAction;\n}\n\nexport interface SearchAction {\n  '@type': 'SearchAction';\n  target: string | EntryPoint;\n  'query-input'?: string;\n}\n\nexport interface EntryPoint {\n  '@type': 'EntryPoint';\n  urlTemplate: string;\n}\n\nexport interface BreadcrumbListSchema extends BaseSchema {\n  '@type': 'BreadcrumbList';\n  itemListElement: ListItem[];\n}\n\nexport interface ListItem {\n  '@type': 'ListItem';\n  position: number;\n  name: string;\n  item?: string | { '@id': string; name: string };\n}\n\nexport interface ArticleSchema extends BaseSchema {\n  '@type': 'Article' | 'BlogPosting' | 'NewsArticle';\n  headline: string;\n  description?: string;\n  image?: string | string[];\n  datePublished: string;\n  dateModified?: string;\n  author: Person | Organization;\n  publisher: Organization;\n  articleBody?: string;\n  wordCount?: number;\n  commentCount?: number;\n  interactionStatistic?: InteractionCounter;\n}\n\nexport interface Person {\n  '@type': 'Person';\n  '@id'?: string;\n  name: string;\n  url?: string;\n  image?: string;\n}\n\nexport interface Organization {\n  '@type': 'Organization';\n  '@id'?: string;\n  name: string;\n  url?: string;\n  logo?: ImageObject;\n}\n\nexport interface ImageObject {\n  '@type': 'ImageObject';\n  url: string;\n  width?: number;\n  height?: number;\n}\n\nexport interface InteractionCounter {\n  '@type': 'InteractionCounter';\n  interactionType: string;\n  userInteractionCount: number;\n}\n\n// ============================================================================\n// DISCUSSION FORUM POSTING SCHEMA (Schema.org 2025)\n// ============================================================================\n\nexport interface DiscussionForumPostingSchema extends BaseSchema {\n  '@type': 'DiscussionForumPosting';\n  '@id': string;\n  headline: string;\n  articleBody: string;\n  author: Person | Organization;\n  datePublished: string;\n  dateModified?: string;\n  url: string;\n  mainEntityOfPage?: { '@id': string };\n  inLanguage?: string;\n  interactionStatistic?: InteractionCounter[];\n  comment?: CommentSchema[];\n  commentCount?: number;\n  publisher?: Organization;\n}\n\nexport interface CommentSchema extends BaseSchema {\n  '@type': 'Comment';\n  '@id'?: string;\n  text: string;\n  author: Person | Organization;\n  datePublished: string;\n  upvoteCount?: number;\n  parentItem?: { '@id': string };\n}\n\n// ============================================================================\n// PRODUCT SCHEMA (Schema.org 2025 - Enhanced)\n// ============================================================================\n\nexport interface ProductSchema extends BaseSchema {\n  '@type': 'Product';\n  '@id': string;\n  name: string;\n  description: string;\n  image?: string | string[];\n  brand?: Organization | { '@type': 'Brand'; name: string };\n  offers: OfferSchema;\n  aggregateRating?: AggregateRatingSchema;\n  review?: ReviewSchema[];\n  sku?: string;\n  gtin?: string;\n  mpn?: string;\n  additionalType?: string;\n  category?: string;\n}\n\nexport interface OfferSchema {\n  '@type': 'Offer';\n  price: string;\n  priceCurrency: string;\n  availability: string;\n  url?: string;\n  seller?: Organization | Person;\n  priceValidUntil?: string;\n}\n\nexport interface AggregateRatingSchema {\n  '@type': 'AggregateRating';\n  ratingValue: number;\n  reviewCount: number;\n  bestRating?: number;\n  worstRating?: number;\n}\n\nexport interface ReviewSchema {\n  '@type': 'Review';\n  author: Person;\n  datePublished: string;\n  reviewRating: {\n    '@type': 'Rating';\n    ratingValue: number;\n    bestRating?: number;\n  };\n  reviewBody?: string;\n}\n\n// Legacy type aliases for backward compatibility\nexport interface Brand {\n  '@type': 'Brand';\n  name: string;\n}\n\nexport interface Offer extends OfferSchema {}\nexport interface AggregateRating extends AggregateRatingSchema {}\nexport interface Review extends ReviewSchema {}\n\nexport interface Rating {\n  '@type': 'Rating';\n  ratingValue: number;\n  bestRating?: number;\n  worstRating?: number;\n}\n\n// ============================================================================\n// FAQ PAGE SCHEMA (Schema.org 2025 - Enhanced)\n// ============================================================================\n\nexport interface FAQPageSchema extends BaseSchema {\n  '@type': 'FAQPage';\n  '@id': string;\n  mainEntity: QuestionSchema[];\n}\n\nexport interface QuestionSchema {\n  '@type': 'Question';\n  '@id'?: string;\n  name: string;\n  acceptedAnswer: AnswerSchema;\n}\n\nexport interface AnswerSchema {\n  '@type': 'Answer';\n  '@id'?: string;\n  text: string;\n  dateCreated?: string;\n  upvoteCount?: number;\n  url?: string;\n  author?: Person;\n}\n\n// Legacy type aliases for backward compatibility\nexport interface Question extends QuestionSchema {}\nexport interface Answer extends AnswerSchema {}\n\n// ============================================================================\n// VIDEO OBJECT SCHEMA (Schema.org 2025 - Enhanced)\n// ============================================================================\n\nexport interface VideoObjectSchema extends BaseSchema {\n  '@type': 'VideoObject';\n  '@id': string;\n  name: string;\n  description: string;\n  thumbnailUrl: string | string[];\n  uploadDate: string;\n  contentUrl?: string;\n  embedUrl?: string;\n  duration?: string;\n  interactionStatistic?: InteractionCounter;\n  author?: Person | Organization;\n}\n\n// ============================================================================\n// NEWS ARTICLE SCHEMA (Schema.org 2025)\n// ============================================================================\n\nexport interface NewsArticleSchema extends BaseSchema {\n  '@type': 'NewsArticle';\n  '@id': string;\n  headline: string;\n  description?: string;\n  image?: string | string[];\n  datePublished: string;\n  dateModified?: string;\n  author: Person | Organization;\n  publisher: Organization;\n  articleBody?: string;\n  inLanguage?: string;\n  dateline?: string;\n  url: string;\n}\n\n// ============================================================================\n// BLOG POSTING SCHEMA (Schema.org 2025)\n// ============================================================================\n\nexport interface BlogPostingSchema extends BaseSchema {\n  '@type': 'BlogPosting';\n  '@id': string;\n  headline: string;\n  description?: string;\n  image?: string | string[];\n  datePublished: string;\n  dateModified?: string;\n  author: Person | Organization;\n  publisher: Organization;\n  articleBody?: string;\n  wordCount?: number;\n  inLanguage?: string;\n  articleSection?: string;\n  url: string;\n  mainEntityOfPage?: { '@id': string };\n}\n\nexport interface ProfilePageSchema extends BaseSchema {\n  '@type': 'ProfilePage';\n  mainEntity: Person;\n  dateCreated?: string;\n  dateModified?: string;\n}\n\nexport interface PersonSchema extends BaseSchema {\n  '@type': 'Person';\n  '@id': string;\n  name: string;\n  url: string;\n  image?: string;\n  jobTitle?: string;\n  description?: string;\n  alumniOf?: Organization;\n  affiliation?: Organization;\n  worksFor?: Organization;\n  sameAs?: string[];\n  knowsAbout?: string[];\n  interactionStatistic?: InteractionCounter[];\n}\n\n// ============================================================================\n// SITE CONFIGURATION\n// ============================================================================\n\nexport interface SiteConfig {\n  name: string;\n  url: string;\n  description: string;\n  logo: string;\n  organizationId: string;\n  foundingDate?: string;\n  email?: string;\n  telephone?: string;\n  socialProfiles?: string[];\n  searchEndpoint?: string;\n}\n\n// Default YoForex configuration\nexport const SITE_CONFIG: SiteConfig = {\n  name: 'YoForex',\n  url: process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com',\n  description: 'Global forex trading community platform featuring forum discussions, EA marketplace, broker reviews, and expert insights',\n  logo: `${process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com'}/logo.png`,\n  organizationId: `${process.env.NEXT_PUBLIC_SITE_URL || 'https://yoforex.com'}/#organization`,\n  foundingDate: '2024-01-01',\n  email: 'contact@yoforex.com',\n  socialProfiles: [\n    'https://twitter.com/yoforex',\n    'https://linkedin.com/company/yoforex',\n    'https://facebook.com/yoforex',\n  ],\n  searchEndpoint: '/search?q={search_term_string}',\n};\n\n// ============================================================================\n// SCHEMA GENERATORS\n// ============================================================================\n\n/**\n * Generate WebSite schema with SearchAction\n * Should be included on all pages (usually in root layout)\n */\nexport function generateWebSiteSchema(config: SiteConfig = SITE_CONFIG): WebSiteSchema {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'WebSite',\n    '@id': `${config.url}/#website`,\n    url: config.url,\n    name: config.name,\n    description: config.description,\n    inLanguage: 'en-US',\n    publisher: {\n      '@id': config.organizationId,\n    },\n    potentialAction: config.searchEndpoint\n      ? {\n          '@type': 'SearchAction',\n          target: {\n            '@type': 'EntryPoint',\n            urlTemplate: `${config.url}${config.searchEndpoint}`,\n          },\n          'query-input': 'required name=search_term_string',\n        }\n      : undefined,\n  };\n}\n\n/**\n * Generate Organization schema\n * Should be included on homepage and about page\n */\nexport function generateOrganizationSchema(\n  config: SiteConfig = SITE_CONFIG\n): OrganizationSchema {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Organization',\n    '@id': config.organizationId,\n    name: config.name,\n    url: config.url,\n    logo: config.logo,\n    description: config.description,\n    email: config.email,\n    telephone: config.telephone,\n    foundingDate: config.foundingDate,\n    sameAs: config.socialProfiles,\n  };\n}\n\n/**\n * Generate BreadcrumbList schema from path segments\n * @param items Array of breadcrumb items with name and url\n */\nexport function generateBreadcrumbSchema(\n  items: Array<{ name: string; url: string }>\n): BreadcrumbListSchema {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: items.map((item, index) => ({\n      '@type': 'ListItem',\n      position: index + 1,\n      name: item.name,\n      item: index < items.length - 1 ? item.url : undefined, // Last item shouldn't have URL\n    })),\n  };\n}\n\n/**\n * Generate Article schema for forum threads\n * Complies with Google Rich Results requirements\n */\nexport function generateArticleSchema(params: {\n  thread: ForumThread;\n  author?: User;\n  canonicalUrl: string;\n  category?: ForumCategory;\n}): ArticleSchema {\n  const { thread, author, canonicalUrl, category } = params;\n\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Article',\n    '@id': canonicalUrl,\n    headline: thread.title,\n    description: thread.metaDescription || thread.body?.substring(0, 160) || '',\n    image: `${SITE_CONFIG.logo}`, // Thread schema doesn't have featured image\n    datePublished: new Date(thread.createdAt).toISOString(),\n    dateModified: new Date(thread.updatedAt).toISOString(),\n    author: author\n      ? {\n          '@type': 'Person',\n          name: author.username,\n          url: `${SITE_CONFIG.url}/user/${author.username}`,\n        }\n      : {\n          '@type': 'Person',\n          name: 'YoForex Community',\n        },\n    publisher: {\n      '@type': 'Organization',\n      '@id': SITE_CONFIG.organizationId,\n      name: SITE_CONFIG.name,\n      logo: {\n        '@type': 'ImageObject',\n        url: SITE_CONFIG.logo,\n      },\n    },\n    wordCount: thread.body ? thread.body.split(/\\s+/).length : 0,\n    commentCount: thread.replyCount || 0,\n    interactionStatistic: {\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/ViewAction',\n      userInteractionCount: thread.views || 0,\n    },\n  };\n}\n\n/**\n * Generate Product schema for marketplace items (Schema.org 2025 Enhanced)\n * Includes offers, ratings, and reviews\n * Supports digital products (SoftwareApplication for EAs/Indicators)\n */\nexport function generateProductSchema(params: {\n  product: Content;\n  baseUrl: string;\n  author: User;\n  averageRating?: number;\n  reviewCount?: number;\n  reviews?: Array<{ author: User; rating: number; comment: string; createdAt: Date }>;\n}): ProductSchema {\n  const { product, baseUrl, author, averageRating, reviewCount, reviews } = params;\n\n  const images = product.images || [];\n  const coverImage = images.find((img) => img.isCover) || images[0];\n  const imageUrl = images.length > 0 ? images[0].url : undefined;\n\n  // Determine additional type based on content type\n  let additionalType: string | undefined;\n  if (product.type === 'ea' || product.type === 'indicator') {\n    additionalType = 'https://schema.org/SoftwareApplication';\n  }\n\n  // Build reviews array if provided with Person schema links\n  const reviewSchemas: ReviewSchema[] | undefined = reviews?.map((review) => ({\n    '@context': 'https://schema.org',\n    '@type': 'Review',\n    author: {\n      '@type': 'Person',\n      '@id': `${baseUrl}/user/${review.author.username}#person`,\n      name: review.author.username,\n      url: `${baseUrl}/user/${review.author.username}`,\n    },\n    datePublished: toISO8601(review.createdAt)!,\n    reviewRating: {\n      '@type': 'Rating',\n      ratingValue: review.rating,\n      bestRating: 5,\n    },\n    reviewBody: sanitizeForSchema(review.comment),\n  }));\n\n  const schema: ProductSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'Product',\n    '@id': `${baseUrl}/content/${product.slug}#product`,\n    name: product.title,\n    description: sanitizeForSchema(product.description) || '',\n    image: validateImageUrl(imageUrl || coverImage?.url, baseUrl) || `${baseUrl}/logo.png`,\n    brand: {\n      '@type': 'Brand',\n      name: SITE_CONFIG.name,\n    },\n    offers: {\n      '@type': 'Offer',\n      price: product.isFree ? '0' : (product.priceCoins || 0).toString(),\n      priceCurrency: 'USD',\n      availability: product.status === 'approved' \n        ? 'https://schema.org/InStock' \n        : 'https://schema.org/OutOfStock',\n      url: `${baseUrl}/content/${product.slug}`,\n      seller: {\n        '@type': 'Person',\n        '@id': `${baseUrl}/user/${author.username}#person`,\n        name: author.username,\n        url: `${baseUrl}/user/${author.username}`,\n      },\n    },\n    sku: product.id,\n    ...(additionalType && { additionalType }),\n    ...(product.category && { category: product.category }),\n  };\n  \n  // Conditional: Include aggregateRating only when minimum 5 reviews present\n  if (reviewCount && shouldIncludeRating(reviewCount) && averageRating) {\n    schema.aggregateRating = {\n      '@type': 'AggregateRating',\n      ratingValue: averageRating,\n      reviewCount: reviewCount,\n      bestRating: 5,\n      worstRating: 1,\n    };\n  }\n  \n  // Include individual reviews\n  if (reviewSchemas && reviewSchemas.length > 0) {\n    schema.review = reviewSchemas;\n  }\n  \n  // Validate required properties\n  if (!validateRequiredProperties(schema, ['name', 'offers'])) {\n    throw new Error('Missing required Product schema properties');\n  }\n  \n  return schema;\n}\n\n/**\n * Generate comprehensive Person schema for user profiles\n * Follows Schema.org 2025 Person specification\n */\nexport function generatePersonSchema(params: {\n  user: User;\n  baseUrl: string;\n  reputationScore?: number;\n  threadCount?: number;\n  replyCount?: number;\n  badges?: string[];\n}): PersonSchema {\n  const { user, baseUrl, reputationScore, threadCount, replyCount, badges } = params;\n  \n  // Build name from firstName/lastName or fallback to username\n  const name = user.firstName && user.lastName \n    ? `${user.firstName} ${user.lastName}`\n    : user.username;\n  \n  // Build sameAs array from social profiles\n  const sameAs: string[] = [];\n  if (user.youtubeUrl) sameAs.push(user.youtubeUrl);\n  if (user.instagramHandle) {\n    // Handle both full URLs and handles\n    const instaUrl = user.instagramHandle.startsWith('http') \n      ? user.instagramHandle \n      : `https://instagram.com/${user.instagramHandle}`;\n    sameAs.push(instaUrl);\n  }\n  if (user.telegramHandle) {\n    // Handle both full URLs and handles\n    const telegramUrl = user.telegramHandle.startsWith('http') || user.telegramHandle.startsWith('https://t.me/')\n      ? user.telegramHandle\n      : `https://t.me/${user.telegramHandle}`;\n    sameAs.push(telegramUrl);\n  }\n  if (user.myfxbookLink) sameAs.push(user.myfxbookLink);\n  \n  // Build knowsAbout from badges (expertise areas)\n  const knowsAbout: string[] = [];\n  if (badges && badges.length > 0) {\n    // Map badge types to expertise areas\n    const badgeToExpertise: Record<string, string> = {\n      'EA_EXPERT': 'Expert Advisor Development',\n      'TRADER_PRO': 'Forex Trading',\n      'HELPFUL_MEMBER': 'Community Support',\n      'TOP_CONTRIBUTOR': 'Technical Analysis',\n      'VERIFIED_TRADER': 'Live Trading',\n      'EARLY_ADOPTER': 'Trading Systems',\n      'CONTENT_CREATOR': 'Trading Education'\n    };\n    badges.forEach(badge => {\n      if (badgeToExpertise[badge]) {\n        knowsAbout.push(badgeToExpertise[badge]);\n      }\n    });\n  }\n  \n  // Add default expertise based on user level\n  if (!knowsAbout.length) {\n    knowsAbout.push('Forex Trading', 'Expert Advisors');\n  }\n  \n  // Build interaction statistics\n  const interactionStatistic: InteractionCounter[] = [];\n  if (threadCount) {\n    interactionStatistic.push({\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/CreateAction',\n      userInteractionCount: threadCount,\n    });\n  }\n  if (replyCount) {\n    interactionStatistic.push({\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/CommentAction',\n      userInteractionCount: replyCount,\n    });\n  }\n  \n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Person',\n    '@id': `${baseUrl}/user/${user.username}#person`,\n    name,\n    url: `${baseUrl}/user/${user.username}`,\n    image: user.profileImageUrl || `${baseUrl}/default-avatar.png`,\n    description: `Forex trader and community member on YoForex with ${reputationScore || 0} reputation points`,\n    jobTitle: 'Forex Trader',\n    worksFor: {\n      '@type': 'Organization',\n      '@id': `${baseUrl}#organization`,\n      name: 'YoForex Community',\n      url: baseUrl,\n    },\n    ...(sameAs.length > 0 && { sameAs }),\n    ...(knowsAbout.length > 0 && { knowsAbout }),\n    ...(interactionStatistic.length > 0 && { interactionStatistic }),\n  };\n}\n\n/**\n * Generate ProfilePage schema for user profiles (legacy)\n * Use generatePersonSchema for comprehensive Person schema\n */\nexport function generateProfilePageSchema(params: {\n  user: User;\n  canonicalUrl: string;\n}): ProfilePageSchema {\n  const { user, canonicalUrl } = params;\n\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'ProfilePage',\n    '@id': canonicalUrl,\n    mainEntity: {\n      '@type': 'Person',\n      '@id': `${canonicalUrl}#person`,\n      name: user.username,\n      url: canonicalUrl,\n      image: user.profileImageUrl || undefined,\n    },\n    dateCreated: user.createdAt ? new Date(user.createdAt).toISOString() : undefined,\n  };\n}\n\n/**\n * Generate FAQPage schema from Q&A content (Schema.org 2025 Enhanced)\n */\nexport function generateFAQPageSchema(params: {\n  questions: Array<{ question: string; answer: string; id?: string }>;\n  baseUrl: string;\n  pageUrl: string;\n}): FAQPageSchema {\n  const { questions, baseUrl, pageUrl } = params;\n  \n  return {\n    '@context': 'https://schema.org',\n    '@type': 'FAQPage',\n    '@id': pageUrl,\n    mainEntity: questions.map((q, index) => ({\n      '@type': 'Question',\n      '@id': q.id || `${pageUrl}#question-${index + 1}`,\n      name: q.question,\n      acceptedAnswer: {\n        '@type': 'Answer',\n        '@id': q.id ? `${pageUrl}#answer-${q.id}` : `${pageUrl}#answer-${index + 1}`,\n        text: q.answer,\n      },\n    })),\n  };\n}\n\n/**\n * Legacy alias for backward compatibility\n */\nexport function generateFAQSchema(\n  questions: Array<{ question: string; answer: string }>\n): FAQPageSchema {\n  return generateFAQPageSchema({\n    questions,\n    baseUrl: SITE_CONFIG.url,\n    pageUrl: `${SITE_CONFIG.url}/faq`,\n  });\n}\n\n/**\n * Generate VideoObject schema (Schema.org 2025 Enhanced)\n * Supports duration conversion and interaction statistics\n */\nexport function generateVideoObjectSchema(params: {\n  title: string;\n  description: string;\n  thumbnailUrl: string;\n  uploadDate: Date;\n  videoUrl?: string;\n  embedUrl?: string;\n  durationSeconds?: number;\n  viewCount?: number;\n  baseUrl: string;\n  author?: User;\n}): VideoObjectSchema {\n  const { title, description, thumbnailUrl, uploadDate, videoUrl, embedUrl, durationSeconds, viewCount, baseUrl, author } = params;\n  \n  return {\n    '@context': 'https://schema.org',\n    '@type': 'VideoObject',\n    '@id': videoUrl || embedUrl || `${baseUrl}/video/${title.toLowerCase().replace(/\\s+/g, '-')}`,\n    name: title,\n    description,\n    thumbnailUrl,\n    uploadDate: new Date(uploadDate).toISOString(),\n    ...(videoUrl && { contentUrl: videoUrl }),\n    ...(embedUrl && { embedUrl }),\n    ...(durationSeconds && { duration: secondsToISO8601Duration(durationSeconds) }),\n    ...(viewCount && {\n      interactionStatistic: {\n        '@type': 'InteractionCounter',\n        interactionType: 'https://schema.org/WatchAction',\n        userInteractionCount: viewCount,\n      },\n    }),\n    ...(author && {\n      author: {\n        '@type': 'Person',\n        name: author.username,\n        url: `${baseUrl}/user/${author.username}`,\n      },\n    }),\n  };\n}\n\n/**\n * Legacy alias for backward compatibility\n */\nexport function generateVideoSchema(params: {\n  title: string;\n  description?: string;\n  thumbnailUrl?: string;\n  uploadDate?: string;\n  duration?: string;\n  embedUrl?: string;\n  views?: number;\n}): VideoObjectSchema {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'VideoObject',\n    '@id': params.embedUrl || `${SITE_CONFIG.url}/video/${params.title.toLowerCase().replace(/\\s+/g, '-')}`,\n    name: params.title,\n    description: params.description || '',\n    thumbnailUrl: params.thumbnailUrl || '',\n    uploadDate: params.uploadDate || new Date().toISOString(),\n    duration: params.duration,\n    embedUrl: params.embedUrl,\n    interactionStatistic: params.views\n      ? {\n          '@type': 'InteractionCounter',\n          interactionType: 'https://schema.org/WatchAction',\n          userInteractionCount: params.views,\n        }\n      : undefined,\n  };\n}\n\n/**\n * Generate DiscussionForumPosting schema for forum threads (Schema.org 2025)\n * Includes interaction statistics, comments, and nested replies\n */\nexport function generateDiscussionForumPostingSchema(params: {\n  thread: ForumThread;\n  author: User;\n  baseUrl: string;\n  viewCount?: number;\n  replyCount?: number;\n  upvoteCount?: number;\n  replies?: Array<{ id: string; content: string; author: User; createdAt: Date; upvotes?: number }>;\n}): DiscussionForumPostingSchema {\n  const { thread, author, baseUrl, viewCount, replyCount, upvoteCount, replies } = params;\n  \n  const threadUrl = `${baseUrl}/thread/${thread.slug}`;\n  \n  // Build interaction statistics array\n  const interactionStatistic: InteractionCounter[] = [];\n  \n  if (viewCount !== undefined) {\n    interactionStatistic.push({\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/ViewAction',\n      userInteractionCount: viewCount,\n    });\n  }\n  \n  if (replyCount !== undefined) {\n    interactionStatistic.push({\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/CommentAction',\n      userInteractionCount: replyCount,\n    });\n  }\n  \n  if (upvoteCount !== undefined) {\n    interactionStatistic.push({\n      '@type': 'InteractionCounter',\n      interactionType: 'https://schema.org/LikeAction',\n      userInteractionCount: upvoteCount,\n    });\n  }\n  \n  // Build comment schemas if replies are provided\n  const comments: CommentSchema[] | undefined = replies?.map((reply) => ({\n    '@context': 'https://schema.org',\n    '@type': 'Comment',\n    '@id': `${threadUrl}#comment-${reply.id}`,\n    text: sanitizeForSchema(reply.content) || '',\n    author: {\n      '@type': 'Person',\n      '@id': `${baseUrl}/user/${reply.author.username}#person`,\n      name: reply.author.username,\n      url: `${baseUrl}/user/${reply.author.username}`,\n    },\n    datePublished: toISO8601(reply.createdAt)!,\n    ...(reply.upvotes !== undefined && { upvoteCount: reply.upvotes }),\n    parentItem: { '@id': threadUrl },\n  }));\n  \n  const schema: DiscussionForumPostingSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'DiscussionForumPosting',\n    '@id': threadUrl,\n    headline: thread.title.substring(0, 110),\n    articleBody: sanitizeForSchema(thread.body) || '',\n    author: {\n      '@type': 'Person',\n      '@id': `${baseUrl}/user/${author.username}#person`,\n      name: author.username,\n      url: `${baseUrl}/user/${author.username}`,\n    },\n    datePublished: toISO8601(thread.createdAt)!,\n    dateModified: toISO8601(thread.updatedAt)!,\n    url: threadUrl,\n    mainEntityOfPage: { '@id': threadUrl },\n    inLanguage: getLanguage(thread.body),\n    publisher: {\n      '@type': 'Organization',\n      '@id': SITE_CONFIG.organizationId,\n      name: SITE_CONFIG.name,\n      logo: {\n        '@type': 'ImageObject',\n        url: SITE_CONFIG.logo,\n      },\n    },\n  };\n  \n  // Add interaction statistics if provided\n  if (interactionStatistic.length > 0) {\n    schema.interactionStatistic = interactionStatistic;\n  }\n  \n  // Add comments if provided\n  if (comments && comments.length > 0) {\n    schema.comment = comments;\n  }\n  \n  // Add commentCount if provided\n  if (replyCount !== undefined) {\n    schema.commentCount = replyCount;\n  }\n  \n  return schema;\n}\n\n/**\n * Generate NewsArticle schema (Schema.org 2025)\n * For news articles with dateline and news-specific metadata\n */\nexport function generateNewsArticleSchema(params: {\n  headline: string;\n  description?: string;\n  content: string;\n  author: User;\n  publishDate: Date;\n  modifiedDate?: Date;\n  baseUrl: string;\n  url: string;\n  imageUrl?: string;\n  location?: string;\n  commentCount?: number;\n}): NewsArticleSchema {\n  const { headline, description, content, author, publishDate, modifiedDate, baseUrl, url, imageUrl, location, commentCount } = params;\n  \n  const schema: NewsArticleSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'NewsArticle',\n    '@id': `${baseUrl}${url}#newsarticle`,\n    headline: headline.substring(0, 110),\n    description: sanitizeForSchema(description),\n    image: validateImageUrl(imageUrl, baseUrl),\n    datePublished: toISO8601(publishDate)!,\n    dateModified: toISO8601(modifiedDate) || toISO8601(publishDate)!,\n    author: {\n      '@type': 'Person',\n      '@id': `${baseUrl}/user/${author.username}#person`,\n      name: author.firstName && author.lastName ? `${author.firstName} ${author.lastName}` : author.username,\n      url: `${baseUrl}/user/${author.username}`,\n    },\n    publisher: {\n      '@type': 'Organization',\n      '@id': SITE_CONFIG.organizationId,\n      name: SITE_CONFIG.name,\n      logo: {\n        '@type': 'ImageObject',\n        url: SITE_CONFIG.logo,\n      },\n    },\n    articleBody: sanitizeForSchema(content),\n    inLanguage: getLanguage(content),\n    url: `${baseUrl}${url}`,\n    ...(location && { dateline: location }),\n  };\n  \n  // Conditional: Add commentCount only if comments exist\n  if (commentCount && commentCount > 0) {\n    (schema as any).commentCount = commentCount;\n  }\n  \n  // Validate required properties\n  if (!validateRequiredProperties(schema, ['headline', 'datePublished', 'author', 'publisher'])) {\n    throw new Error('Missing required NewsArticle schema properties');\n  }\n  \n  return schema;\n}\n\n/**\n * Generate BlogPosting schema (Schema.org 2025)\n * For blog posts with word count and article sections\n */\nexport function generateBlogPostingSchema(params: {\n  title: string;\n  description?: string;\n  content: string;\n  author: User;\n  publishDate: Date;\n  modifiedDate?: Date;\n  baseUrl: string;\n  url: string;\n  imageUrl?: string;\n  category?: string;\n  commentCount?: number;\n}): BlogPostingSchema {\n  const { title, description, content, author, publishDate, modifiedDate, baseUrl, url, imageUrl, category, commentCount } = params;\n  \n  const schema: BlogPostingSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'BlogPosting',\n    '@id': `${baseUrl}${url}#blogposting`,\n    headline: title.substring(0, 110),\n    description: sanitizeForSchema(description),\n    image: validateImageUrl(imageUrl, baseUrl),\n    datePublished: toISO8601(publishDate)!,\n    dateModified: toISO8601(modifiedDate) || toISO8601(publishDate)!,\n    author: {\n      '@type': 'Person',\n      '@id': `${baseUrl}/user/${author.username}#person`,\n      name: author.firstName && author.lastName ? `${author.firstName} ${author.lastName}` : author.username,\n      url: `${baseUrl}/user/${author.username}`,\n    },\n    publisher: {\n      '@type': 'Organization',\n      '@id': SITE_CONFIG.organizationId,\n      name: SITE_CONFIG.name,\n      logo: {\n        '@type': 'ImageObject',\n        url: SITE_CONFIG.logo,\n      },\n    },\n    articleBody: sanitizeForSchema(content),\n    wordCount: getWordCount(content),\n    inLanguage: getLanguage(content),\n    url: `${baseUrl}${url}`,\n    mainEntityOfPage: { '@id': `${baseUrl}${url}` },\n    ...(category && { articleSection: category }),\n  };\n  \n  // Conditional: Add commentCount only if comments exist\n  if (commentCount && commentCount > 0) {\n    (schema as any).commentCount = commentCount;\n  }\n  \n  // Validate required properties\n  if (!validateRequiredProperties(schema, ['headline', 'datePublished', 'author', 'publisher'])) {\n    throw new Error('Missing required BlogPosting schema properties');\n  }\n  \n  return schema;\n}\n\n// ============================================================================\n// COMBINED SCHEMA BUILDERS\n// ============================================================================\n\n/**\n * Generate complete homepage schema using @graph\n * Includes WebSite + Organization\n */\nexport function generateHomepageSchema(config: SiteConfig = SITE_CONFIG) {\n  return {\n    '@context': 'https://schema.org',\n    '@graph': [generateOrganizationSchema(config), generateWebSiteSchema(config)],\n  };\n}\n\n/**\n * Generate schema for inner pages with breadcrumbs\n */\nexport function generatePageWithBreadcrumbsSchema(\n  breadcrumbItems: Array<{ name: string; url: string }>,\n  config: SiteConfig = SITE_CONFIG\n) {\n  return {\n    '@context': 'https://schema.org',\n    '@graph': [\n      generateBreadcrumbSchema(breadcrumbItems),\n      {\n        '@type': 'Organization',\n        '@id': config.organizationId,\n        name: config.name,\n        url: config.url,\n        logo: config.logo,\n      },\n    ],\n  };\n}\n\n// ============================================================================\n// CONTENT TYPE DETECTION\n// ============================================================================\n\nexport type ContentType =\n  | 'homepage'\n  | 'article'\n  | 'product'\n  | 'category'\n  | 'profile'\n  | 'faq'\n  | 'video'\n  | 'generic';\n\n/**\n * Detect content type based on path and data\n */\nexport function detectContentType(pathname: string): ContentType {\n  if (pathname === '/') return 'homepage';\n  if (pathname.startsWith('/thread/') || pathname.startsWith('/discussions/'))\n    return 'article';\n  if (pathname.startsWith('/content/') || pathname.startsWith('/marketplace/'))\n    return 'product';\n  if (pathname.startsWith('/category/')) return 'category';\n  if (pathname.startsWith('/user/')) return 'profile';\n  if (pathname.startsWith('/faq')) return 'faq';\n\n  return 'generic';\n}\n\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n\n/**\n * Convert seconds to ISO 8601 duration format (e.g., PT2M30S)\n * Used for VideoObject duration property\n */\nexport function secondsToISO8601Duration(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = seconds % 60;\n  \n  let duration = 'PT';\n  if (hours > 0) duration += `${hours}H`;\n  if (minutes > 0) duration += `${minutes}M`;\n  if (secs > 0 || duration === 'PT') duration += `${secs}S`;\n  \n  return duration;\n}\n\n/**\n * Convert schema object to JSON-LD script tag\n */\nexport function schemaToScriptTag(schema: any): string {\n  return `<script type=\"application/ld+json\">${JSON.stringify(schema, null, 2)}</script>`;\n}\n\n/**\n * Validate schema structure (basic validation)\n * For production, use Google Rich Results Test API\n */\nexport function validateSchema(schema: BaseSchema): {\n  valid: boolean;\n  errors: string[];\n} {\n  const errors: string[] = [];\n\n  if (!schema['@context']) {\n    errors.push('Missing @context property');\n  }\n\n  if (!schema['@type']) {\n    errors.push('Missing @type property');\n  }\n\n  if (schema['@context'] !== 'https://schema.org') {\n    errors.push('Invalid @context - must be \"https://schema.org\"');\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors,\n  };\n}\n\n/**\n * Generate validation URL for Google Rich Results Test\n */\nexport function getRichResultsTestUrl(pageUrl: string): string {\n  return `https://search.google.com/test/rich-results?url=${encodeURIComponent(pageUrl)}`;\n}\n\n/**\n * Generate validation URL for Schema.org Validator\n */\nexport function getSchemaValidatorUrl(pageUrl: string): string {\n  return `https://validator.schema.org/#url=${encodeURIComponent(pageUrl)}`;\n}\n"],"names":[],"mappings":"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","ignoreList":[1]}